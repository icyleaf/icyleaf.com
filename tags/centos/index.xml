<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>CentOS on icyleaf</title><link>https://icyleaf.com/tags/centos/</link><description>Recent content in CentOS on icyleaf</description><language>zh-cn</language><lastBuildDate>Fri, 30 Dec 2016 17:52:30 +0800</lastBuildDate><atom:link href="https://icyleaf.com/tags/centos/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker 摸爬滚打对抗 CentOS 6</title><link>https://icyleaf.com/2016/12/docker-with-centos/</link><pubDate>Fri, 30 Dec 2016 17:52:30 +0800</pubDate><guid>https://icyleaf.com/2016/12/docker-with-centos/</guid><description>能不用 CentOS 就别了吧，啊不行？那就点进来看看吧</description><content:encoded><![CDATA[



<div class="updated updated-mark">
  <header class="updated-header color-note">
    <h4 class="updated-title">更新</h4>
    
    <p class="updated-meta">Oct 9, 2018</p>
    
  </header>
  <article class="updated-body">
    国庆期间恰巧服务器硬盘故障且运维并没有做 raid 备份，给更换了一台新内部服务器，索性升级到了 CentOS 7，因此针对 CentOS 6 安装 Docker 的答疑不再更新。
  </article>
</div>


<h2 id="前言">前言</h2>
<p>前不久终于把我们移动团队内部服务器从 CentOS 5.x 升级到了 6.8。本来是拜托让升级至 7.0 版本起码能用上 docker 1.12 版本还是靠谱的事情。
事情往往难以预料的被告知其他团队在安装 7.0 之后造成内部服务器群的网卡失灵的诡异故障只能作罢，想想起码还有个早期 docker 版本可安装也就先这么着吧。</p>
<p>这个是在 <a href="http://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/">如何在CentOS 上安装Gitlab</a> 之后有一个无奈的使用指南，
因为运维也有他的考虑方面，参见知乎讨论：<a href="https://www.zhihu.com/question/29191794">如何说服运维选择 Debian/Ubuntu 而不是 CentOS</a></p>
<h2 id="安装-docker">安装 Docker</h2>
<h3 id="171">1.7.1</h3>
<p>Docker 最后一个支持 CentOS 6 的版本是 1.7.1 还必须安装 epel 源之后就<a href="https://github.com/docker/docker/issues/14365">被大家欢天喜地的抛弃了 6 的支持</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo yum -y remove docker
</span></span><span class="line"><span class="ln">3</span><span class="cl">sudo yum install libselinux-python docker-io
</span></span></code></pre></div><blockquote>
<p>由于 yum 内 docker 已经被其他使用，不用安装错误了。</p>
</blockquote>
<h3 id="171-以上版本">1.7.1 以上版本</h3>
<p><strong>请果断放弃这种想法</strong>，虽然你可能在网上搜索有个别的文章说把内核升级到 3.10 后可以安装 docker 1.9 版本，经过我个人反复测试根本不可行！</p>
<p>当然如果你还是坚持想尝试，请参考如下链接：</p>
<ul>
<li><a href="http://www.pangxie.space/docker/364">http://www.pangxie.space/docker/364</a></li>
<li><a href="http://www.cnblogs.com/dongdongwq/p/5381752.html">http://www.cnblogs.com/dongdongwq/p/5381752.html</a></li>
<li><a href="http://0evin.com/2016/06/17/%5B%E5%8E%9F%E5%88%9B%5DCentOS6.5%E5%AE%89%E8%A3%85Docker1.11.X%E7%89%88%E6%9C%AC/">http://0evin.com/2016/06/17/%5B%E5%8E%9F%E5%88%9B%5DCentOS6.5%E5%AE%89%E8%A3%85Docker1.11.X%E7%89%88%E6%9C%AC/</a></li>
</ul>
<h2 id="配置-docker">配置 Docker</h2>
<p>安装成功后先不要配置开机自启动和启动服务，docker 的官方镜像在国内众所周知的慢的一塌糊涂，如果你是在国内服务器使用请参考如下配置。</p>
<p>我这里把我个人私藏已久的好用的镜像告诉大家，大家可不要以为我用的是阿里云或者 DaoCloud 这类有很多限制的玩意：</p>
<ul>
<li>中国科技大学镜像：https://docker.mirrors.ustc.edu.cn</li>
<li>网易蜂巢镜像：http://hub-mirror.c.163.com</li>
</ul>
<p>同样需要注意的是 1.7.1 版本的 docker 配置文件是在 <code>/etc/sysconfig/docker</code> 而不是网上和官方说的 <code>/etc/default/docker</code> 打开此文件在 other_args 配置对于的源即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># /etc/sysconfig/docker</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"># Other arguments to pass to the docker daemon process</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"># These will be parsed by the sysv initscript and appended</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"># to the arguments list passed to docker -d</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1">#other_args=</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">#other_args=&#34;--registry-mirror=http://hub-mirror.c.163.com&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="nv">other_args</span><span class="o">=</span><span class="s2">&#34;--registry-mirror=https://docker.mirrors.ustc.edu.cn&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="nv">DOCKER_CERT_PATH</span><span class="o">=</span>/etc/docker
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1"># Resolves: rhbz#1176302 (docker issue #407)</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nv">DOCKER_NOWARN_KERNEL_VERSION</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"># Location used for temporary files, such as those created by</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"># # docker load and build operations. Default is /var/lib/docker/tmp</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="c1"># # Can be overriden by setting the following environment variable.</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="c1"># # DOCKER_TMPDIR=/var/tmp</span>
</span></span></code></pre></div><p>后面就没什么好说的了，启动服务和设置开机自启动就完事了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo chkconfig docker on
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo service docker start
</span></span></code></pre></div><p>验证下启动的服务是否已经配置了国内镜像源</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ ps aux <span class="p">|</span> grep <span class="s2">&#34;docker -d&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">root     <span class="m">16992</span>  0.1  0.1 <span class="m">1239860</span> <span class="m">32276</span> ?       Sl   Dec29   2:02 /usr/bin/docker -d --registry-mirror<span class="o">=</span>https://docker.mirrors.ustc.edu.cn
</span></span><span class="line"><span class="ln">4</span><span class="cl">root     <span class="m">26873</span>  0.0  0.0 <span class="m">103332</span>   <span class="m">876</span> pts/2    S+   18:16   0:00 grep docker -d
</span></span></code></pre></div><h2 id="疑难杂症">疑难杂症</h2>
<h4 id="1-使用国内镜像源-pull-镜像偶尔会失败反复几次就可以解决">1. 使用国内镜像源 pull 镜像偶尔会失败，反复几次就可以解决</h4>
<p>频次不高原因未知，因此还未重视。</p>
<h4 id="2-docker-web-管理工具">2. Docker Web 管理工具</h4>
<p>推荐使用 <a href="https://github.com/portainer/portainer">portainer</a> ，兼容 1.7 的部分功能可能会发生部分功能和参数无法显示但不影响使用。之前我有推荐 rancher（可参考前篇文章：<a href="http://icyleaf.com/2016/08/how-to-install-rancher-on-osx/">如何在 OS X 上安装 Rancher
</a>），但 rancher 官方要求 docker 最低版本是 1.9+。</p>
<h4 id="3-docker-进程挂了重启后无法恢复之前的-containers">3. Docker 进程挂了重启后无法恢复之前的 containers</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker start c39206003c7a
</span></span><span class="line"><span class="ln">2</span><span class="cl">Error: Cannot start container c39206003c7a: Error getting container c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5 from driver devicemapper: Error mounting <span class="s1">&#39;/dev/mapper/docker-253:0-267081-c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5&#39;</span> on <span class="s1">&#39;/var/lib/docker/devicemapper/mnt/c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5&#39;</span>: device or resource busy
</span></span><span class="line"><span class="ln">3</span><span class="cl">2014/05/08 19:14:57 Error: failed to start one or more containers
</span></span></code></pre></div><p>这种一般是因为意外终止进程造成上次的 volume 没有正常 unmount，只需手动操作下即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">unmount /var/lib/docker/devicemapper/mnt/d640aea67108b04c6a5ba14645966b092db1f807f3e3f41dca7a1470f76b68fb
</span></span></code></pre></div><blockquote>
<p><code>d640aea67108b04c6a5ba14645966b092db1f807f3e3f41dca7a1470f76b68fb</code> 是根据不同 container 生成的，请根据实际情况复制和执行。</p>
</blockquote>
<p>这个真没办法，只能在 Dockerfile 或者进实例里面进行修改时区，这个我就不过多赘述了。</p>
<h4 id="4-升级运行的-container-版本">4. 升级运行的 container 版本</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker stop xxxx
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ docker create --volumes-from &lt;container_name_of_original_server&gt; <span class="se">\ </span>--name xxx-data image/name:&lt;tag_of_previous_rancher_server&gt;
</span></span><span class="line"><span class="ln">3</span><span class="cl">$ docker pull image/name:latest
</span></span><span class="line"><span class="ln">4</span><span class="cl">$ docker run -d --volumes-from xxx-data --restart<span class="o">=</span>unless-stopped <span class="se">\ </span>-p 8080:8080 image/namel.:latest
</span></span></code></pre></div><h4 id="5-非-root-用户执行-docker">5. 非 root 用户执行 docker</h4>
<p>创建 docker 用户组并重启 docker 服务，之后把你想要的用户加到 docker 用户组即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ groupadd docker
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ service docker restart
</span></span><span class="line"><span class="ln">3</span><span class="cl">$ usermod -a -G docker icyleaf
</span></span></code></pre></div><h4 id="6-宿主机-cst-时间会造成-docker-实例时间不准">6. 宿主机 CST 时间会造成 docker 实例时间不准</h4>
<p>这个真没办法，只能在 Dockerfile 或者进实例里面进行修改时区，这个我就不过多赘述了。</p>
]]></content:encoded></item><item><title>如何在 CentOS 上安装 Gitlab</title><link>https://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/</link><pubDate>Tue, 17 Sep 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/</guid><description>Barl Metal 安装服务依赖还是很痛苦的，CentOS 上是痛苦面具</description><content:encoded><![CDATA[<p>2013 年 08 月的 OpenParty &ldquo;<a href="http://www.beijing-open-party.org/event/25">花事如期</a>&rdquo; 活动上，<a href="https://github.com/vecio">晓东</a>在他的机器上演示了自建 Gitlab 的项目，看到 Gitlab 目前已经比较成熟，而不像早期寒碜的界面，这个时候看安装一下也是不错的事情，不过他们的项目文档只提供了 Ubuntu 系统的<a href="https://github.com/gitlabhq/gitlabhq#installation">安装文档</a>，对于 CentOS 没有提到，非官方的文档有比较老久，凭着之前熟悉 Ubuntu 和学习 CentOS，那就开始安装吧：</p>
<p>以下教程在 <code>CentOS 6 x86_64</code> 版本下操作。</p>
<h2 id="首先安装-epel-和编译依赖库">首先安装 EPEL 和编译依赖库</h2>
<pre tabindex="0"><code>$ rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</code></pre><blockquote>
<p>如果你是非 64 位，去上面的网址找到适合你发行版的最新版本的 epel rpm</p>
</blockquote>
<pre tabindex="0"><code>$ yum -y update
$ yum -y install gcc gcc-c++ make autoconf libyaml-devel gdbm-devel ncurses-devel openssl-devel zlib-devel readline-devel curl-devel expat-devel gettext-devel  tk-devel libxml2-devel libffi-devel libxslt-devel libicu-devel sendmail patch libyaml* pcre-devel sqlite-devel vim
</code></pre><h2 id="安装-python-27">安装 Python 2.7+</h2>
<p>Gitlab 要求 Python 2.5.5+ 以及 Ruby 1.9+</p>
<p>系统 Python 默认是 2.6.x，如果你想把 Python 升级到目前比较流行的 2.7.x 就参照下面步骤，否则直接跳过。（Gitlab 目前不支持 Python 3.0）</p>
<pre tabindex="0"><code>$ mkdir /tmp/gitlab &amp;&amp; cd /tmp/gitlab
$ curl --progress http://python.org/ftp/python/2.7.5/Python-2.7.5.tgz | tar xvf
$ cd Python-2.7.5
$ ./configure --prefix=/usr/local
$ make &amp;&amp; make altinstall
</code></pre><p>安装好之后，需要做两件事情，替换默认 python 的版本至最新版本，</p>
<pre tabindex="0"><code>$ sudo ln -s /usr/local/bin/python2.7 /usr/local/bin/python
</code></pre><blockquote>
<p>因为系统默认 <code>PATH</code> 的寻址路径是 <code>/usr/local/bin</code></p>
</blockquote>
<p>最后看下 Python 版本是否是刚刚安装的版本：</p>
<pre tabindex="0"><code>$ python --version
</code></pre><blockquote>
<p>由于 <code>yum</code> 是 python 的一个 module，所以这块修改可能会引起无法调用 yum 脚本，所以需要修改这个文件 <code>/usr/bin/yum</code> 的第一行为 <code>!#/usr/bin/python2.6</code></p>
</blockquote>
<h2 id="安装-ruby-20">安装 Ruby 2.0</h2>
<p>Ruby 1.9 和 2.0 的特性差别不大，索性升级至最新 2.0 版本即可</p>
<pre tabindex="0"><code>$ cd /tmp/gitlab
$ curl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p247.tar.gz | tar xz
$ cd ruby-2.0.0-p247
$ ./configure
$ make
$ make install
</code></pre><p>ruby 2.0 已经内置 gem (v2.0.3)，只需要安装 bundler</p>
<pre tabindex="0"><code>$ gem install bundler
</code></pre><blockquote>
<p>若在执行 <code>sudo ruby</code> 或 <code>sudo gem</code> 找不到命令，因为编译的路径配置到了 <code>/usr/local/bin</code>，我们只需要做下软链接到 root 用户可以找到的 <code>$PATH</code> 路径：</p>
</blockquote>
<pre tabindex="0"><code>$ ln -s /usr/local/bin/ruby /usr/bin/ruby
$ ln -s /usr/local/bin/gem /usr/bin/gem
$ ln -s /usr/local/bin/bundle /usr/bin/bundle
</code></pre><h2 id="安装-git-和-gitolite">安装 Git 和 Gitolite</h2>
<pre tabindex="0"><code>$ yum -y install git-all gitolite
</code></pre><h2 id="安装-nginx">安装 Nginx</h2>
<pre tabindex="0"><code>$ yum -y install nginx
$ service nginx start
</code></pre><blockquote>
<p>nginx 需要从 EPEL 中安装，默认系统没有 nginx 包。</p>
</blockquote>
<h2 id="安装-mysql-和-redis">安装 Mysql 和 Redis</h2>
<p>Gitlab 要求强制安装 redis 处理一些数据，另外支持 MySQL 和 PostgreSQL，这里主要以 MySQL 为例</p>
<pre tabindex="0"><code>$ yum -y install mysql mysql-devel mysql-server redis
</code></pre><p>配置 Mysql 和 gitlab 需要的用户和数据库</p>
<pre tabindex="0"><code>$ service mysqld start
$ mysql -u root
$ mysql&gt; CREATE USER &#39;gitlab&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;gitlab&#39;;
$ mysql&gt; CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
$ mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO &#39;gitlab&#39;@&#39;localhost&#39;;
$ mysql&gt; \q
</code></pre><p>Redis 使用默认配置即可，直接启动</p>
<pre tabindex="0"><code>$ service redis start
</code></pre><h2 id="添加-gitlab-用户">添加 Gitlab 用户</h2>
<pre tabindex="0"><code>$ useradd -c &#39;GitLab&#39; git
</code></pre><p>CentOS 的命令没有办法直接禁止用户的访问的参数，需要用下面命令：</p>
<pre tabindex="0"><code>$ passwd -l git
</code></pre><h2 id="安装-gitlab-shell">安装 Gitlab-shell</h2>
<p>使用 root 账户切换到 git 账户下操作，可以比官方教程省去一些麻烦的输入</p>
<pre tabindex="0"><code>$ su git &amp;&amp; cd /home/git
$ git clone https://github.com/gitlabhq/gitlab-shell.git
$ cd gitlab-shell
</code></pre><p>通过 <code>git tag</code> 查看最新版本并切换之</p>
<pre tabindex="0"><code>$ git checkout v1.7.1
</code></pre><p>编辑配置文件修改你要设定的域名（domain），比如 <code>http://gitlab.dev/</code></p>
<pre tabindex="0"><code>$ vim config.yml
</code></pre><p>完成之后执行安装脚本</p>
<pre tabindex="0"><code>$ ./bin/install
</code></pre><h2 id="安装-gitlab">安装 Gitlab</h2>
<pre tabindex="0"><code>$ cd /home/git
$ git clone https://github.com/gitlabhq/gitlabhq.git gitlab
$ cd /home/git/gitlab
</code></pre><p>通过 <code>git tag</code> 查看最新版本并切换之</p>
<pre tabindex="0"><code>$ git checkout 6.0.1
</code></pre><p>这里需要配置的东西多一些，这里参考<a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md#configure-it">官方的文档</a>，也可以安装我下面的步骤来：</p>
<pre tabindex="0"><code>$ cd /home/git/gitlab
</code></pre><p>复制配置文件，修改 host 相关的配置项，主要是 domain 要和上面的 <code>http://gitlab.dev</code></p>
<pre tabindex="0"><code>$ cp config.yml{.example,}
$ vim config/gitlab.yml
</code></pre><p>确认 gitlab 以下目录的权限是否正确</p>
<pre tabindex="0"><code>$ mkdir tmp/pids/
$ mkdir tmp/sockets/
$ chown -R git log/
$ chown -R git tmp/
$ chmod -R u+rwX log/
$ chmod -R u+rwX tmp/
$ chmod -R u+rwX tmp/pids/
$ chmod -R u+rwX tmp/sockets/
</code></pre><p>创建 satellites 目录，这个目录是保存各个用户的仓库</p>
<pre tabindex="0"><code>$ mkdir /home/git/gitlab-satellites
</code></pre><p>创建 uploads 目录（为什么 gitlab 不在项目中创建呢= =！）</p>
<pre tabindex="0"><code>$ mkdir public/uploads
$ chmod -R u+rwX  public/uploads
</code></pre><p>复制 unicorn 配置文件</p>
<pre tabindex="0"><code>$ cp config/unicorn.rb{.example,}
</code></pre><p>设置 ruby web 容器的参数，比如 2GB RAM 服务器可以设置 3 个 worker。</p>
<blockquote>
<p>如果系统其他服务占用了 unicorn 的端口，记得改名。</p>
</blockquote>
<pre tabindex="0"><code>$ vim config/unicorn.rb
</code></pre><p>设置一些 git 全局参数</p>
<pre tabindex="0"><code>$ git config --global user.name &#34;GitLab&#34;
$ git config --global user.email &#34;gitlab@localhost&#34;
$ git config --global core.autocrlf input
</code></pre><p>配置 gitlab 数据库设置</p>
<pre tabindex="0"><code>$ cp config/database.yml{.mysql,}
$ vim config/database.yml
$ chmod o-rwx config/database.yml
</code></pre><p>安装必需的 Ruby Gems</p>
<pre tabindex="0"><code>$ cd /home/git/gitlab
$ [sudo] gem install charlock_holmes --version &#39;0.6.9.4&#39;
$ bundle install --deployment --without development test postgres aws
</code></pre><p>初始化数据库数据（执行输入 <code>Yes</code> 继续创建）</p>
<pre tabindex="0"><code>$ bundle exec rake gitlab:setup RAILS_ENV=production
</code></pre><p>设置 init 脚本</p>
<pre tabindex="0"><code>$ sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab
$ sudo chmod +x /etc/init.d/gitlab
</code></pre><h2 id="检查-gitlab-状态">检查 Gitlab 状态</h2>
<pre tabindex="0"><code>$ bundle exec rake gitlab:env:info RAILS_ENV=production
</code></pre><p>启动 gitlab 服务</p>
<pre tabindex="0"><code>$ sudo service gitlab start
</code></pre><p>再起检查，保证所有项目都是绿色</p>
<pre tabindex="0"><code>$ bundle exec rake gitlab:check RAILS_ENV=production
</code></pre><h2 id="配置-nginx">配置 nginx</h2>
<p>根据 nginx 的安装路径适当修改下面的路径即可，我们先把 gitlab 提供的配置文件拷贝过去</p>
<pre tabindex="0"><code>$ sudo mkdir -p /etc/nginx/conf/sites/
$ sudo cp lib/support/nginx/gitlab /etc/nginx/conf/sites/gitlab.conf
</code></pre><blockquote>
<p>根据 nginx 版本和不同发行版的不同，配置结构可能不同根据你的实际情况加载 <code>gitlab.conf</code></p>
</blockquote>
<p>修改 <code>gitlab.conf</code> 的 <code>YOUR_SERVER_FQDN</code> 为上面设置的 domain。
最后修改 <code>nginx.conf</code> 或者 <code>default.conf</code> 加载 <code>/etc/nginx/conf/site</code> 下所有 conf 文件</p>
<pre tabindex="0"><code>http {

	include /etc/nginx/conf/site/*.conf;

	server {
		…
	}
}
</code></pre><p>保存后，重启各个服务</p>
<pre tabindex="0"><code>$ sudo service nginx reload
$ sudo service gitlab restart
</code></pre><h2 id="开始-gitlab-之旅">开始 Gitlab 之旅</h2>
<p>配置好 hosts 即可访问 <code>gitlab.dev</code></p>
<pre tabindex="0"><code>$ echo &#34;127.0.0.1 gitlab.dev&#34; &gt;&gt; /etc/hosts
</code></pre><p>默认的用户名密码：</p>
<pre tabindex="0"><code>admin@local.host
5iveL!fe
</code></pre><h2 id="各种坑">各种坑</h2>
<h3 id="1-错误日志报权限错误">1. 错误日志报权限错误</h3>
<pre tabindex="0"><code>2013/11/07 00:42:21 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/favicon.ico.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:21 [crit] 15875#0: *2 connect() to unix:/home/git/gitlab/tmp/sockets/gitlab.socket failed (13: Permission denied) while connecting to upstream, client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, upstream: &#34;http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket:/favicon.ico&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET / HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public//index.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET / HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET / HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 connect() to unix:/home/git/gitlab/tmp/sockets/gitlab.socket failed (13: Permission denied) while connecting to upstream, client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET / HTTP/1.1&#34;, upstream: &#34;http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket:/&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/favicon.ico&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/favicon.ico/index.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/favicon.ico.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 connect() to unix:/home/git/gitlab/tmp/sockets/gitlab.socket failed (13: Permission denied) while connecting to upstream, client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, upstream: &#34;http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket:/favicon.ico&#34;, host: &#34;gitlab.web.lo&#34;
</code></pre><p>解决方案:</p>
<pre tabindex="0"><code>$ (sudo) chmod o+x /home/git
</code></pre><h3 id="2-8080-端口被占用">2. 8080 端口被占用</h3>
<p>这样主要是因为 nginx 的配置是做 unicorn 的代理转发，实际上 gitlab 是由 unicorn 容器驱动，而在配置里默认绑定的是 <code>8080</code> 端口</p>
<pre tabindex="0"><code>$ vim /home/git/gitlab/config/unicorn.rb
</code></pre><p>找到 <code>listen &quot;127.0.0.1:8080&quot;, :tcp_nopush =&gt; true</code> 修改成其他未占用的端口号即可。</p>
]]></content:encoded></item><item><title>配置 CentOS 的网络联网设置</title><link>https://icyleaf.com/2013/09/network-configuration-in-centos/</link><pubDate>Thu, 05 Sep 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/09/network-configuration-in-centos/</guid><description>一篇很基础的配网知识点</description><content:encoded><![CDATA[<p>安装完毕 CentOS 6 Server 开始配置网络设置，网上有很多的教程，用的方法要么不全，要么操作方式比较早期，花点时间整理了下方法：</p>
<h2 id="dhcp-设定">DHCP 设定</h2>
<p>CentOS 默认使用了 <code>dhcp</code> 但是可恨的是没有开启。首先我们先看看本机的网卡信息</p>
<pre tabindex="0"><code>$ ip a
</code></pre><p>返回结果：</p>
<pre tabindex="0"><code>1: lo:  mtu 16436 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth0:  mtu 1500 qdisc mq state UP qlen 1000
link/ether 00:22:19:09:4d:3c brd ff:ff:ff:ff:ff:ff
</code></pre><p>其中 <code>lo</code> 是回路路由，咱们不必管它，这里 <code>eth0</code> 大家会很熟悉吧，这表示第一块网卡。好了，我们需要改改它的配置文件(CentOS 默认没有安装 <code>vim</code>):</p>
<pre tabindex="0"><code>$ vi /etc/sysconfig/network-scripts/ifcfg-eth0
</code></pre><p>如果你要改其他网卡，比如 <code>eth1</code> 那需要修改 <code>/etc/.../ifcfg-eth1</code></p>
<pre tabindex="0"><code>DEVICE=eth0
HWADDR=&#34;00:22:19:09:4D:3C&#34;
NM_CONTROLLED=yes
ONBOOT=yes      # 默认是 no，我们要改成 yes
BOOTPROTO=dhcp  # 如果不是这个值也要修改
</code></pre><p>最后重启 network service 即可：</p>
<pre tabindex="0"><code>$ service network restart
# 或者比较原始的方法
$ /etc/init.d/network restart
</code></pre><p>如果你看到它在重启并配置 DHCP 服务，那就说明没有问题了</p>
<pre tabindex="0"><code>Bringing up loopback interface:                [  OK  ]
Bringing up interface eth0:
Determining IP information for eth0... done.   [  OK  ]
</code></pre><p>测试一下</p>
<pre tabindex="0"><code>$ ping google.com
$ ifconfig
</code></pre><h2 id="手动设定">手动设定</h2>
<p>大部分操作和上面的一直，唯一不同的就是修改 <code>/etc/sysconfig/network-scripts/ifcfg-*</code> 文件：</p>
<pre tabindex="0"><code>DEVICE=eth0
HWADDR=&#34;00:22:19:09:4D:3C&#34;
NM_CONTROLLED=yes
ONBOOT=yes      		# 默认是 no，我们要改成 yes
BOOTPROTO=static  		# 改成静态模式
IPADDR=192.168.1.11 	# 设定 ip 地址
NETMASK=255.255.255.0 	# 设定子网掩码
GATEWAY=192.168.1.1 	# 设定网关 ip
</code></pre><p>修改 DNS 地址</p>
<pre tabindex="0"><code>$ vi /etc/resolve.conf

nameserver 8.8.8.8 # 主 DNS
nameserver 8.8.4.4 # 备选 DNS
</code></pre>]]></content:encoded></item></channel></rss>