<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>QuickLook on icyleaf</title><link>https://icyleaf.com/tags/quicklook/</link><description>Recent content in QuickLook on icyleaf</description><language>zh</language><lastBuildDate>Mon, 30 Apr 2012 12:34:56 +0800</lastBuildDate><atom:link href="https://icyleaf.com/tags/quicklook/index.xml" rel="self" type="application/rss+xml"/><item><title>QuickLook 感悟</title><link>https://icyleaf.com/2012/04/thinking-in-quicklook/</link><pubDate>Mon, 30 Apr 2012 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2012/04/thinking-in-quicklook/</guid><description>
前段时间对 OS X 系统的 QuickLook 非常感兴趣，能够随着开发者的定制，针对不同的文件呈现符合用户需求的预览功能，然后认为它属于是万能的。随后可以琢磨利用它...</description><content:encoded><![CDATA[<p>前段时间对 OS X 系统的 <a href="http://en.wikipedia.org/wiki/Quick_Look">QuickLook</a> 非常感兴趣，能够随着开发者的定制，针对不同的文件呈现符合用户需求的预览功能，然后认为它属于是万能的。随后可以琢磨利用它做些意思的事情。</p>
<h1 id="范例">范例</h1>
<p>为了大家对它有个直接的认识，我这里找了几个范例，看到图大家就非常明白了！</p>
<p>默认系统很对 QuickTime 兼容格式的可以实现视频预览播放，如果安装了最新的 MPlayerX，同样也支持大多数格式（目前还不支持 mkv）
<img src="https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/Quicklook_Programming_Guide/Art/preview_example2.jpg"
  
  
  alt="video quicklook"></img>
</p>
<h1 id="预热">预热</h1>
<p>Xcode 已经内置了 QuickLook 的插件模块，一边阅读<a href="https://developer.apple.com/library/mac/#documentation/UserExperience/Conceptual/Quicklook_Programming_Guide/Introduction/Introduction.html">官方文档</a>，一边在 Github 上面搜索相关的<a href="https://github.com/search?q=QuickLook&amp;type=Repositories">开源项目</a>。</p>
<p>QuickLook 是通过 <a href="https://developer.apple.com/library/mac/#documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE">UTIs</a> 的资源类型来对文件进行预览。</p>
<h1 id="有意思的事情">有意思的事情</h1>
<p>不知从何开始，硬盘收集的电影越来越多，有时候也从朋友那边资源交换来了不少。其实这里有一个很大的问题，交换过来的资源并不一定符合每个人的口味，但面对一个个电影名字的众多视频而且可能还没有仔细的分类（包括我也是没有归类），其实在选择看哪个的时候有些头胀。之前也整理了一些 <a href="http://icyleaf.com/2012/03/pngcrush-usage-with-ios-apps/">pngcrush</a> 的资源。脑门一亮，在想能不能利用 QuickLook 去<em>准确显示</em>电影的信息。</p>
<p>电影的信息来源不用愁，利用 <a href="http://www.douban.com/service/apidoc/reference/subject">豆瓣相关 API</a> 可以搜索到电影的信息，但是这里还有几点难题：</p>
<ol>
<li>视频文件的文件名是否好提取关键字（视频文件根据每个来源提供者，视频工作室，个人的维护不同导致很难）</li>
<li>豆瓣 API 接口是否给力（根据 1 是否能够准确搜索到正确的结果呢）</li>
</ol>
<p>针对于上面的问题，第一我想测试下豆瓣 API 是否给力，于是找了几种不同方式的视频文件名进行测试，记过尚可，但是搜索结果一般都是多条，其结果显示可能会存在偏差（主要是存在于电脑重名），当然这样也无法避免。这里我想郑重的表扬 IMDB 的策略，<a href="http://www.imdbapi.com/">IMDB API</a> 可以按照关键字和 imdb id 去搜索（豆瓣也满足），让我表扬的地方在于，它返回的结果永远只有一条，我曾测试利用不同语种（大语种，小语种不行）的名字去尝试搜索几乎 98% 的命中率， 而且在搜索的基础上，又提供一个 year 的参数。</p>
<blockquote>
<p>这会 IMDB API 服务器总是 503 状态，哎&hellip;</p>
</blockquote>
<p>基于种种的问题，我最终采用了在文件添加 imdb id 的方式以保证完美的命中率！（虽然前期准备工作可能辛苦点 &gt;..&lt;）</p>
<h1 id="干活">干活！</h1>
<p>说干就干，在通读了文档和一些开源代码之后，就准备练手。如果大家同样开始跟我新建工程编写代码的时候就会发现一个很坑爹的事情，官方的文档根本没有更新！用的还是 Xcode 3 做的指导。问题在于 3 升级到 4 之后，很多东西都已经改的面目全非。对于熟悉 3 的开发者就不必担心了。</p>
<p>QuickLook 官方文档的前面内容都没有问题，主要是后面有个 Debug 和 Test 的章节，在 4 里面有了一些大的变化，比如需要把 <code>.qlgenerator</code> 文件复制到 <code>/Library/QuickLook</code> 或 <code>~/Library/QuickLook</code> 目录下面，然后通过外部命令 <code>qlmanage</code> 去做代码的实现预览。</p>
<blockquote>
<p>如果发现没有更新，尝试 <code>qlmanage -r</code> 更新一下</p>
</blockquote>
<p>在 Xcode 4 是如下解决：</p>
<ol>
<li>复制 <code>.qlgenerator</code> 文件到对应的目录下面</li>
</ol>
<p>在工程项目的 <code>Build Phases</code> 找到 <code>Add BuildPhase</code> 并选择 <code>Add Copy Files</code>，在选项设置 <code>Destination</code> 选择 <code>Absolute Path</code>，在 <code>Subpath</code> 填入 <code>~/Library/QuickLook</code>，最后在下面的列表添加项目的 <code>.qlgenerator</code> 文件</p>
<ol start="2">
<li>执行外部命令</li>
</ol>
<p>在工程中按快捷键 <code>Command + Shift + ,</code>，打开 Scheme， 在 <code>Run</code> 的 <code>Info</code> 更换 <code>Executable</code>，在 <code>/usr/bin</code> 找到 <code>qlmanage</code> 文件。再更换到 <code>Arguments</code> 里面添加参数格式：</p>
<blockquote>
<p>-p /your/path/to/quicklook/file</p>
</blockquote>
<p>比如，我要预览的是 <code>/Users/icyleaf/sample.mkv</code> 文件:</p>
<blockquote>
<p>-p /Users/icyleaf/sample.mkv</p>
</blockquote>
<h1 id="备受打击">备受打击</h1>
<p>当一切都紧锣密鼓的完成下去的时候，遇到一个无法解决的问题，就是在使用 HTTP 请求的时候，总是返回 &ldquo;<em>Operation not permitted</em>&rdquo; 的错误，最后没有办法开始 Google 求助，然后发现了<a href="http://web.archiveorange.com/archive/v/SEb6aPoIYeg2zfU4v9Ee">一个很残酷的现实</a>。于是我有仔细的看了看官方文档，翻到了彻底让我失败的证据！</p>
<blockquote>
<p><em>Important</em> For security reasons, you cannot use Web Kit plug-ins in HTML passed back to Quick Look (so you cannot, for example, use Java applets or Flash animations).</p>
</blockquote>
<p>当前我以为只是不能使用 Webkit 嵌套 HTML，但是看到很多例子（比如预览 Markdown，JSON，.strings 文件）都是通过 WebKit 达到预览格式化后的 HTML 实现的。我还特别高兴的认为官方文档净吓唬我&hellip;</p>
<p>原来官方是出于安全考虑，把所有应用放在一个安全的 sandbox 里面，任何有威胁可能的安全问题一律扼杀掉，最终导致我的想法难产了 T_______T</p>
<p>BTW，假如你的 QuickLook 也需要使用到 Webkit，默认调试报 &ldquo;WebKit Threading Violation - initial use of WebKit from a secondary thread.&rdquo; 错误，系统不运行从其他线程访问资源，因此在 Info.plist 把 <code>QLNeedsToBeRunInMainThread</code> 设置为 <code>YES</code> 即可。</p>
<h1 id="漏网之鱼">漏网之鱼?</h1>
<p>为什么这么讲呢，因为我看到 QuickLook 可以利用第三方的命令甚至是脚本去实现一些功能:</p>
<ul>
<li><a href="https://github.com/davea/qlmarkdownpython">qlmarkdownpython</a> - 利用 py 脚本 + Python framework 实现 markdown 的格式化</li>
<li><a href="https://github.com/johan/QuickJSON">QuickJSON</a> - 利用 node 脚本实现 JSON 的友好化显示</li>
</ul>
<p>假如可以利用外部的脚本及命令的话，那是不是可以利用他们完成网络的访问及后续的格式化工作，QuickLook 只是做统一的输出？</p>
<p>To be contiue&hellip;</p>
]]></content:encoded></item></channel></rss>