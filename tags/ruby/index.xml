<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ruby on icyleaf</title><link>https://icyleaf.com/tags/ruby/</link><description>Recent content in Ruby on icyleaf</description><language>zh</language><lastBuildDate>Fri, 15 Nov 2019 19:10:07 +0800</lastBuildDate><atom:link href="https://icyleaf.com/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Cocoapods 新增 CDN 加速镜像源码解读</title><link>https://icyleaf.com/2019/11/cocoapods-cdn-source-code-reading/</link><pubDate>Fri, 15 Nov 2019 19:10:07 +0800</pubDate><guid>https://icyleaf.com/2019/11/cocoapods-cdn-source-code-reading/</guid><description>
通过代码剖析对比前后都发生了什么变化</description><content:encoded><![CDATA[<p>Cocoapods <a href="https://blog.cocoapods.org/CocoaPods-1.7.2/">1.7.2</a> 版本开始增加 CDN 支持但默认没有启用，<a href="http://blog.cocoapods.org/CocoaPods-1.8.0-beta/">1.8</a> 版本的发布舍弃了原始完整克隆的 Specs 仓库改用 CDN 服务。CDN 利用的是免费且强大的 <a href="https://www.jsdelivr.com/">jsDelivr</a> CDN 服务，该 CDN 网络在国内是有备案因此速度和稳定性都会有很好的保证。该提案其实在去年已经有人使用 Cocoapods Plugin 的方式实现并向社区<a href="https://github.com/CocoaPods/CocoaPods/issues/8268">贡献 PR</a>。</p>
<p>那么 CDN 支持相比之前的机制有啥优势呢？难道是把 Pods 的仓库和源码都托管到 CDN 网络了吗，其实并不是的。</p>
<blockquote>
<p>友情提醒：本文只重点分析 Pods 下载的机制，不展开其他方面，以下只是 <code>pod install</code> 执行顺序中的一部分，如果你想了解 Cocoapods 都干了什么可以前往<a href="https://www.jianshu.com/p/84936d9344ff">这篇文章</a>查阅。</p>
</blockquote>
<h3 id="老的机制">老的机制</h3>
<p>第一步先检查本地 <code>~/.cocoapods/repo/master</code> 目录是否存在，没有直接克隆 <code>https://github.com/Cocoapods/Specs.git</code> 仓库，这步在国内来说特别费时间正常下载下来目录应该是 2G+，如果有其他 source 源（比如私有源）会重复刚才的操作。</p>
<p>第二步安装 Podfile 每个 Pod 去在各个源中寻找对应的版本，从版本的 .podspec 文件解析获取组件的地址，这个可能是 http、git、svn、hg 中的<a href="https://guides.cocoapods.org/syntax/podspec.html#source">任意一个</a>，获取到之后开始下载（默认是在 <code>~/Library/Caches/CocoaPods</code> 做缓存目录）</p>
<h3 id="新的机制">新的机制</h3>
<p>第一步分析 Podfile 里面的 source ，如果没有走默认 Cocoapods 的配置（1.8 以上是 <a href="https://cdn.cocoapods.org">https://cdn.cocoapods.org</a> ，之前的还是 Cocoapods/Spec），
如果本地不存在官方 cdn 的 repo 名字是 trunk 的保留字，自己无法创建。如果有自定义的 source 会追加上去 sources 列表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln"> 1</span><span class="cl">$ http HEAD https://cdn.cocoapods.org/all_pods.txt
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">HTTP/1.1 200 OK
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">Accept-Ranges: bytes
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">Age: 0
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">Cache-Control: public, max-age=0, must-revalidate
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">Connection: keep-alive
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">Content-Length: 924280
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">Content-Type: text/plain; charset=UTF-8
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">Date: Sat, 09 Nov 2019 07:06:15 GMT
</span></span><span class="line"><span class="ln">10</span><span class="cl">Etag: &#34;acf0d284f3a8e82e0d66ba1a91cd30b9-ssl&#34;
</span></span><span class="line"><span class="ln">11</span><span class="cl">Server: Netlify
</span></span><span class="line"><span class="ln">12</span><span class="cl">Strict-Transport-Security: max-age=31536000
</span></span><span class="line"><span class="ln">13</span><span class="cl">X-NF-Request-ID: 50b466cd-ce9e-4326-b5bb-0d29a193ae4b-7809449
</span></span></code></pre></div><p>第二步检查或下载每个 source，每个 source 会检查是否是 cdn 类型（使用 HEAD 请求检查是否包含 /all_pods.txt）文件：</p>
<ul>
<li>cdn 类型，下面详细解释</li>
<li>其他类型，走原来的老的逻辑，不再赘述</li>
</ul>
<p>第三步，下载 <code>Cocoapods-version.yml</code> 并缓存 etag，下载 <code>/Cocoapods-version.yml</code> 并取 headers 的第一个 etag 的值存为 <code>/Cocoapods-version.yml.etag</code>，如果存在 etag 会比对一样就不需要下载， 链接支持根目录和其他目录，支持 301 跳转。</p>
<p>Cocoapods-version.yml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="w"></span><span class="nt">min</span><span class="p">:</span><span class="w"> </span><span class="m">1.0.0</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w"></span><span class="nt">last</span><span class="p">:</span><span class="w"> </span><span class="m">1.8.4</span><span class="w">
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="w"></span><span class="nt">prefix_lengths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="w"></span>- <span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="w"></span>- <span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="w"></span>- <span class="m">1</span><span class="w">
</span></span></span></code></pre></div><p>第四步，分析 Pod 并获取 pod 的版本信息，比如 Podfile 我增加了一个 <code>pod &quot;AFNetworking&quot;</code>，把 pod 名字做 MD5 后的值取 Cocoapods-version.yml 的 prefiex_length 数组长度的值单字母拆分用下划线分割按照规则拼成文件名 <code>all_pods_versions(_{fragment}).txt</code> (如果prefix_length 为 0 则只会去下载 <code>/all_pods_versions.txt</code>)</p>
<p>比如：prefix_lengths 数组大小为 3，AFNetworking MD5 后 <code>a75d452377f396bdc4b623a5df25820</code> 则匹配前三位 a75 拆分后 a_7_5
后查找 cdn url 路径的 <code>/all_pods_versions_a_7_5.txt</code> 下载下来后的内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">Fuse/0.1.0/0.2.0/1.0.0/1.1.0/1.2.0
</span></span><span class="line"><span class="ln">2</span><span class="cl">GXFlowView/1.0.0
</span></span><span class="line"><span class="ln">3</span><span class="cl">JFCountryPicker/0.0.1/0.0.2
</span></span><span class="line"><span class="ln">4</span><span class="cl">JVEmptyElement/0.1.0
</span></span></code></pre></div><p>第五步，下载 pod 的所有版本的 .podspec 文件，从上面的文件按照每行寻找第一段的名字，把后面的所有版本按照上面获取到的 prefix_lengths 的值（例如 AFNetworking 是 a, 7 , 5） <code>/Specs/a/7/5/AFNetworking/{version}/AFNetworking.podspec.json</code> 一次下载，并保存 etag 为 <code>/Specs/a/7/5/AFNetworking/{version}/AFNetworking.podspec.json.etag</code>，这个 etag 作用上面已经讲过，如果没有找到的话就会直接报错。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">Adding spec repo `trunk` with CDN `https://cdn.cocoapods.org/`
</span></span><span class="line"><span class="ln">2</span><span class="cl">  CDN: trunk Relative path downloaded: CocoaPods-version.yml, save ETag: &#34;031c25b97a0aca21900087e355dcf663-ssl&#34;
</span></span><span class="line"><span class="ln">3</span><span class="cl">  CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local because checking is only perfomed in repo update
</span></span><span class="line"><span class="ln">4</span><span class="cl">  CDN: trunk Relative path downloaded: all_pods_versions_a_7_5.txt, save ETag: &#34;5b32718ecbe82b0ae71ab3c77120213f-ssl&#34;
</span></span><span class="line"><span class="ln">5</span><span class="cl">  CDN: trunk Redirecting from https://cdn.cocoapods.org/Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json to https://raw.githubusercontent.com/CocoaPods/Specs/master/Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json
</span></span><span class="line"><span class="ln">6</span><span class="cl">  CDN: trunk Relative path downloaded: Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json, save ETag: W/&#34;a5f00eb1fdfdcab00b89e96bb81d48c110f09220063fdcf0b269290bffc18cf5&#34;
</span></span></code></pre></div><p>Cocoapods trunk 源的目录结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">.cocoapods
</span></span><span class="line"><span class="ln">2</span><span class="cl">  repo
</span></span><span class="line"><span class="ln">3</span><span class="cl">    trunk
</span></span><span class="line"><span class="ln">4</span><span class="cl">      .url   #=&gt; https://cdn.cocoapods.org/
</span></span><span class="line"><span class="ln">5</span><span class="cl">      Cocoapods-version.yml  # =&gt; 从 https://cdn.cocoapods.org/CocoaPods-version.yml 下载的文件
</span></span><span class="line"><span class="ln">6</span><span class="cl">      Cocoapods-version.yml.etag  # 上一个请求的第一个 etag 值存下来
</span></span><span class="line"><span class="ln">7</span><span class="cl">      all_pods_versions_a_7_5.txt  # 参考上面的备注
</span></span><span class="line"><span class="ln">8</span><span class="cl">      all_pods_versions_a_7_5.txt.etag # 上一个请求的第一个 etag 值存下来
</span></span></code></pre></div><p>第六步和老的机制第二步一样同样最终还是会寻找 podspec 里面下载地址去下载，
也就是说<strong>真正 CDN 缓存加速的只有原有 Specs 必要的 podspec 文件，而不会加速 Pod 真正源地址</strong>，改机制只是减轻了本地更新官方 Specs 源的麻烦以及维护一个巨大的本地文件存储，这也是中心化机制的一个心结。</p>
<h3 id="结语">结语</h3>
<p>这个机制大大减少了本地需要占一个较大存储的问题，尤其是初次 <code>pod install</code> 时间长的情况，但 Pod 库本身还是各自的
地址本质上无法解决安装 Pod 消耗时间过长的问题。</p>
]]></content:encoded></item><item><title>打通 Sidekiq 的任督二脉 Ruby 和 Crystal</title><link>https://icyleaf.com/2017/04/sidekiq-works-in-ruby-togethor-with-crystal/</link><pubDate>Wed, 26 Apr 2017 16:00:49 +0000</pubDate><guid>https://icyleaf.com/2017/04/sidekiq-works-in-ruby-togethor-with-crystal/</guid><description>
Crystal 和 Ruby 如何相互通讯</description><content:encoded><![CDATA[<p>自从开始研究 Crystal 这门语言（之前也有<a href="http://icyleaf.com/2016/07/gitlab-api-wrapper-for-crystal/">介绍</a>过），基本上每隔一段时间都会看看它的近况，去年 sidekiq 的作者用该语言重新实现了 sidekiq 项目而且给出了特别竟然的<a href="http://www.mikeperham.com/2016/05/25/sidekiq-for-crystal/">对比数据</a>。</p>
<p><img src="/uploads/2017/04/26/sidekiq-benchmarks.png"
  
  
  alt="IMAGE"></img>
</p>
<p>相对比 Gitlab 采用 go 语言重新 gitlab_ci_runner 而学习一门新的语言达到高效率低内存的方法之外 Crystal 就像是新的希望。使用 Crystal 重新的 sidekiq 的代码也非常的简单但已经实现了核心功能和 Web UI。</p>
<p>本篇就给大家介绍下如果在 Ruby on Rails 的框架下调度和执行 Crystal 写的 Workers。测试环境是在 macOS 下，其他版本信息如下：</p>
<ul>
<li>Ruby 2.0+
<ul>
<li>Rails 5.0</li>
<li>Sidekiq 5.0</li>
</ul>
</li>
<li>Crystal 0.22.0+
<ul>
<li>Sidekiq.cr 0.7.0</li>
</ul>
</li>
</ul>
<h2 id="配置-rails-环境">配置 Rails 环境</h2>
<p>如何配置 Ruby、Rails、Bundler、Redis 就不在赘述，只讲核心，首先新建一个最基础的 rails 项目，不用额外的第三方辅助工具，数据库用 sqlite 减少外部依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ rails new ruby_on_rails -B -T -S -C -M  -d sqlite3
</span></span></code></pre></div><p>进入项目 <code>ruby_on_rails</code> 编辑 <code>Gemfile</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># 修改源地址</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">source</span> <span class="s1">&#39;https://gems.ruby-china.org&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"># 新增 sidekiq 的支持</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;redis-rails&#39;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;sidekiq&#39;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"># 其余的不用修改</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"># Bundle edge Rails instead: gem &#39;rails&#39;, github: &#39;rails/rails&#39;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 5.0.2&#39;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"># Use sqlite3 as the database for Active Record</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1"># Use Puma as the app server</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;puma&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;redis-rails&#39;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;sidekiq&#39;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">  <span class="c1"># Call &#39;byebug&#39; anywhere in the code to stop execution and get a debugger console</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;byebug&#39;</span><span class="p">,</span> <span class="ss">platform</span><span class="p">:</span> <span class="ss">:mri</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">  <span class="c1"># Access an IRB console on exception pages or by using &lt;%= console %&gt; anywhere in the code.</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;web-console&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 3.3.0&#39;</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;listen&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.5&#39;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">  <span class="c1"># Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;spring&#39;</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;spring-watcher-listen&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0.0&#39;</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="c1"># Windows does not include zoneinfo files, so bundle the tzinfo-data gem</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;tzinfo-data&#39;</span><span class="p">,</span> <span class="ss">platforms</span><span class="p">:</span> <span class="o">[</span><span class="ss">:mingw</span><span class="p">,</span> <span class="ss">:mswin</span><span class="p">,</span> <span class="ss">:x64_mingw</span><span class="p">,</span> <span class="ss">:jruby</span><span class="o">]</span>
</span></span></code></pre></div><p>配置好之后执行 <code>bundle insall</code> 安装好 Gem 的依赖，再创建文件 <code>config/initializers/sidekiq.rb</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">redis_config</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">url</span><span class="p">:</span> <span class="s1">&#39;redis://localhost:6379/8&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="no">Sidekiq</span><span class="o">.</span><span class="n">configure_server</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="n">config</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">redis_config</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="no">Sidekiq</span><span class="o">.</span><span class="n">configure_client</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">  <span class="n">config</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">redis_config</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>Sidekiq 的配置就完事了。</p>
<h2 id="配置-crystal-环境">配置 Crystal 环境</h2>
<p>Crystal 是基于 LLVM 开发，除了 Windows 以外其他绝大数系统基本上都支持（最新支持的 ARM 架构，可在树莓派上安装），<a href="https://crystal-lang.org/docs/installation/">安装步骤</a>同样不再赘述。</p>
<p>安装好之后首先创建一个新项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ crystal init app crystal
</span></span></code></pre></div><p>进入项目 <code>crystal</code> 编辑 <code>Shard.yml</code> 这是一个类似于 Gemfile 的功能，但实现的去中心化，在文件末尾新增如下依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">dependencies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="w">  </span><span class="nt">sidekiq</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w">    </span><span class="nt">github</span><span class="p">:</span><span class="w"> </span><span class="l">mperham/sidekiq.cr</span><span class="w">
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="w">    </span><span class="nt">branch</span><span class="p">:</span><span class="w"> </span><span class="l">master</span><span class="w">
</span></span></span></code></pre></div><p>执行 <code>shards update</code> 或 <code>crystal deps</code> 安装依赖即可。</p>
<h2 id="编写-workers">编写 Workers</h2>
<p>Worker 的功能很简单，就是做一个类似 Redis ping 的功能，Worker 在日志输出 PONG。</p>
<h3 id="ruby-版本">Ruby 版本</h3>
<p>安装 sidekiq 后会在 rails 内置命令可生成基础模板，切换到 <code>ruby_on_rails</code> 目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ rails g sidekiq:worker ping1
</span></span><span class="line"><span class="ln">2</span><span class="cl">      create  app/workers/ping1_worker.rb
</span></span><span class="line"><span class="ln">3</span><span class="cl">$ rails g sidekiq:worker ping2
</span></span><span class="line"><span class="ln">4</span><span class="cl">      create  app/workers/ping2_worker.rb
</span></span></code></pre></div><p>worker 的内容也很简单，我在日志输出增加了 <code>[Ruby]</code> 作为 Ruby 版本的标识便于后面的辨识</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># app/workers/ping1_worker.rb</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="k">class</span> <span class="nc">Ping1Worker</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="kp">include</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Worker</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;[Ruby] PONG !&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"># app/workers/ping2_worker.rb</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="k">class</span> <span class="nc">Ping2Worker</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="kp">include</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Worker</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;[Ruby] PONG PONG !!&#34;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="crystal-版本">Crystal 版本</h3>
<p>切换到 <code>crystal</code> 目录下和 Ruby 不同的是它的源码是存放在 src 目录下面，我们稍微调整下结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">.
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">├── LICENSE
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">├── README.md
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">├── lib
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">├── shard.lock
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">├── shard.yml
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">├── spec
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">└── src
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    ├── crystal_server.cr
</span></span><span class="line"><span class="ln">10</span><span class="cl">    └── workers
</span></span><span class="line"><span class="ln">11</span><span class="cl">        ├── ping1_worker.cr
</span></span><span class="line"><span class="ln">12</span><span class="cl">        └── ping2_worker.cr
</span></span></code></pre></div><p>worker 的内容如下，并设置 queue 为 <code>crystal</code> 用于指派使用:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-crystal" data-lang="crystal"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># src/workers/ping1_worker.cr</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="k">class</span> <span class="nc">Ping1Worker</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="k">include</span> <span class="n">Sidekiq</span><span class="o">::</span><span class="n">Worker</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">sidekiq_options</span> <span class="k">do</span> <span class="o">|</span><span class="n">job</span><span class="o">|</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">job</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="s2">&#34;crystal&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="k">def</span> <span class="nf">perform</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;[Crystal] PONG !&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1"># src/workers/ping2_worker.cr</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="k">class</span> <span class="nc">Ping2Worker</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="k">include</span> <span class="n">Sidekiq</span><span class="o">::</span><span class="n">Worker</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="n">sidekiq_options</span> <span class="k">do</span> <span class="o">|</span><span class="n">job</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="n">job</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="s2">&#34;crystal&#34;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">  <span class="k">def</span> <span class="nf">perform</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;[Crystal] PONG PONG !!&#34;</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>通过代码可以看出 Ruby 和 Crystal 的代码基本上是完全一样的。</p>
<h2 id="任督二脉">任督二脉</h2>
<p>对于使用 Sidekiq 的童鞋都知道，如果我想执行一个队列任务，只需要调用下 Worker 本身的 <code>perform_*</code> 方法，这样的话根本无法调用一个不同语言版本的 Worker 否则 sidekiq 会报类似如下错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">2017-04-26T06:19:14.187Z <span class="m">50690</span> TID-ox4qa1k8o WARN: <span class="o">{</span><span class="s2">&#34;context&#34;</span>:<span class="s2">&#34;Job raised exception&#34;</span>,<span class="s2">&#34;job&#34;</span>:<span class="o">{</span><span class="s2">&#34;class&#34;</span>:<span class="s2">&#34;Crystal::Ping1Worker&#34;</span>,<span class="s2">&#34;args&#34;</span>:<span class="o">[]</span>,<span class="s2">&#34;retry&#34;</span>:true,<span class="s2">&#34;queue&#34;</span>:<span class="s2">&#34;default&#34;</span>,<span class="s2">&#34;jid&#34;</span>:<span class="s2">&#34;42ce106d79
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="s2">01a274f3db2d54&#34;</span>,<span class="s2">&#34;created_at&#34;</span>:1493187554.181674,<span class="s2">&#34;enqueued_at&#34;</span>:1493187554.1820428<span class="o">}</span>,<span class="s2">&#34;jobstr&#34;</span>:<span class="s2">&#34;{\&#34;class\&#34;:\&#34;Crystal::Ping1Worker\&#34;,\&#34;args\&#34;:[],\&#34;retry\&#34;:true,\&#34;queue\&#34;:\&#34;default\&#34;,\&#34;jid
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="s2">\&#34;:\&#34;42ce106d7901a274f3db2d54\&#34;,\&#34;created_at\&#34;:1493187554.181674,\&#34;enqueued_at\&#34;:1493187554.1820428}&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">2017-04-26T06:19:14.187Z <span class="m">50690</span> TID-ox4qa1k8o WARN: NameError: uninitialized constant Crystal
</span></span></code></pre></div><p>打通任督二脉的关键在于两个版本都提供一个 low-level 的 API 可用于定制化调用：</p>
<h3 id="ruby-版本-1">Ruby 版本</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">job_id</span> <span class="o">=</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">push</span><span class="p">(</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="s1">&#39;queue&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>  <span class="c1"># 指派特定的队列名，默认是 default</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>  <span class="c1"># Worker 的类名，可以是实例化类型或字符串类型</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="s1">&#39;args&#39;</span> <span class="o">=&gt;[]</span>     <span class="c1"># Worker 接收的参数，以数组形式传递</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><h3 id="crystal-版本-1">Crystal 版本</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-crystal" data-lang="crystal"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">job</span> <span class="o">=</span> <span class="n">Sidekiq</span><span class="o">::</span><span class="n">Job</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">job</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="s2">&#34;default&#34;</span>   <span class="c1"># 指派特定的队列名，默认是 default</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">job</span><span class="o">.</span><span class="n">klass</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>          <span class="c1"># Worker 的类名，可以是实例化类型或字符串类型</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">job</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="o">[].</span><span class="n">to_json</span>   <span class="c1"># Worker 接收的参数，以数组形式传递</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="n">client</span> <span class="o">=</span> <span class="n">Sidekiq</span><span class="o">::</span><span class="n">Client</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="n">job_id</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="打通任督二脉">打通任督二脉</h2>
<p>准备工作就绪，打通任督二脉的关键就只差一个了！那就是对于 redis 数据共享，细心的童鞋可能留意了上面只配置了 Ruby 版本的 redis 连接，但对于 Crystal 我故意留白没有说明。因为这个是最关键的一步，对于当前 sidekiq.cr 版本来说。</p>
<p>sidekiq.cr 对于作者来说是一次试水并没有话特别大的精力，Crystal 本身还处在开发阶段在未到达 1.0 之前会有各种 Break Changes。而且作者是非常照顾 Heroku 的开发者，默认仅支持该服务平台 Redis-to-Go 服务，因此想设置 Redis 连接信息必须通过系统的环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">REDISTOGO_URL</span><span class="o">=</span>redis://localhost:6379/8
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nv">REDIS_PROVIDER</span><span class="o">=</span><span class="nv">$REDISTOGO_URL</span>
</span></span></code></pre></div><p>上面的配置是不可省略的，因为我个人不懂 Heroku 给作者乱提了 PL 还被作者狠批了一顿 :(</p>
<p>回到话题本身，我们来继续写上 <code>src/crystal_server.cr</code> 关键的代码：</p>
<blockquote>
<p>注意：redis 连接信息无比保证和 rails 配置的是一致的！</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-crystal" data-lang="crystal"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">require</span> <span class="s2">&#34;sidekiq&#34;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="k">require</span> <span class="s2">&#34;sidekiq/cli&#34;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">require</span> <span class="s2">&#34;./workers/*&#34;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;LOCAL_REDIS&#34;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&#34;redis://localhost:6379/8&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;REDIS_PROVIDER&#34;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&#34;LOCAL_REDIS&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">cli</span> <span class="o">=</span> <span class="n">Sidekiq</span><span class="o">::</span><span class="no">CLI</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="n">server</span> <span class="o">=</span> <span class="n">cli</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="c1"># 支持中间件，默认留空即可</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="n">cli</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
</span></span></code></pre></div><p>代码需要编译执行，因为不编译是无法给 sidekiq cli 传递它接受的参数（当然也有方法，我放在末尾范例源码中自己寻找）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ crystal build src/crystal_server.cr -o crystal_server
</span></span></code></pre></div><p>通过上面命令把源码编译成可执行文件到项目根目录的 <code>crystal_server</code> 文件。</p>
<p>打开终端一：启动 ruby 的 sidekiq server</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ <span class="nb">cd</span> ruby_on_rails
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">$ sidekiq -q default
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">2017-04-26T06:47:19.299Z <span class="m">76282</span> TID-owewdljsc INFO: Booting Sidekiq 4.2.10 with redis options <span class="o">{</span>:url<span class="o">=</span>&gt;<span class="s2">&#34;redis://localhost:6379/8&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">         m,
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">         <span class="sb">`</span><span class="nv">$b</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    .ss,  <span class="nv">$$</span>:         .,d$
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="sb">`</span><span class="nv">$$</span>P,d<span class="nv">$P</span><span class="s1">&#39;    .,md$P&#34;&#39;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">     ,<span class="nv">$$$$$bmmd$$$P</span>^<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="s1">   .d$$$$$$$$$$P&#39;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">   <span class="nv">$$</span>^<span class="s1">&#39; `&#34;^$$$&#39;</span>       ____  _     _      _    _
</span></span><span class="line"><span class="ln">13</span><span class="cl">   $:     ,<span class="nv">$$</span>:       / ___<span class="p">|</span><span class="o">(</span>_<span class="o">)</span> __<span class="p">|</span> <span class="p">|</span> ___<span class="p">|</span> <span class="p">|</span> _<span class="o">(</span>_<span class="o">)</span> __ _
</span></span><span class="line"><span class="ln">14</span><span class="cl">   <span class="sb">`</span>b     :<span class="nv">$$</span>        <span class="se">\_</span>__ <span class="se">\|</span> <span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span>/ _ <span class="se">\ </span><span class="p">|</span>/ / <span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">          <span class="nv">$$</span>:         ___<span class="o">)</span> <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span>  __/   &lt;<span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">          <span class="nv">$$</span>         <span class="p">|</span>____/<span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>_,_<span class="p">|</span><span class="se">\_</span>__<span class="p">|</span>_<span class="p">|</span><span class="se">\_\_</span><span class="p">|</span><span class="se">\_</span>_, <span class="p">|</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">        .d<span class="nv">$$</span>                                       <span class="p">|</span>_<span class="p">|</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">2017-04-26T06:47:19.433Z <span class="m">76282</span> TID-owewdljsc INFO: Running in ruby 2.4.0p0 <span class="o">(</span>2016-12-24 revision 57164<span class="o">)</span> <span class="o">[</span>x86_64-darwin16<span class="o">]</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">2017-04-26T06:47:19.433Z <span class="m">76282</span> TID-owewdljsc INFO: See LICENSE and the LGPL-3.0 <span class="k">for</span> licensing details.
</span></span><span class="line"><span class="ln">21</span><span class="cl">2017-04-26T06:47:19.433Z <span class="m">76282</span> TID-owewdljsc INFO: Upgrade to Sidekiq Pro <span class="k">for</span> more features and support: http://sidekiq.org
</span></span><span class="line"><span class="ln">22</span><span class="cl">2017-04-26T06:47:19.442Z <span class="m">76282</span> TID-owewdljsc INFO: Starting processing, hit Ctrl-C to stop
</span></span></code></pre></div><p>打开终端二：启动 crystal 的 sidekiq server</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ <span class="nb">cd</span> crystal
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">$ ./crystal_server -q crystal
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">         m,
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">         <span class="sb">`</span><span class="nv">$b</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    .ss,  <span class="nv">$$</span>:         .,d$
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="sb">`</span><span class="nv">$$</span>P,d<span class="nv">$P</span><span class="s1">&#39;    .,md$P&#34;&#39;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">     ,<span class="nv">$$$$$bmmd$$$P</span>^<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="s1">   .d$$$$$$$$$$P&#39;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">   <span class="nv">$$</span>^<span class="s1">&#39; `&#34;^$$$&#39;</span>       ____  _     _      _    _
</span></span><span class="line"><span class="ln">11</span><span class="cl">   $:     ,<span class="nv">$$</span>:       / ___<span class="p">|</span><span class="o">(</span>_<span class="o">)</span> __<span class="p">|</span> <span class="p">|</span> ___<span class="p">|</span> <span class="p">|</span> _<span class="o">(</span>_<span class="o">)</span> __ _
</span></span><span class="line"><span class="ln">12</span><span class="cl">   <span class="sb">`</span>b     :<span class="nv">$$</span>        <span class="se">\_</span>__ <span class="se">\|</span> <span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span>/ _ <span class="se">\ </span><span class="p">|</span>/ / <span class="p">|</span>/ _<span class="sb">`</span> <span class="p">|</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">          <span class="nv">$$</span>:         ___<span class="o">)</span> <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span>  __/   &lt;<span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="p">|</span> <span class="p">|</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">          <span class="nv">$$</span>         <span class="p">|</span>____/<span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>_,_<span class="p">|</span><span class="se">\_</span>__<span class="p">|</span>_<span class="p">|</span><span class="se">\_\_</span><span class="p">|</span><span class="se">\_</span>_, <span class="p">|</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        .d<span class="nv">$$</span>                                       <span class="p">|</span>_<span class="p">|</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">2017-04-26T06:48:42.755Z <span class="m">83552</span> TID-21ybwjk  INFO: Sidekiq v0.7.0 in Crystal 0.22.0
</span></span><span class="line"><span class="ln">18</span><span class="cl">2017-04-26T06:48:42.755Z <span class="m">83552</span> TID-21ybwjk  INFO: Licensed <span class="k">for</span> use under the terms of the GNU LGPL-3.0 license.
</span></span><span class="line"><span class="ln">19</span><span class="cl">2017-04-26T06:48:42.755Z <span class="m">83552</span> TID-21ybwjk  INFO: Upgrade to Sidekiq Enterprise <span class="k">for</span> more features and support: http://sidekiq.org
</span></span><span class="line"><span class="ln">20</span><span class="cl">2017-04-26T06:48:42.755Z <span class="m">83552</span> TID-21ybwjk  INFO: Starting processing with <span class="m">25</span> workers
</span></span><span class="line"><span class="ln">21</span><span class="cl">2017-04-26T06:48:42.756Z <span class="m">83552</span> TID-21ybwjk  INFO: Press Ctrl-C to stop
</span></span></code></pre></div><h2 id="验证功力效果">验证功力效果</h2>
<p>两边的 sidekiq server 都已经跑起来了，我们先从 rails 启动 console 验证，注意留意两个 sidekiq 终端日志的输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ rails console
</span></span><span class="line"><span class="ln">2</span><span class="cl">Loading development environment <span class="o">(</span>Rails 5.0.2<span class="o">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"># 调用 rails 本身的 ping1 和 ping2 worker</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">2.4.0 :001 &gt; Sidekiq::Client.push<span class="o">(</span><span class="s1">&#39;class&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;Ping1Worker&#39;</span>, <span class="s1">&#39;args&#39;</span> <span class="o">=</span>&gt;<span class="o">[])</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"> <span class="o">=</span>&gt; <span class="s2">&#34;961500753aa127b73ac50851&#34;</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">2.4.0 :002 &gt; Sidekiq::Client.push<span class="o">(</span><span class="s1">&#39;class&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;Ping2Worker&#39;</span>, <span class="s1">&#39;args&#39;</span> <span class="o">=</span>&gt;<span class="o">[])</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"> <span class="o">=</span>&gt; <span class="s2">&#34;be366d2e5f44adf367853d82&#34;</span>
</span></span></code></pre></div><p>对应 rails 的 sidekiq server 会同时输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">2017-04-26T06:53:01.722Z <span class="m">76282</span> TID-owex58ag8 Ping1Worker JID-961500753aa127b73ac50851 INFO: start
</span></span><span class="line"><span class="ln">2</span><span class="cl">2017-04-26T06:53:01.722Z <span class="m">76282</span> TID-owex58ag8 Ping1Worker JID-961500753aa127b73ac50851 INFO: <span class="o">[</span>Ruby<span class="o">]</span> PONG !
</span></span><span class="line"><span class="ln">3</span><span class="cl">2017-04-26T06:53:01.722Z <span class="m">76282</span> TID-owex58ag8 Ping1Worker JID-961500753aa127b73ac50851 INFO: <span class="k">done</span>: 0.0 sec
</span></span><span class="line"><span class="ln">4</span><span class="cl">2017-04-26T06:53:52.681Z <span class="m">76282</span> TID-owex58bs0 Ping2Worker JID-be366d2e5f44adf367853d82 INFO: start
</span></span><span class="line"><span class="ln">5</span><span class="cl">2017-04-26T06:53:52.681Z <span class="m">76282</span> TID-owex58bs0 Ping2Worker JID-be366d2e5f44adf367853d82 INFO: <span class="o">[</span>Ruby<span class="o">]</span> PONG PONG !!
</span></span><span class="line"><span class="ln">6</span><span class="cl">2017-04-26T06:53:52.681Z <span class="m">76282</span> TID-owex58bs0 Ping2Worker JID-be366d2e5f44adf367853d82 INFO: <span class="k">done</span>: 0.0 sec
</span></span></code></pre></div><p>自身一脉本来就是通的没什么好稀奇的，验证另外一脉：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ rails console
</span></span><span class="line"><span class="ln">2</span><span class="cl">Loading development environment <span class="o">(</span>Rails 5.0.2<span class="o">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"># 调用 crystal 的 ping1 和 ping2 worker</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">2.4.0 :001 &gt; Sidekiq::Client.push<span class="o">(</span><span class="s1">&#39;class&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;Ping1Worker&#39;</span>, <span class="s1">&#39;args&#39;</span> <span class="o">=</span>&gt;<span class="o">[]</span>, <span class="s1">&#39;queue&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;crystal&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"> <span class="o">=</span>&gt; <span class="s2">&#34;324cf5e07b5e2999b0a45565&#34;</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">2.4.0 :002 &gt; Sidekiq::Client.push<span class="o">(</span><span class="s1">&#39;class&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;Ping2Worker&#39;</span>, <span class="s1">&#39;args&#39;</span> <span class="o">=</span>&gt;<span class="o">[]</span>, <span class="s1">&#39;queue&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;crystal&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"> <span class="o">=</span>&gt; <span class="s2">&#34;06c60bb9d52d9a31d48d2fdc&#34;</span>
</span></span></code></pre></div><p>看看 crystal 的 sidekiq server 的日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">2017-04-26T06:57:11.846Z <span class="m">21253</span> TID-1z8q4cg  <span class="nv">JID</span><span class="o">=</span>324cf5e07b5e2999b0a45565 INFO: Start
</span></span><span class="line"><span class="ln">2</span><span class="cl">2017-04-26T06:57:11.846Z <span class="m">21253</span> TID-1z8q4cg  <span class="nv">JID</span><span class="o">=</span>324cf5e07b5e2999b0a45565 INFO: <span class="o">[</span>Crystal<span class="o">]</span> PONG !
</span></span><span class="line"><span class="ln">3</span><span class="cl">2017-04-26T06:57:11.846Z <span class="m">21253</span> TID-1z8q4cg  <span class="nv">JID</span><span class="o">=</span>324cf5e07b5e2999b0a45565 INFO: Done: 0.000046 sec
</span></span><span class="line"><span class="ln">4</span><span class="cl">2017-04-26T06:57:20.785Z <span class="m">21253</span> TID-1z8q3y8  <span class="nv">JID</span><span class="o">=</span>06c60bb9d52d9a31d48d2fdc INFO: Start
</span></span><span class="line"><span class="ln">5</span><span class="cl">2017-04-26T06:57:20.785Z <span class="m">21253</span> TID-1z8q3y8  <span class="nv">JID</span><span class="o">=</span>06c60bb9d52d9a31d48d2fdc INFO: <span class="o">[</span>Crystal<span class="o">]</span> PONG PONG !!
</span></span><span class="line"><span class="ln">6</span><span class="cl">2017-04-26T06:57:20.785Z <span class="m">21253</span> TID-1z8q3y8  <span class="nv">JID</span><span class="o">=</span>06c60bb9d52d9a31d48d2fdc INFO: Done: 0.000049 sec
</span></span></code></pre></div><p>验证通过！打通了！</p>
<p>Crystal 这边向 Ruby 调用也可行，但只有通过如下代码，有个别时候自身调用也没有日志输出，不过在 Web UI 却发现已处理的数字已正常更新，该问题我再调查下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-crystal" data-lang="crystal"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">require</span> <span class="s2">&#34;sidekiq&#34;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;LOCAL_REDIS&#34;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&#34;redis://localhost:6379/8&#34;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;REDIS_PROVIDER&#34;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&#34;LOCAL_REDIS&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="n">workers</span> <span class="o">=</span> <span class="sx">%w(Ping1Worker Ping2Worker)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="n">workers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">wk_class</span><span class="o">|</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="n">job</span> <span class="o">=</span> <span class="n">Sidekiq</span><span class="o">::</span><span class="n">Job</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="n">job</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="s2">&#34;default&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="n">job</span><span class="o">.</span><span class="n">klass</span> <span class="o">=</span> <span class="n">wk_class</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="n">Sidekiq</span><span class="o">::</span><span class="n">Client</span><span class="o">.</span><span class="n">default_context</span> <span class="o">=</span> <span class="n">Sidekiq</span><span class="o">::</span><span class="n">Client</span><span class="o">::</span><span class="n">Context</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="n">client</span> <span class="o">=</span> <span class="n">Sidekiq</span><span class="o">::</span><span class="n">Client</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="n">job_id</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="nb">puts</span> <span class="s2">&#34;[</span><span class="si">#{</span><span class="n">wk_class</span><span class="si">}</span><span class="s2">] job id: </span><span class="si">#{</span><span class="n">job_id</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">2017-04-26T07:20:58.754Z <span class="m">62256</span> TID-oukzi7jck Ping1Worker JID-1fee81b35052cba1f6525de5 INFO: start
</span></span><span class="line"><span class="ln">2</span><span class="cl">2017-04-26T07:20:58.754Z <span class="m">62256</span> TID-oukzi7jck Ping1Worker JID-1fee81b35052cba1f6525de5 INFO: <span class="o">[</span>Ruby<span class="o">]</span> PONG !
</span></span><span class="line"><span class="ln">3</span><span class="cl">2017-04-26T07:20:58.755Z <span class="m">62256</span> TID-oukzi7jck Ping1Worker JID-1fee81b35052cba1f6525de5 INFO: <span class="k">done</span>: 0.0 sec
</span></span><span class="line"><span class="ln">4</span><span class="cl">2017-04-26T07:20:58.756Z <span class="m">62256</span> TID-oul02vzfw Ping2Worker JID-0bb7eef097447784fb48d943 INFO: start
</span></span><span class="line"><span class="ln">5</span><span class="cl">2017-04-26T07:20:58.756Z <span class="m">62256</span> TID-oul02vzfw Ping2Worker JID-0bb7eef097447784fb48d943 INFO: <span class="o">[</span>Ruby<span class="o">]</span> PONG PONG !!
</span></span><span class="line"><span class="ln">6</span><span class="cl">2017-04-26T07:20:58.756Z <span class="m">62256</span> TID-oul02vzfw Ping2Worker JID-0bb7eef097447784fb48d943 INFO: <span class="k">done</span>: 0.0 sec
</span></span></code></pre></div><h2 id="结语">结语</h2>
<p>本篇只是通过一个最简单的例子让大家知道互通的方法，实际使用中对于数据交互等还有更多需要考虑的地方，这里就暂时不做展开。非常期待 Crystal 今年立的 <a href="https://crystal-lang.org/2016/12/29/crystal-new-year-resolutions-for-2017-1-0.html">1.0 的目标</a>。</p>
<p>对于 Crystal 语言本身的评价，大家也可看下 RubyChina 站长的心得<a href="https://ruby-china.org/topics/32771">Crystal 说我最近关注 Crystal 的感受</a>，编译语言有编译语言的坑，入坑需谨慎。</p>
<p>本文演示的代码已经整理并放到了 <a href="https://github.com/icyleaf/sidekiq-with-ruby-and-crystal">Github</a>，对于不明白的地方可配合代码更好服用。</p>
]]></content:encoded></item><item><title>你虐我千百遍，我待你如初恋，直到我遇到 match</title><link>https://icyleaf.com/2017/03/fastlane-match-in-action/</link><pubDate>Tue, 28 Mar 2017 20:12:07 +0800</pubDate><guid>https://icyleaf.com/2017/03/fastlane-match-in-action/</guid><description>
系列文章的第三篇，教你如何使用 match 管理名词都分不清的苹果各自开发者证书</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>通过前两篇的文章大家已经对 fastlane 的概念和基本使用已经有了初步的掌握，在第二篇中也有提到 fastlane 实现的各种功能其实都是基于独立封装设计的各个工具实现。它们即可以单独成为一个体系同时也会被吸纳到 fastlane 的 action 系统之中。<code>match</code> 是在 iOS 开发和持续测试和构建中最重中之重的环节，它维护和管理着 iOS 的各种证书和 profile 的创建、更新工作。想必很多用户听到 iOS 证书和 profile 都会头大脑涨，恨不得要手撕鬼子的技能点来对付他们（如图）</p>
<p><img src="https://codesigning.guide/assets/img/cs-the-problem.png"
  
  
  alt="code-signing-problem"></img>
</p>
<p>上图来源于作者专门整理的网站 <a href="https://codesigning.guide/">https://codesigning.guide/</a>，对于 iOS App 签名原理感兴趣的可以参见 JSPatch 作者的分析：http://blog.cnbang.net/tech/3386/</p>
<h2 id="功能特性">功能特性</h2>
<ol>
<li>主动/被动创建、更新、Xcode 所需的各种证书和打包所需的 Profiles</li>
<li>托管 Xcode 所需的各种证书和打包所需的 Profiles</li>
<li>统一并共享团队成员统一使用</li>
<li>证书具有密码加密保护（openssl）</li>
<li>支持多团队（账户）</li>
<li>支持单 App 多 Target(identifier)</li>
<li>内测支持企业账户（v0.11.0 还在测试可用，并没有正式支持）</li>
</ol>
<h2 id="原理">原理</h2>
<p>match 其实是在 fastlane 基础包 cert、sign、spaceship、credentials_manager 之上把 iOS 开发者证书流程化的工具。为了实现团队内共享项目的开发者证书，它使用 git 仓库对证书进行托管，首先需要进行初始化，配置 git 仓库、项目的 iDP 信息之后，下载 Development、AppStore、AdHoc 的开发者证书和项目的 Profile files，并通过 openssl 的方式进行安全加密后提交并推送到 git 仓库，其他成员（或自动化构建系统）使用时需要输入密钥后才能把证书解密并导入到 keychain 和 Profiles 目录。</p>
<p>如果对于证书加密策略感兴趣的可以在本文底部资料参考的第一个链接查看详情。</p>
<h2 id="使用">使用</h2>
<blockquote>
<p>最新 fastlane 已经包含了所有的子模块，独立的 match 不在更新，请直接安装 fastlane，使用 fastlane match 代替 match 命令。</p>
</blockquote>
<p>安装就很简单通过 <code>gem install fastlane</code> 会把它的全家桶一并下载安装，首先可以看下帮助：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ fastlane match --help
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  match
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  Easily sync your certificates and profiles across your team using git
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  Commands:
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    adhoc             Run match <span class="k">for</span> a adhoc provisioning profile
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    appstore          Run match <span class="k">for</span> a appstore provisioning profile
</span></span><span class="line"><span class="ln">10</span><span class="cl">    change_password   Re-encrypt all files with a different password
</span></span><span class="line"><span class="ln">11</span><span class="cl">    decrypt           Decrypts the repository and keeps it on the filesystem
</span></span><span class="line"><span class="ln">12</span><span class="cl">    development       Run match <span class="k">for</span> a development provisioning profile
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nb">help</span>              Display global or <span class="o">[</span>command<span class="o">]</span> <span class="nb">help</span> documentation
</span></span><span class="line"><span class="ln">14</span><span class="cl">    init              Create the Matchfile <span class="k">for</span> you
</span></span><span class="line"><span class="ln">15</span><span class="cl">    nuke              Delete all certificates and provisioning profiles from the Apple Dev Portal
</span></span><span class="line"><span class="ln">16</span><span class="cl">    nuke development  Delete all certificates and provisioning profiles from the Apple Dev Portal of the <span class="nb">type</span> development
</span></span><span class="line"><span class="ln">17</span><span class="cl">    nuke distribution Delete all certificates and provisioning profiles from the Apple Dev Portal of the <span class="nb">type</span> distribution
</span></span><span class="line"><span class="ln">18</span><span class="cl">    run               Easily sync your certificates and profiles across your team using git
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">  Global Options:
</span></span><span class="line"><span class="ln">21</span><span class="cl">    --verbose
</span></span><span class="line"><span class="ln">22</span><span class="cl">    -r, --git_url STRING URL to the git repo containing all the certificates <span class="o">(</span>MATCH_GIT_URL<span class="o">)</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    --git_branch STRING  Specific git branch to use <span class="o">(</span>MATCH_GIT_BRANCH<span class="o">)</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">    -y, --type STRING    Create a development certificate instead of a distribution one <span class="o">(</span>MATCH_TYPE<span class="o">)</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    -a, --app_identifier <span class="o">[</span>VALUE<span class="o">]</span> The bundle identifier<span class="o">(</span>s<span class="o">)</span> of your app <span class="o">(</span>comma-separated<span class="o">)</span> <span class="o">(</span>MATCH_APP_IDENTIFIER<span class="o">)</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    -u, --username STRING Your Apple ID Username <span class="o">(</span>MATCH_USERNAME<span class="o">)</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">    -s, --keychain_name STRING Keychain the items should be imported to <span class="o">(</span>MATCH_KEYCHAIN_NAME<span class="o">)</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">    -p, --keychain_password STRING This might be required the first <span class="nb">time</span> you access certificates on a new mac. For the login/default keychain this is your account password <span class="o">(</span>MATCH_KEYCHAIN_PASSWORD<span class="o">)</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">    --readonly <span class="o">[</span>VALUE<span class="o">]</span>   Only fetch existing certificates and profiles, don<span class="s1">&#39;t generate new ones (MATCH_READONLY)
</span></span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="s1">    -b, --team_id STRING The ID of your Developer Portal team if you&#39;</span>re in multiple teams <span class="o">(</span>FASTLANE_TEAM_ID<span class="o">)</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">    -l, --team_name STRING The name of your Developer Portal team <span class="k">if</span> you<span class="err">&#39;</span>re in multiple teams <span class="o">(</span>FASTLANE_TEAM_NAME<span class="o">)</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">    --verbose <span class="o">[</span>VALUE<span class="o">]</span>    Print out extra information and all commands <span class="o">(</span>MATCH_VERBOSE<span class="o">)</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">    --force <span class="o">[</span>VALUE<span class="o">]</span>      Renew the provisioning profiles every <span class="nb">time</span> you run match <span class="o">(</span>MATCH_FORCE<span class="o">)</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">    --skip_confirmation <span class="o">[</span>VALUE<span class="o">]</span> Disables confirmation prompts during nuke, answering them with yes <span class="o">(</span>MATCH_SKIP_CONFIRMATION<span class="o">)</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">    --shallow_clone <span class="o">[</span>VALUE<span class="o">]</span> Make a shallow clone of the repository <span class="o">(</span>truncate the <span class="nb">history</span> to <span class="m">1</span> revision<span class="o">)</span> <span class="o">(</span>MATCH_SHALLOW_CLONE<span class="o">)</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">    --force_for_new_devices <span class="o">[</span>VALUE<span class="o">]</span> Renew the provisioning profiles <span class="k">if</span> the device count on the developer portal has changed <span class="o">(</span>MATCH_FORCE_FOR_NEW_DEVICES<span class="o">)</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">    --skip_docs <span class="o">[</span>VALUE<span class="o">]</span>  Skip generation of a README.md <span class="k">for</span> the created git repository <span class="o">(</span>MATCH_SKIP_DOCS<span class="o">)</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    -h, --help           Display <span class="nb">help</span> documentation
</span></span><span class="line"><span class="ln">39</span><span class="cl">    -v, --version        Display version information
</span></span></code></pre></div><p>建议大家在项目中创建并配置 <code>fastlane/Matchfile</code> 文件可以把命令需要的参数省略：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ fastlane match init
</span></span></code></pre></div><p>设置好 git_url(git 仓库地址）、type（默认同步证书类型）、app_identifier、username（iDP 的账户名）即可。</p>
<h2 id="生成和同步证书">生成和同步证书</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 开发环境证书</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ fastlane match development
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"># 产品环境证书</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">$ fastlane match appstore
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"># 内测环境证书</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">$ fastlane match adhoc
</span></span></code></pre></div><p>初次使用的时候会提示需要输入 iDP 的账户密码，校验成功后可以保存到 keychain 中后续可以不在重复输入（好贴心）密码（也可通过设置变量 FASTLANE_PASSWORD），该密码就是上面提到的证书加密的密钥，请妥善保存。</p>
<blockquote>
<p>提示：如果担心密码泄露可设置 FASTLANE_DONT_STORE_PASSWORD = true 不进行密码保存至 keychain，在 keychain 可通过关键词 &ldquo;deliver.&rdquo; 检索。</p>
</blockquote>
<p>有的童鞋说我们有 299 的企业证书，为什么不做支持呢？起初作者并没有打算进行支持是担心滥用以及代码结构需要较大的变更，随着开发者呼声太高，其实还是做了支持，只不过并没有正式的纳入，需要通过配置环境变量支持：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 企业环境证书</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ ENV<span class="o">[</span><span class="s1">&#39;MATCH_FORCE_ENTERPRISE&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span> <span class="o">&amp;&amp;</span> fastlane match enterprise
</span></span></code></pre></div><h2 id="修改密钥">修改密钥</h2>
<p>建议密码定期更换或再人员发生变更之后进行密码变更：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ fastlane match change_password
</span></span></code></pre></div><h2 id="重新生成">重新生成</h2>
<p><strong>慎用</strong>：match 提供一个命令允许把当前的证书撤销后并全新的重新生成一份，这个事项是会把证书和 Profiles 全部包含在内，如果单纯的想只重设 Profles 并同步是不支持的。我想这也是为什么该命名叫做 <code>nuke</code></p>
<p>我这里可给大家提供一种只同步 profile 的方法：首先在 git 仓库中找到你要重设的 profile 文件，并把它从仓库中删除提交，然后在执行该类型的命令即可，命令发现没有 profile 会自动再生成一个 profile 并下载同步至 git 仓库。</p>
<h2 id="资料参考">资料参考</h2>
<ul>
<li><a href="http://macoscope.com/blog/simplify-your-life-with-fastlane-match/">http://macoscope.com/blog/simplify-your-life-with-fastlane-match/</a></li>
<li><a href="https://github.com/fastlane/fastlane/issues/2007">https://github.com/fastlane/fastlane/issues/2007</a></li>
</ul>
]]></content:encoded></item><item><title>深入浅出 Fastlane 一看你就懂</title><link>https://icyleaf.com/2016/07/fastlane-in-action/</link><pubDate>Tue, 19 Jul 2016 20:12:07 +0800</pubDate><guid>https://icyleaf.com/2016/07/fastlane-in-action/</guid><description>
系列文章的第二篇，带你了解 fastlane 使用流程</description><content:encoded><![CDATA[<p>本篇我想着重介绍 <code>fastlane</code> 本身的基本使用，这里使用 fastlane v1.98.0 作为演示版本。</p>
<h2 id="命令行工具">命令行工具</h2>
<p>安装之后默认会安装一个命令行工具 <code>fastlane</code>，利用它可以初始化、执行任务、查看任务定义、查看可用的动作和动作的详细定义，甚至可以用它来创建自定义的动作、插件以及一些辅助功能。想了解的话可以先看看它的帮助：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ fastlane --help
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  fastlane
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  CLI <span class="k">for</span> <span class="s1">&#39;fastlane&#39;</span> - The easiest way to automate building and releasing your iOS and Android apps
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        Run using <span class="sb">`</span>fastlane <span class="o">[</span>platform<span class="o">]</span> <span class="o">[</span>lane_name<span class="o">]</span><span class="sb">`</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        To pass values to the lanes use <span class="sb">`</span>fastlane <span class="o">[</span>platform<span class="o">]</span> <span class="o">[</span>lane_name<span class="o">]</span> key:value key2:value2<span class="sb">`</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">  Commands:
</span></span><span class="line"><span class="ln">11</span><span class="cl">    action                  Shows more information <span class="k">for</span> a specific <span class="nb">command</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    actions                 Lists all available fastlane actions
</span></span><span class="line"><span class="ln">13</span><span class="cl">    add_plugin              Add a new plugin to your fastlane setup
</span></span><span class="line"><span class="ln">14</span><span class="cl">    disable_crash_reporting Deprecated: fastlane doesn<span class="s1">&#39;t use a crash reporter any more
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s1">    docs                    Generate a markdown based documentation based on the Fastfile
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s1">    enable_auto_complete    Enable tab auto completion
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s1">    enable_crash_reporting  Deprecated: fastlane doesn&#39;</span>t use a crash reporter any more
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="nb">help</span>                    Display global or <span class="o">[</span>command<span class="o">]</span> <span class="nb">help</span> documentation
</span></span><span class="line"><span class="ln">19</span><span class="cl">    init                    Helps you with your initial fastlane setup
</span></span><span class="line"><span class="ln">20</span><span class="cl">    install_plugins         Install all plugins <span class="k">for</span> this project
</span></span><span class="line"><span class="ln">21</span><span class="cl">    lanes                   Lists all available lanes and shows their description
</span></span><span class="line"><span class="ln">22</span><span class="cl">    list                    Lists all available lanes without description
</span></span><span class="line"><span class="ln">23</span><span class="cl">    new_action              Create a new custom action <span class="k">for</span> fastlane.
</span></span><span class="line"><span class="ln">24</span><span class="cl">    new_plugin              Create a new plugin that can be used with fastlane
</span></span><span class="line"><span class="ln">25</span><span class="cl">    run                     Run a fastlane one-off action without a full lane
</span></span><span class="line"><span class="ln">26</span><span class="cl">    search_plugins          Search <span class="k">for</span> plugins, search query is optional
</span></span><span class="line"><span class="ln">27</span><span class="cl">    trigger                 Run a sepcific lane. Pass the lane name and optionally the platform first.
</span></span><span class="line"><span class="ln">28</span><span class="cl">    update_plugins          Update all plugin dependencies
</span></span><span class="line"><span class="ln">29</span><span class="cl">
</span></span><span class="line"><span class="ln">30</span><span class="cl">  Global Options:
</span></span><span class="line"><span class="ln">31</span><span class="cl">    --verbose
</span></span><span class="line"><span class="ln">32</span><span class="cl">    -h, --help           Display <span class="nb">help</span> documentation
</span></span><span class="line"><span class="ln">33</span><span class="cl">    -v, --version        Display version information
</span></span><span class="line"><span class="ln">34</span><span class="cl">
</span></span><span class="line"><span class="ln">35</span><span class="cl">  Author:
</span></span><span class="line"><span class="ln">36</span><span class="cl">    Felix Krause &lt;fastlane@krausefx.com&gt;
</span></span><span class="line"><span class="ln">37</span><span class="cl">
</span></span><span class="line"><span class="ln">38</span><span class="cl">  Website:
</span></span><span class="line"><span class="ln">39</span><span class="cl">    https://fastlane.tools
</span></span><span class="line"><span class="ln">40</span><span class="cl">
</span></span><span class="line"><span class="ln">41</span><span class="cl">  GitHub:
</span></span><span class="line"><span class="ln">42</span><span class="cl">    https://github.com/fastlane/fastlane
</span></span></code></pre></div><p>我会随着下面每个概念的解释和展开来配合上面的命令一起讲解。</p>
<h2 id="生命周期">生命周期</h2>
<table>
<thead>
<tr>
<th>执行顺序</th>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>before_all</td>
<td>在执行 lane 之前只执行一次</td>
</tr>
<tr>
<td>2</td>
<td>before_each</td>
<td>每次执行 lane 之前都会执行一次</td>
</tr>
<tr>
<td>3</td>
<td>lane</td>
<td>自定义的任务</td>
</tr>
<tr>
<td>4</td>
<td>after_each</td>
<td>每次执行 lane 之后都会执行一次</td>
</tr>
<tr>
<td>5</td>
<td>after_all</td>
<td>在执行 lane 成功结束之后执行一次</td>
</tr>
<tr>
<td>6</td>
<td>error</td>
<td>在执行上述情况任意环境报错都会中止并执行一次</td>
</tr>
</tbody>
</table>
<p>以上的部分大家在上一篇已经见识过了，有些还没接触到，不用着急都会一一说明。</p>
<h2 id="任务lane">任务（lane）</h2>
<p>正常情况下你可能只会是用到一种任务方法 <code>lane</code> 但其实它会包含很多中高级用法。在文章的末尾会详细描述。</p>
<h3 id="任务定义">任务定义</h3>
<p>定义任务的方法类似于 rake 的 task，但使用上缺比前者要好用很多，见下表：</p>
<table>
<thead>
<tr>
<th>定义</th>
<th>是否必须</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>desc</td>
<td><code>false</code></td>
<td>方法描述</td>
<td>可多次使用打到换行的目的</td>
</tr>
<tr>
<td>name</td>
<td><code>true</code></td>
<td>方法名</td>
<td>符号化的方法名</td>
</tr>
<tr>
<td>options</td>
<td><code>false</code></td>
<td>方法参数</td>
<td>返回 Hash 类型</td>
</tr>
<tr>
<td>task</td>
<td><code>true</code></td>
<td>方法主体</td>
<td>参考 ruby 的方法代码且支持 ruby 代码</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">desc</span> <span class="s1">&#39;定义一个 build 方法&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">desc</span> <span class="s1">&#39;参数 adhoc 判断是否为内测版本, 默认为 false&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="n">desc</span> <span class="s1">&#39;fastlane build&#39;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">desc</span> <span class="s1">&#39;fastlane build adhoc:true&#39;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">lane</span> <span class="ss">:build</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="c1"># task to do something</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="n">adhoc</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:adhoc</span><span class="o">]</span> <span class="o">||</span> <span class="kp">false</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="nb">puts</span> <span class="s2">&#34;adhoc: </span><span class="si">#{</span><span class="n">adhoc</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="n">gym</span><span class="p">(</span><span class="ss">type</span><span class="p">:</span> <span class="n">adhoc</span> <span class="p">?</span> <span class="s1">&#39;adhoc&#39;</span> <span class="p">:</span> <span class="s1">&#39;appstore&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="任务执行">任务执行</h3>
<p>一般情况下它需要配合定义好的 lane 才能使用，刚刚我们定义的一个 build 方法，我们这里就试着执行一下吧。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 默认执行</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ fastlane build
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"># 传递参数</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">$ fastlane build adhoc:true
</span></span></code></pre></div><h3 id="任务互调">任务互调</h3>
<p><code>lane</code> 其实可以理解为 <code>def</code> 的别名，因此多个 lane 的话实际上是可以相互调用的，这个其实特别实用，这样其实我就可以把 cocoapods 的执行放到单独的 lane 里面而不是 <code>before_all</code>，这样执行非构建的任务就不会执行不相关的任务或动作，因此 fastlane 而产生了一个私有任务用内部使用 <code>private_lane</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl">
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">default_platform</span> <span class="ss">:ios</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">platform</span> <span class="ss">:ios</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;构建前的准备工作&#39;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;这是一个私有任务，仅供 Fastfile 内部 lane 调用使用&#39;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="n">lane</span> <span class="ss">:prepare</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">cocoapods</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="n">match</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;通用的构建任务&#39;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;fastlane build&#39;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;fastlane build type:adhoc&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="n">lane</span> <span class="ss">:build</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="c1"># 调用上面 prepare 私有任务</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="n">prepare</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="k">case</span> <span class="n">options</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="k">when</span> <span class="s1">&#39;adhoc&#39;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">      <span class="c1"># 调用 下面 adhoc 任务</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">      <span class="n">adhoc</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">      <span class="c1"># 调用下面 appstore 任务</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">      <span class="n">appstore</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;构建 adhoc 任务&#39;</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;fastlane adhoc&#39;</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">  <span class="n">lane</span> <span class="ss">:adhoc</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">    <span class="n">gym</span><span class="p">(</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;adhoc&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">
</span></span><span class="line"><span class="ln">35</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;构建 appstore 任务&#39;</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">  <span class="n">desc</span> <span class="s1">&#39;fastlane appstore&#39;</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">  <span class="n">lane</span> <span class="ss">:appstore</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="n">gym</span><span class="p">(</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;appstore&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>上面的任务中，<code>build</code>/<code>adhoc</code>/<code>appstore</code> 都可以执行，只有 <code>prepare</code> 是无法通过命令行外部执行，如果执行会直接报错：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ fastlane prepare
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="o">[</span>19:17:42<span class="o">]</span>: You can<span class="s1">&#39;t call the private lane &#39;</span>prepare<span class="err">&#39;</span> directly
</span></span></code></pre></div><h3 id="任务返回值">任务返回值</h3>
<p>和 ruby 的方法一致，每个 lane 最后一行会默认作为返回值（无需 <a href="http://learnrubythehardway.org/book/ex21.html">return</a>）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl">
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">lane</span> <span class="ss">:sum</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="n">options</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="o">+</span> <span class="n">optiona</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="n">lane</span> <span class="ss">:calculate</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">  <span class="n">value</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">  <span class="nb">puts</span> <span class="n">value</span> <span class="c1">#=&gt; 8</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="引入外部任务文件">引入外部任务文件</h3>
<p><code>Fastfile</code> 除了自身以外还能够引入外部其他的 <code>Fastfile</code> 并调用任务，只需要导入外部文件并使用特殊的方法标识即可：</p>
<h4 id="1-import---导入本地文件">1. import - 导入本地文件</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 导入 lanes 目录的 AndroidFastfile</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">import</span> <span class="s2">&#34;lanes/AndroidFastfile&#34;</span>
</span></span></code></pre></div><h4 id="2-import_from_git---导入-git-仓库文件">2. import_from_git - 导入 git 仓库文件</h4>
<p>可以直接引入 git 仓库的 Fastfile 文件是一个非常赞的功能，通过使用发现其实现原理是先把 git 仓库克隆下来后在引入相对于的文件，因此建议国内在没有网络加速（翻墙）的情况下尽量不用引入比较大的 git 仓库，否则使用会需要漫长的等待&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 导入 mozilla/firefox-ios 项目下 fastlane 下面 Fastfile 文件</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">import_from_git</span><span class="p">(</span><span class="ss">url</span><span class="p">:</span> <span class="s1">&#39;https://github.com/mozilla/firefox-ios&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"># 或者</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">import_from_git</span><span class="p">(</span><span class="ss">url</span><span class="p">:</span> <span class="s1">&#39;git@github.com:mozilla/firefox-ios.git&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">               <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;fastlane/Fastfile&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>假若外部引入的 <code>Fastfile</code> 有个方法是 <strong>build</strong>，在命令行工具直接执行即可，如果外部和内部都有相同的任务名，执行会直接报错：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ fastlane ios build
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="o">[</span>!<span class="o">]</span> Lane <span class="s1">&#39;gradle&#39;</span> was defined multiple times!
</span></span></code></pre></div><p>如果发生这样的事情且你希望在主体 <code>Fastfile</code> 也调用的话需要使用特殊的方法定义：<code>override_lane</code></p>
<blockquote>
<p>注意：此方法只会覆盖外部的相同方法名的代码执行，目前暂时无法使用类似 ruby 的 <code>super</code> 继承原由方法！</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">override_lane</span> <span class="ss">:build</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="任务查看">任务查看</h3>
<p>只需执行下面这行命令就可以看到非私有任务的可用列表信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ fastlane lanes
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">--------- ios---------
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">----- fastlane ios build
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">通用的构建任务
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">fastlane build
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">fastlane build type:adhoc
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">----- fastlane ios adhoc
</span></span><span class="line"><span class="ln">10</span><span class="cl">构建 adhoc 任务
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">----- fastlane ios appstore
</span></span><span class="line"><span class="ln">13</span><span class="cl">构建 appstore 任务
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">Execute using <span class="sb">`</span>fastlane <span class="o">[</span>lane_name<span class="o">]</span><span class="sb">`</span>
</span></span></code></pre></div><h2 id="扩展action">扩展（Action）</h2>
<p>扩展是 fastlane 的杀手锏，重在集成了众多非常优秀好用的方法供 lane 内部使用，截至 fastlane v<code>1.98.0</code> 版本以包含 175 个扩展，这个数量还在陆续增加中。扩展初期是由发起人一个人完成，后续的大部分都是社区共享，如果你发现没有你想要的扩展，可以先去 <a href="https://github.com/fastlane/fastlane/issues?q=is%3Aopen+is%3Aissue+label%3Aaction">issues</a> 搜索下没有要么自己动手提交要么只有等待了.</p>
<h3 id="扩展列表">扩展列表</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ fastlane actions
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">+--------------------+-------------------------------------------------------------+------------------+
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="p">|</span>                                   Available fastlane actions                                        <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">+--------------------+-------------------------------------------------------------+------------------+
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">|</span> Action             <span class="p">|</span> Description                                                 <span class="p">|</span> Author           <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">+--------------------+-------------------------------------------------------------+------------------+
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">|</span> adb                <span class="p">|</span> Run ADB Actions                                             <span class="p">|</span> hjanuschka       <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="p">|</span> adb_devices        <span class="p">|</span> Get an Array of Connected android device serials            <span class="p">|</span> hjanuschka       <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="p">|</span> add_git_tag        <span class="p">|</span> This will add an annotated git tag to the current branch    <span class="p">|</span> Multiple         <span class="p">|</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">...
</span></span><span class="line"><span class="ln">11</span><span class="cl">+--------------------+-------------------------------------------------------------+------------------+
</span></span><span class="line"><span class="ln">12</span><span class="cl">  Total of <span class="m">175</span> actions
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">Get more information <span class="k">for</span> one specific action using <span class="sb">`</span>fastlane action <span class="o">[</span>name<span class="o">]</span><span class="sb">`</span>
</span></span></code></pre></div><h3 id="扩展使用帮助">扩展使用帮助</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># 查看 adb 扩展的使用帮助</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">$ fastlane action adb
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">Loading documentation <span class="k">for</span> adb:
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">+---------------------------------+
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">|</span>               adb               <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">+---------------------------------+
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="p">|</span> Run ADB Actions                 <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="p">|</span>                                 <span class="p">|</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">|</span> see adb --help <span class="k">for</span> more details <span class="p">|</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">|</span>                                 <span class="p">|</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">|</span> Created by hjanuschka           <span class="p">|</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">+---------------------------------+
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">+----------+----------------------------------------------------------------------+-------------------+---------+
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="p">|</span>                                                  adb Options                                                  <span class="p">|</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">+----------+----------------------------------------------------------------------+-------------------+---------+
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="p">|</span> Key      <span class="p">|</span> Description                                                          <span class="p">|</span> Env Var           <span class="p">|</span> Default <span class="p">|</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">+----------+----------------------------------------------------------------------+-------------------+---------+
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">|</span> serial   <span class="p">|</span> Android serial, which device should be used <span class="k">for</span> this <span class="nb">command</span>         <span class="p">|</span> FL_ANDROID_SERIAL <span class="p">|</span>         <span class="p">|</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="p">|</span> <span class="nb">command</span>  <span class="p">|</span> All commands you want to pass to the adb command, e.g. <span class="sb">`</span>kill-server<span class="sb">`</span> <span class="p">|</span> FL_ADB_COMMAND    <span class="p">|</span>         <span class="p">|</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="p">|</span> adb_path <span class="p">|</span> The path to your <span class="sb">`</span>adb<span class="sb">`</span> binary                                        <span class="p">|</span> FL_ADB_PATH       <span class="p">|</span> adb     <span class="p">|</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">+----------+----------------------------------------------------------------------+-------------------+---------+
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">+-------------------------------+
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="p">|</span>       adb Return Value        <span class="p">|</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">+-------------------------------+
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">|</span> The output of the adb <span class="nb">command</span> <span class="p">|</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">+-------------------------------+
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">More information can be found on https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
</span></span></code></pre></div><h3 id="创建自定义扩展">创建自定义扩展</h3>
<p>通过内置的命令创建你需要的扩展，扩展名必须是全部小写且只能使用下划线分割词组，生成好的扩展文件会在 <code>fastlane/actions</code> 目录找到:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ fastlane new_action
</span></span><span class="line"><span class="ln">2</span><span class="cl">Must be lower <span class="k">case</span>, and use a <span class="s1">&#39;_&#39;</span> between words. Do not use <span class="s1">&#39;.&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">examples: <span class="s1">&#39;testflight&#39;</span>, <span class="s1">&#39;upload_to_s3&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">Name of your action: hello
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="o">[</span>15:33:15<span class="o">]</span>: Created new action file <span class="s1">&#39;./fastlane/actions/hello.rb&#39;</span>. Edit it to implement your custom action.
</span></span></code></pre></div><p>这块会占比较大的篇幅，尽情期待后续的展开。</p>
<h3 id="引入外部扩展">引入外部扩展</h3>
<p>这块其实也有两种方法可以引入，文件引入是官方教程提供的方法，第二种是我个人尝试出来的，第三种是最近版本才官方支持的。</p>
<h4 id="1-本地文件引入">1. 本地文件引入</h4>
<p>自定义的扩展其实也算是本地文件引入的一种形式，当然位于其他路径的通过指定方法也能做到</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 引入项目根目录 script/share_actions 路径</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">actions_path</span> <span class="s1">&#39;../script/share_actions&#39;</span>
</span></span></code></pre></div><h4 id="2-rubygem-引入">2. rubygem 引入</h4>
<blockquote>
<p>不再建议使用本方法，请看第三种插件引入。</p>
</blockquote>
<p>我在团队内部创建了一个自定义的扩展，仅限于团队内部使用而无法贡献社区，我只能采取封装成 ruby gem 包，通过 ruby 的 <code>require</code> 方式引入，最终可以完美支持，目前已在项目中使用大半年之久。最重要的是我是开源的：<a href="https://github.com/icyleaf/fastlane-qyer">fastlane-qyer</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 首先安装需要的 rubygem: gem install fastlane-qyer</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">require</span> <span class="s1">&#39;fastlane-qyer&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">lane</span> <span class="ss">:upload</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="n">qyer</span><span class="p">(</span><span class="ss">api_key</span><span class="p">:</span> <span class="s1">&#39;[token]&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>注意，使用 rubygem 引入的无法在 fastlane actions 中显示出来，也无法使用 fastlane action [name] 查看使用帮助。我猜想一是官方没有这样提供思路，二是就算你引入了 gem 也不是特别好判断里面的文件结构。</p>
<h4 id="3-插件引入">3. 插件引入</h4>
<p>我注意到 <a href="https://github.com/fastlane/fastlane/releases/tag/1.93.0">1.93.0</a> 增加了插件机制，很好的解决第二种出现的一些问题。大概看了一下主要是采用 <code>Gemfile</code> 的方式使用 <code>Pluginfile</code> 维护了引入第三方插件列表。实现原理还是属于第二种方法。</p>
<p>通过 <code>fastlane search_plugins</code> 查看当前支持的插件，并使用 <code>fastlane add_plugins [name]</code> 引入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ fastlane search_plugins
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="o">[</span>16:04:33<span class="o">]</span>: Listing all available fastlane plugins
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">+--------------------------+---------------------------------------------------+-----------+
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">|</span>                                Available fastlane plugins                                <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">+--------------------------+---------------------------------------------------+-----------+
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">|</span> Name                     <span class="p">|</span> Description                                       <span class="p">|</span> Downloads <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">+--------------------------+---------------------------------------------------+-----------+
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="p">|</span> ruby                     <span class="p">|</span> Useful fastlane actions <span class="k">for</span> Ruby projects         <span class="p">|</span> <span class="m">782</span>       <span class="p">|</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">|</span> versioning               <span class="p">|</span> Allows to work set/get app version directly       <span class="p">|</span> <span class="m">758</span>       <span class="p">|</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> to/from Info.plist                                <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">|</span> branding                 <span class="p">|</span> Add some branding to your fastlane output         <span class="p">|</span> <span class="m">716</span>       <span class="p">|</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">|</span> instrumented_tests       <span class="p">|</span> New action to run instrumented tests <span class="k">for</span> android. <span class="p">|</span> <span class="m">590</span>       <span class="p">|</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> This basically creates and boots an emulator      <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> before running an gradle commands so that you can <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> run instrumented tests against that emulator.     <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> After the gradle <span class="nb">command</span> is executed, the avd     <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> gets shut down and deleted. This is really        <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> helpful on CI services, keeping them clean and    <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> always having a fresh avd <span class="k">for</span> testing.            <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="p">|</span> xamarin_build            <span class="p">|</span> Build xamarin android<span class="se">\i</span>os projects                <span class="p">|</span> <span class="m">582</span>       <span class="p">|</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="p">|</span> appicon                  <span class="p">|</span> Generate required icon sizes and iconset from a   <span class="p">|</span> <span class="m">509</span>       <span class="p">|</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> master application icon.                          <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">...
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="p">|</span> download_file            <span class="p">|</span> This action downloads a file from an HTTP/HTTPS   <span class="p">|</span> <span class="m">171</span>       <span class="p">|</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> url <span class="o">(</span>e.g. ZIP file<span class="o">)</span> and puts it in a destination  <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="p">|</span>                          <span class="p">|</span> path                                              <span class="p">|</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">+--------------------------+---------------------------------------------------+-----------+
</span></span><span class="line"><span class="ln">29</span><span class="cl">
</span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="c1"># 添加 sentry 插件</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">$ fastlane add_plugin sentry
</span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="o">[</span>16:16:23<span class="o">]</span>: Plugin <span class="s1">&#39;fastlane-plugin-sentry&#39;</span> was added to <span class="s1">&#39;./fastlane/Pluginfile&#39;</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="o">[</span>16:16:23<span class="o">]</span>: It looks like fastlane plugins are not yet <span class="nb">set</span> up <span class="k">for</span> this project.
</span></span><span class="line"><span class="ln">34</span><span class="cl"><span class="o">[</span>16:16:23<span class="o">]</span>: fastlane will create a new Gemfile at path <span class="s1">&#39;Gemfile&#39;</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="o">[</span>16:16:23<span class="o">]</span>: This change is neccessary <span class="k">for</span> fastlane plugins to work
</span></span><span class="line"><span class="ln">36</span><span class="cl">Should fastlane modify the Gemfile at path <span class="s1">&#39;Gemfile&#39;</span> <span class="k">for</span> you? <span class="o">(</span>y/n<span class="o">)</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">y
</span></span><span class="line"><span class="ln">38</span><span class="cl"><span class="o">[</span>16:16:29<span class="o">]</span>: Successfully modified <span class="s1">&#39;Gemfile&#39;</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="o">[</span>16:16:29<span class="o">]</span>: Make sure to commit your Gemfile, Gemfile.lock and Pluginfile to version control
</span></span><span class="line"><span class="ln">40</span><span class="cl">Installing plugin dependencies...
</span></span><span class="line"><span class="ln">41</span><span class="cl">Successfully installed plugins
</span></span><span class="line"><span class="ln">42</span><span class="cl">
</span></span><span class="line"><span class="ln">43</span><span class="cl">$ cat fastlane/Pluginfile
</span></span><span class="line"><span class="ln">44</span><span class="cl"><span class="c1"># Autogenerated by fastlane</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl"><span class="c1"># Ensure this file is checked in to source control!</span>
</span></span><span class="line"><span class="ln">47</span><span class="cl">
</span></span><span class="line"><span class="ln">48</span><span class="cl">gem <span class="s1">&#39;fastlane-plugin-sentry&#39;</span>
</span></span></code></pre></div><p>更详细的继续期待后续报道，我要挖坑无数。</p>
<h3 id="扩展的命令行调用">扩展的命令行调用</h3>
<p>社区的力量果然是很强大的，陆续添加了那么多功能，早期用户表示不开心！嗯，由于社区的呼声和贡献目前可以通过命令调用扩展：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 使用 notification 扩展发送一个通知消息</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ fastlane run notification message:<span class="s2">&#34;Hi macOS&#34;</span> title:<span class="s2">&#34;Fastlane Notification&#34;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="o">[</span>15:58:05<span class="o">]</span>: --------------------------
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="o">[</span>15:58:05<span class="o">]</span>: --- Step: notification ---
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="o">[</span>15:58:05<span class="o">]</span>: --------------------------
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="o">[</span>15:58:05<span class="o">]</span>: Result: <span class="nb">true</span>
</span></span></code></pre></div><h2 id="辅助功能">辅助功能</h2>
<h3 id="自动更新">自动更新</h3>
<p>fastlane 提供一个方法 <code>update_fastlane</code> 用于对于自身的版本检查和更新，这个第一篇文章我也有提到过。它其实一个是一个扩展，使用 <code>fastlane action update_fastlane</code> 能够看到使用帮助。它有一个参数是可以指定检查特定的 fastlane 工具并进行更新，但其实它是使用 rubygems 进行对 gem 的更新，因此这块其实可以传入任何需要检查并更新的 gem：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">update_fastlane</span><span class="p">(</span><span class="ss">tools</span><span class="p">:</span><span class="s1">&#39;fastlane,gym,match,cocoapods,rest-client&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="环境变量">环境变量</h3>
<p>从 fastlane 的设计体系上在各个地方都加入了环境变量的支持，每个扩展的参数、以及扩展需要共享给其他扩展和任务读取的数据都是通过环境变量获取，如下是我收集的比较常用的列表：</p>
<table>
<thead>
<tr>
<th>环境变量</th>
<th>来源</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>FASTLANE_USER</td>
<td>credentials_manager</td>
<td>Apple 开发者账户名</td>
<td>验证通过后会保存 Keychain</td>
</tr>
<tr>
<td>FASTLANE_PASSWORD</td>
<td>credentials_manager</td>
<td>Apple 开发者账户密码</td>
<td>验证通过后会保存 Keychain</td>
</tr>
<tr>
<td>FASTLANE_TEAM_ID<!-- raw HTML omitted -->CERT_TEAM_ID</td>
<td>produce<!-- raw HTML omitted -->sigh</td>
<td>Apple 团队 ID</td>
<td></td>
</tr>
<tr>
<td>DELIVER_USER&lt;br &gt;PRODUCE_USERNAME</td>
<td>deliver<!-- raw HTML omitted -->produce</td>
<td>iTunesConnect 账户名</td>
<td></td>
</tr>
<tr>
<td>DELIVER_PASSWORD</td>
<td>deliver</td>
<td>iTunesConnect 账户密码</td>
<td></td>
</tr>
<tr>
<td>MATCH_PASSWORD</td>
<td>match</td>
<td>证书加/解密密码</td>
<td></td>
</tr>
<tr>
<td>FASTLANE_XCODE_LIST_TIMEOUT</td>
<td>fastlane_core</td>
<td>获取 iOS Scheme 的超时时间</td>
<td>默认 10s</td>
</tr>
</tbody>
</table>
]]></content:encoded></item><item><title>Gitlab API Wrapper for Crystal</title><link>https://icyleaf.com/2016/07/gitlab-api-wrapper-for-crystal/</link><pubDate>Mon, 11 Jul 2016 20:41:26 +0800</pubDate><guid>https://icyleaf.com/2016/07/gitlab-api-wrapper-for-crystal/</guid><description>
学习新语音最好的途径就是造轮子</description><content:encoded><![CDATA[<h2 id="gitlabcr">Gitlab.cr</h2>
<p><a href="https://github.com/icyleaf/gitlab.cr">gitlab.cr</a> 是我最近课下练习的新语言 <a href="http://crystal-lang.org/">Crystal</a> 写的 gitlab 包，方法和功能和 <a href="https://github.com/NARKOZ/gitlab">gitlab ruby 版本</a>基本类似。</p>
<p>目前已经完成了大部分 API 的封装，在一边熟悉 crystal 的同时一边补充，其中肯定有一些性能问题和坑，毕竟没有任何依赖都是自己实现的。比较坑爹的是官方手册太简单，也没有实时跟进，能够好好翻阅的其实也就是官方的 API 文档和源码。不过 crystal 还算比较人性化的一面，默认集成了类似 rspce 的单元测试（简化版）和依赖库管理 shards（类似 bundler）和生成文档的工具。通过 <a href="https://travis-ci.org/%60%60">travis-ci</a> 会自动生成每次 git push 的变化。</p>
<p>API 文档：http://icyleaf.github.io/gitlab.cr/</p>
<h2 id="为什么学习-crystal">为什么学习 Crystal？</h2>
<p><img src="https://cloud.githubusercontent.com/assets/209371/13291809/022e2360-daf8-11e5-8be7-d02c1c8b38fb.png"
  
  
  alt="crystal logo"></img>
</p>
<p>Ruby 的缺点众所周知的一个点就是慢，虽说用它的人都不在乎主要是用的爽，so what！这一致命的坑其实默默的被承受着，很多的 Ruby 开发者也在一直寻觅着新的更高性能的语言。比如 Gitlab 的 Build Runner 使用 Go 实现了。Rails 的核心开发者基于多年对 Ruby 的怨念而开发的 Elixir，还有 Firefox 主导的 Rust 也吸引了不少目光。有那么多选择为什么偏偏选了这么一个没有听说过的语言？</p>
<h2 id="语言优势">语言优势</h2>
<ul>
<li>类似 Ruby 风格语法（但舍弃了一些动态特性）</li>
<li>一切都是对象（和 Ruby 一样）</li>
<li>自动类型推荐和静态类型检查</li>
<li>支持方法重载</li>
<li>易用的 C 语言库的绑定机制</li>
<li>基于 LLVM（目前不支持 Windows）</li>
<li>编译性语言，可以打包二进制包</li>
</ul>
<p>仅仅是这些可能大家觉得没什么，其实对我来说也不够冲击力，最重要的关键是在我从订阅的 Ruby Weekly 周刊看到 sidekiq 的作者用 crystal 重新实现了核心部分发的<a href="http://www.mikeperham.com/2016/05/25/sidekiq-for-crystal/">博文分享</a>，提到的一点：<strong>至少是比 ruby 2.3 大部分代码要快 3-5 倍，减少至少 3 倍的内存占用</strong>。怀着怀疑的态度我大概的研究了这个语言，确实看到了新希望。</p>
<table>
<thead>
<tr>
<th>库</th>
<th>语言</th>
<th>并发量</th>
<th>平均响应时间</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/sdogruyol/fast-http-server">fast-http-server</a></td>
<td><code>Crystal</code></td>
<td>18348.47rpm</td>
<td>8.67ms</td>
</tr>
<tr>
<td><a href="https://github.com/indexzero/http-server">http-server</a></td>
<td><code>Node.js</code></td>
<td>2105.55rpm</td>
<td>47.92ms</td>
</tr>
<tr>
<td><a href="https://docs.python.org/2/library/simplehttpserver.html">SimpleHTTPServer</a></td>
<td><code>Python</code></td>
<td>785.14rpm</td>
<td>1.91ms</td>
</tr>
</tbody>
</table>
<p>还有一份一直再更新维护的语言之间的<a href="https://github.com/kostya/benchmarks">评测</a>仅供参考，看着里面的数据还是蛮吸引人的。</p>
<blockquote>
<p>评测数据来源: <a href="http://www.akitaonrails.com/2016/05/31/flirting-with-crystal-a-rubyist-perspective">Flirting with Crystal, a Rubyist Perspective</a></p>
</blockquote>
<h2 id="语言友好">语言友好</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># File: server.cr</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="nb">require</span> <span class="s2">&#34;http/server&#34;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">server</span> <span class="o">=</span> <span class="no">HTTP</span><span class="o">::</span><span class="no">Server</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">8080</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">context</span><span class="o">|</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="n">context</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s2">&#34;text/plain&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="n">context</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">print</span> <span class="s2">&#34;Hello world! The time is </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="nb">puts</span> <span class="s2">&#34;Listening on http://0.0.0.0:8080&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="n">server</span><span class="o">.</span><span class="n">listen</span>
</span></span></code></pre></div><p>看着是不是是不是和 Ruby 差不多。通过命令编译成二进制在运行试试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ crystal build --release server.cr
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ ./server
</span></span><span class="line"><span class="ln">3</span><span class="cl">Listening on http://0.0.0.0:8080
</span></span></code></pre></div><blockquote>
<p>macOS 用户可以通过 brew 进行安装 <code>brew install crystal-lang</code></p>
</blockquote>
<h2 id="语言限制">语言限制</h2>
<ul>
<li>没有了强大的黑魔法，尤其是针对 <code>eval</code> 和 <code>send</code> 两个的缺失。提供了 macro 的方式可以实现部分动态定义方法的机制。</li>
<li>require 引入必须放置在头部（crystal 0.7.7 以上版本的限制）</li>
<li>有待优化的 gc 机制（目前采用的是 <a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E5%A7%86%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8">Hans Boehm GC</a>）</li>
<li>还在开发中的语言，API 变化很快</li>
</ul>
<h2 id="最后想说的话">最后想说的话</h2>
<p>总体来说是一个让人眼前一亮的语言，很是期待后续的进化。我相信 sidekiq 作者的那篇博文也让无数开发者看到了新大陆。目前项目也在<a href="https://salt.bountysource.com/teams/crystal-lang">捐献</a>中，如果你对它感兴趣不妨慷慨的动动自己的钱包，Ruby 的创始人 matz 直接捐献了 $500。</p>
<h2 id="相关资源">相关资源</h2>
<ul>
<li>作者 Twitter: <a href="https://twitter.com/asterite">https://twitter.com/asterite</a></li>
<li>Awesome Crystal: <a href="http://awesome-crystal.com/">http://awesome-crystal.com/</a></li>
<li>Sidekiq for Crystal: <a href="http://www.mikeperham.com/2016/05/25/sidekiq-for-crystal/">http://www.mikeperham.com/2016/05/25/sidekiq-for-crystal/</a></li>
<li>Test Driving Sidekiq and Crystal: <a href="http://www.mikeperham.com/2016/06/14/test-driving-sidekiq-and-crystal/">http://www.mikeperham.com/2016/06/14/test-driving-sidekiq-and-crystal/</a></li>
<li>Flirting with Crystal, a Rubyist Perspective: <a href="http://www.akitaonrails.com/2016/05/31/flirting-with-crystal-a-rubyist-perspective">http://www.akitaonrails.com/2016/05/31/flirting-with-crystal-a-rubyist-perspective</a></li>
</ul>
]]></content:encoded></item><item><title>Fastlane - iOS 和 Android 的自动化构建工具</title><link>https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/</link><pubDate>Mon, 11 Jul 2016 12:36:07 +0800</pubDate><guid>https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/</guid><description>
使用 fastlane 提升构建移动应用的效率</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>这篇文章整理了很久，发现在一篇文章里无法一一讲述和全面的覆盖，初步打算是把这个做成一个系列，想到哪里就写到哪里，如果恰好有读者爱戴并有一些建议反馈，我也会根据大家的需要调整内容的方向和深度。论美剧的编剧的重要性(笑)。</p>
<h2 id="初次邂逅">初次邂逅</h2>
<p>初时 fastlane 的时候是去年的 11 月份，看到大就感觉遇到了神器一般的惊喜。它一个针对于 iOS 和 Android（后来才支持的）全方位自动化流程的工具，请看下图</p>
<p><img src="https://fastlane.tools/assets/img/intro-fastlane-tree.png"
  
  
  alt="fastlane-flow"></img>
</p>
<p>流程图中每个环节都是独立的工具，每个工具只干一件事情，分工非常的明确。以下是我在团队项目中用到的：</p>
<ul>
<li><a href="https://github.com/fastlane/fastlane/tree/master/scan">scan</a> 自动化测试工具，很好的封装了 Unit Test</li>
<li><a href="https://github.com/fastlane/fastlane/tree/master/sigh">sigh</a> 针对于 iOS 项目开发证书和 Provision file 的下载工具</li>
<li><a href="https://github.com/fastlane/fastlane/tree/master/match">match</a> 同步团队每个人的证书和 Provision file 的超赞工具，规范<a href="https://codesigning.guide/">代码签名</a>（虽然里面有些设定比较损）</li>
<li><a href="https://github.com/fastlane/fastlane/tree/master/gym">gym</a> 针对于 iOS 打包和签名的自动化工具，完爆 <code>xctool</code>，而 <code>shenzhen</code> 也放弃维护</li>
<li><a href="https://github.com/icyleaf/fastlane-qyer">qyer</a> 团队定制的工具，用于检测包和上传到自己的内部分发平台</li>
<li><a href="https://github.com/fastlane/fastlane">fastlane</a> 简单理解就是控制整体流程和实现的框架容器</li>
</ul>
<p>利用目前支持的工具可以做所有包含自动化和可持续化构建的每个环节，比如单元测试、截图、分发渠道、上传元数据和 ipa 包提交审核等等。看到这这些是不是很兴奋？
反正我看到之后就像黑夜看到了光明，果断抛弃自己维护的脚本。</p>
<h2 id="基本构成">基本构成</h2>
<p>Fastlane 提供的流程的众多工具都是可以独立存在和使用（提供 cli 命令），也可以统一由 fastlane 来控制。它在使用中提出了两个概念：</p>
<ul>
<li><code>action</code>: Fastlane 的插件，截至当前内置 165 个至多，不过每个动作的颗粒度大小不一。<a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md">查看详情</a></li>
<li><code>lane</code>: Fastlane 的任务（或者可以理解为命令），一个可以包含多个 lanes，通过 <code>fastlane</code> cli 传入制定的 lane 来执行。</li>
</ul>
<p>光说不干假把式，看法宝：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">lane</span> <span class="ss">:adhoc</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="c1"># build version 自动加一</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="n">increment_build_number</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="c1"># 执行 pod install</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="n">cocoapods</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="c1"># 调用 facebook 的 xctool 进行单元测试</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="n">xctool</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="c1"># 对模拟器运行的 App 进行截图</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="n">snapshot</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="c1"># 安装团队证书和 profiles</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="n">match</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="c1"># 上传 App 元数据和签名的 ipa 到 iTunes Conneects</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="n">deliver</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="c1"># 把截图套进一个设备外壳</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="n">frameit</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="c1"># 允许自定义的脚本文件</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">  <span class="n">sh</span> <span class="s2">&#34;./customScript.sh&#34;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">  <span class="c1"># 发消息到 slack</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">  <span class="n">slack</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h2 id="安装">安装</h2>
<p>工具的起源本身是专门针对 iOS 项目，因此目前依赖于 macOS 10.9 以上系统，Ruby 是一个众所周知的轮子发明者，很多知名的工具都是它开发的，fastlane 也不例外。以下是依赖环境：</p>
<ul>
<li>macOS 10.9+</li>
<li>Ruby 2.0+ (推荐 rvm 或 rbenv 安装)</li>
<li>Xcode + command line tools</li>
</ul>
<p>以上依赖配置好之后就可以通过 rubygem 进行安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ <span class="o">[</span>sudo<span class="o">]</span> gem install fastlane
</span></span></code></pre></div><p>fastlane 默认会把核心工具都会进行安装，需要大家耐心等待一会&hellip;</p>
<h2 id="初始化">初始化</h2>
<p>有两种方法可以初始化，一种是通过命令，一种是自己创建指定的（至少包含一个）约束文件 <code>Fastfile</code>。首先我先介绍大家使用命令初始化:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># 切换只你开发的 iOS 项目根目录</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">$ <span class="nb">cd</span> to/your/ios/project
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">$ fastlane init
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="o">[</span>11:46:34<span class="o">]</span>: Detected iOS/Mac project in current directory...
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="o">[</span>11:46:34<span class="o">]</span>: This setup will <span class="nb">help</span> you get up and running in no time.
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="o">[</span>11:46:34<span class="o">]</span>: fastlane will check what tools you<span class="s1">&#39;re already using and set up
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="s1">[11:46:34]: the tool automatically for you. Have fun!
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="s1">[11:46:34]: Created new folder &#39;</span>./fastlane<span class="s1">&#39;.
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="s1">...
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="s1">Your Apple ID (e.g. fastlane@krausefx.com): xxx@gmail.com
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="s1">[11:46:59]: Verifying if app is available on the Apple Developer Portal and iTunes Connect...
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="s1">[11:46:59]: Starting login with user &#39;</span>xxx@gmail.com<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s1">Multiple teams found on the Developer Portal, please enter the number of the team you want to use:
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="s1">1) XXXXXXXXXX &#34;XXXXXXXXXX&#34; (In-House)
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s1">2) YYYYYYYYYY &#34;YYYYYYYYYY&#34; (Company/Organization)
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s1">+----------------+----------------------------------------------------------------------------+
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s1">|                                       Detected Values                                       |
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="s1">+----------------+----------------------------------------------------------------------------+
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="s1">| Apple ID       | xxx@gmail.com                                                              |
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="s1">| App Name       | Hello Fastlane                                                             |
</span></span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="s1">| App Identifier | com.icyleaf.demo.HelloFastlane                                             |
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="s1">| Workspace      | /Users/icyleaf/Development/iOS/HelloFastlane.xcworkspace                   |
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="s1">+----------------+----------------------------------------------------------------------------+
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="s1">[11:48:36]: This app identifier doesn&#39;</span>t exist on iTunes Connect yet, it will be created <span class="k">for</span> you
</span></span><span class="line"><span class="ln">26</span><span class="cl">Please confirm the above values <span class="o">(</span>y/n<span class="o">)</span> n
</span></span><span class="line"><span class="ln">27</span><span class="cl">App Identifier <span class="o">(</span>com.krausefx.app<span class="o">)</span>: com.icyleaf.demo.HelloFastlane
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="o">[</span>11:50:04<span class="o">]</span>: Created new file <span class="s1">&#39;./fastlane/Appfile&#39;</span>. Edit it to manage your preferred app metadata information.
</span></span><span class="line"><span class="ln">29</span><span class="cl">Optional: The scheme name of your app <span class="o">(</span>If you don<span class="s1">&#39;t need one, just hit Enter): AppDemo
</span></span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="s1">[11:50:40]: &#39;</span>snapshot<span class="s1">&#39; not enabled.
</span></span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="s1">[11:50:40]: &#39;</span>cocoapods<span class="s1">&#39; enabled.
</span></span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="s1">[11:50:40]: &#39;</span>carthage<span class="s1">&#39; not enabled.
</span></span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="s1">[11:50:40]: Created new file &#39;</span>./fastlane/Fastfile<span class="err">&#39;</span>. Edit it to manage your own deployment lanes.
</span></span><span class="line"><span class="ln">34</span><span class="cl"><span class="o">[</span>11:50:40<span class="o">]</span>: fastlane will send the number of errors <span class="k">for</span> each action to
</span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="o">[</span>11:50:40<span class="o">]</span>: https://github.com/fastlane/enhancer to detect integration issues
</span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="o">[</span>11:50:40<span class="o">]</span>: No sensitive/private information will be uploaded
</span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="o">[</span>11:50:40<span class="o">]</span>: Successfully finished setting up fastlane
</span></span></code></pre></div><p>这部分会进行联网，并提示输入你的 Apple ID 来验证你的应用是否存在（没有也会帮你自动创建）并获取相应的关键信息，通过一系列的流程下来把获取的信息会创建一个 <code>fastlane</code> 目录
并并写入相应的文件（如果某些信息没有填写会忽略某些文件的生成）：</p>
<ul>
<li><code>Fastfile</code>: 核心文件，主要用于 cli 调用和处理具体的流程，<a href="https://github.com/fastlane/fastlane/tree/master/fastlane/docs#fastfile">了解详情</a></li>
<li><code>Appfile</code>: 从 Apple Developer Portal 获取和项目相关的信息，<a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md">了解详情</a></li>
<li><code>Deliverfile</code>: 从 iTunes Connect 获取和项目相关的信息，<a href="https://github.com/fastlane/fastlane/blob/master/deliver/Deliverfile.md">了解详情</a></li>
</ul>
<p>抛开其他的几个文件先不说，大家先把注意力放到刚创建好的 <code>Fastfile</code> 文件上面（可能有变化，仅作参考），如果大家对 Ruby 有了解的话，它定义的 DSL 语言非常类似 <a href="https://github.com/ruby/rake">rake</a>，但流程上有参考的 <a href="https://github.com/rspec/rspec">rspec</a>，一旦不满足需求还可以使用 Ruby 代码来实现。单凭 DSL 语言来说就算对于 Ruby 没有基础的也能很快掌握，大多都是比较简单易懂的语法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># Customise this file, documentation can be found here:</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"># https://github.com/fastlane/fastlane/tree/master/fastlane/docs</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"># All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"># can also be listed using the `fastlane actions` command</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"># Change the syntax highlighting to Ruby</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"># All lines starting with a # are ignored when running `fastlane`</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"># If you want to automatically update fastlane if a new version is available:</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"># update_fastlane</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1"># This is the minimum version number required.</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1"># Update this, if you use features of a newer version</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="n">fastlane_version</span> <span class="s2">&#34;1.95.0&#34;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="n">default_platform</span> <span class="ss">:ios</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="n">platform</span> <span class="ss">:ios</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">  <span class="c1"># 执行所有命令前都会先执行这里</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">  <span class="n">before_all</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="c1"># ENV[&#34;SLACK_URL&#34;] = &#34;https://hooks.slack.com/services/...&#34;</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="n">cocoapods</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">  <span class="n">desc</span> <span class="s2">&#34;Runs all the tests&#34;</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">  <span class="n">lane</span> <span class="ss">:test</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="nb">scan</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">
</span></span><span class="line"><span class="ln">30</span><span class="cl">  <span class="n">desc</span> <span class="s2">&#34;Submit a new Beta Build to Apple TestFlight&#34;</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">  <span class="n">desc</span> <span class="s2">&#34;This will also make sure the profile is up to date&#34;</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">  <span class="n">lane</span> <span class="ss">:beta</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">    <span class="c1"># match(type: &#34;appstore&#34;) # more information: https://codesigning.guide</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="n">gym</span><span class="p">(</span><span class="ss">scheme</span><span class="p">:</span> <span class="s2">&#34;AppDemo&#34;</span><span class="p">)</span> <span class="c1"># Build your app - more options available</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">    <span class="n">pilot</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">
</span></span><span class="line"><span class="ln">37</span><span class="cl">    <span class="c1"># sh &#34;your_script.sh&#34;</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="c1"># You can also use other beta testing services here (run `fastlane actions`)</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">
</span></span><span class="line"><span class="ln">41</span><span class="cl">  <span class="n">desc</span> <span class="s2">&#34;Deploy a new version to the App Store&#34;</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">  <span class="n">lane</span> <span class="ss">:appstore</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">    <span class="c1"># match(type: &#34;appstore&#34;)</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">    <span class="c1"># snapshot</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">    <span class="n">gym</span><span class="p">(</span><span class="ss">scheme</span><span class="p">:</span> <span class="s2">&#34;AppDemo&#34;</span><span class="p">)</span> <span class="c1"># Build your app - more options available</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl">    <span class="n">deliver</span><span class="p">(</span><span class="ss">force</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">47</span><span class="cl">    <span class="c1"># frameit</span>
</span></span><span class="line"><span class="ln">48</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">49</span><span class="cl">
</span></span><span class="line"><span class="ln">50</span><span class="cl">  <span class="c1"># 你可以定义属于自己的 lane（任务）</span>
</span></span><span class="line"><span class="ln">51</span><span class="cl">  <span class="n">lane</span> <span class="ss">:hello</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">52</span><span class="cl">    <span class="nb">puts</span> <span class="s2">&#34;hello world&#34;</span>
</span></span><span class="line"><span class="ln">53</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">54</span><span class="cl">
</span></span><span class="line"><span class="ln">55</span><span class="cl">  <span class="c1"># 仅当上述流程全部执行成功后才会走这里。其实应该定义为 after_success</span>
</span></span><span class="line"><span class="ln">56</span><span class="cl">  <span class="n">after_all</span> <span class="k">do</span> <span class="o">|</span><span class="n">lane</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">57</span><span class="cl">    <span class="c1"># slack(</span>
</span></span><span class="line"><span class="ln">58</span><span class="cl">    <span class="c1">#   message: &#34;Successfully deployed new App Update.&#34;</span>
</span></span><span class="line"><span class="ln">59</span><span class="cl">    <span class="c1"># )</span>
</span></span><span class="line"><span class="ln">60</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">61</span><span class="cl">
</span></span><span class="line"><span class="ln">62</span><span class="cl">  <span class="c1"># 如果流程发生异常会走这里并终止</span>
</span></span><span class="line"><span class="ln">63</span><span class="cl">  <span class="n">error</span> <span class="k">do</span> <span class="o">|</span><span class="n">lane</span><span class="p">,</span> <span class="n">exception</span><span class="o">|</span>
</span></span><span class="line"><span class="ln">64</span><span class="cl">    <span class="c1"># slack(</span>
</span></span><span class="line"><span class="ln">65</span><span class="cl">    <span class="c1">#   message: exception.message,</span>
</span></span><span class="line"><span class="ln">66</span><span class="cl">    <span class="c1">#   success: false</span>
</span></span><span class="line"><span class="ln">67</span><span class="cl">    <span class="c1"># )</span>
</span></span><span class="line"><span class="ln">68</span><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="ln">69</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>通过上面的注解，我想大家对它已经有了初步的了解，那么定义完之后该如何执行呢？回到刚才的终端（关闭了？那再切换到刚才的 iOS 项目的根目录）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ fastlane ios hello
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: -------------------------------------------------
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: --- Step: Verifying required fastlane version ---
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: -------------------------------------------------
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: fastlane version valid
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: ------------------------------
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: --- Step: default_platform ---
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: ------------------------------
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: Driving the lane <span class="s1">&#39;ios hello&#39;</span> 🚀
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: -----------------------
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: --- Step: cocoapods ---
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: -----------------------
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="o">[</span>11:56:24<span class="o">]</span>: $ pod install
</span></span><span class="line"><span class="ln">14</span><span class="cl">...
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="o">[</span>11:56:28<span class="o">]</span>: hello world
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">+------+-------------------------------------+-------------+
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="p">|</span>                     fastlane summary                     <span class="p">|</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">+------+-------------------------------------+-------------+
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">|</span> Step <span class="p">|</span> Action                              <span class="p">|</span> Time <span class="o">(</span>in s<span class="o">)</span> <span class="p">|</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">+------+-------------------------------------+-------------+
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="p">|</span> <span class="m">1</span>    <span class="p">|</span> Verifying required fastlane version <span class="p">|</span> <span class="m">0</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="p">|</span> <span class="m">2</span>    <span class="p">|</span> default_platform                    <span class="p">|</span> <span class="m">0</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="p">|</span> <span class="m">3</span>    <span class="p">|</span> cocoapods                           <span class="p">|</span> <span class="m">4</span>           <span class="p">|</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">+------+-------------------------------------+-------------+
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="o">[</span>11:56:28<span class="o">]</span>: fastlane.tools finished successfully 🎉
</span></span></code></pre></div><p>哒哒！一个简单的任务执行完毕！</p>
<p>如果大家注意观察上面的文件可能注意到一些小细节：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># 自动更新 fastlane 工具，需要 rubygems &gt;= 2.1.0</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">update_fastlane</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"># 最低兼容版本，由于 fastlane 还是逐步健壮的阶段更新速度还是蛮快的，</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"># 为了防止新特性在旧版本的不支持会强制设置一个最低兼容版本</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1"># 不过工具特别贴心的会在每次执行之后会检查是否有新版本，如果有会在最后末尾追加新版本提醒</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="n">fastlane_version</span> <span class="s2">&#34;1.95.0&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"># 默认使用平台是 ios，也就是说文件可以定义多个平台，</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"># 通过上述执行的命令也能看出来是执行的 ios 平台下面的 hello 任务。</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"># 这个的作用是可以在执行 fastlane 的时候省略 ios，不信你执行 fastlane hello 试试。</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="n">default_platform</span> <span class="ss">:ios</span>
</span></span></code></pre></div><h2 id="android-的支持">Android 的支持</h2>
<p>这个的支持我觉得关键是社区的呼声太大，加上贡献者的热情（我提交过许多 issues 和个别 PL，响应非常的迅速）很快就加上了其支持，
但具体的特性不是特别多，主要是对于 <code>gradle</code> 的封装，我先不做展开介绍，大家可以先看看<a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Android.md">官方文档</a>，如果后续有特别不明白的地方我在做具体的讲解。</p>
<p>今天就先写到这里后续我会继续整理更多的使用指南和实战范例共大家参考，最后给大家附赠官方给大家的一些<a href="https://github.com/fastlane/examples">范例</a>。</p>
]]></content:encoded></item><item><title>Puma 替换 Unicorn 跑 Gitlab</title><link>https://icyleaf.com/2014/01/moving-unicorn-to-puma-on-gitlab/</link><pubDate>Sun, 26 Jan 2014 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2014/01/moving-unicorn-to-puma-on-gitlab/</guid><description>
用 Ruby 编写的 Puma 网关才是未来</description><content:encoded><![CDATA[<p>前篇介绍到如何在《<a href="http://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/">CentoOS 上面安装 Gitlab</a>》一文，gitlab 默认使用的是 <code>unicorn</code> 作为内部的 app server，再用 <code>nginx</code> 做代理转发。之前是在公司内部搭建了一个平台，用着还算可以。有打算在 <a href="https://www.linode.com/?r=66b0730eca572d3e45f083e29b1b3f8781b2a009">Linode 购买的 VPS</a> 上面，使用 <code>unicorn</code> 跑服务的时候 <code>ruby</code> 的进程居然占了 400-500M 左右，对于 Linode 刚刚免费升级之后才有 1G 内存的环境上，我还真有点放弃安装它的欲望。于是在想是否可以使用 <code>puma</code> 替换掉原先的。</p>
<h2 id="puma">puma</h2>
<p>简单介绍下 <a href="http://puma.io/"><code>puma</code></a>，它是一个由 ruby 编写的转为 <a href="http://rack.github.io/"><code>rack</code></a> 设计的 app server，在性能和资源占有上却有极大的优势（下表数据来自官方）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">PUMA - 78 Mb
</span></span><span class="line"><span class="ln">2</span><span class="cl">RAINBOWS! (1X16) - 120 Mb
</span></span><span class="line"><span class="ln">3</span><span class="cl">UNICORN - 1076 Mb
</span></span><span class="line"><span class="ln">4</span><span class="cl">RAINBOWS! (16X32) - 1138 Mb
</span></span></code></pre></div><p>而且集成也非常的简单，若使用 rails 或者 sinatra（及 padrino）都已经支持，直接 <code>gem install puma</code>，然后跑默认的 <code>rails/padrino server</code> 会自动加载。</p>
<h2 id="教程">教程</h2>
<p>Okay，经过一番查找，官方在收集的 <a href="https://gitlab.com/gitlab-org/gitlab-recipes/tree/master">repices</a> 里面有关于 <code>puma</code> 的一些配置。他们也是收集的非官方资料，里面的资料只有借鉴意义，真正拿来用的时候各种问题，所以才有了本篇文字。</p>
<p>首先是关闭启动的 <code>gitlab</code> 服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ <span class="o">(</span>sudo<span class="o">)</span> service gitlab stop
</span></span></code></pre></div><p>关闭之后，添加 puma gem，打开 <code>Gemfile</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">group</span> <span class="ss">:unicorn</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.6.3&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">	<span class="n">gem</span> <span class="s1">&#39;unicorn-worker-killer&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>找到上面的这段 group 替换成：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">gem</span> <span class="s1">&#39;puma&#39;</span>
</span></span></code></pre></div><p>再者修改 <code>config.ru</code>，把下面这段代码做下替换，删除 unicorn 的代码，加载 puma：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">unless</span> <span class="n">defined?</span><span class="p">(</span><span class="no">PhusionPassenger</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nb">require</span> <span class="s1">&#39;unicorn&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="c1"># Unicorn self-process killer</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nb">require</span> <span class="s1">&#39;unicorn/worker_killer&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="c1"># Max memory size (RSS) per worker</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">  <span class="n">use</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">WorkerKiller</span><span class="o">::</span><span class="no">Oom</span><span class="p">,</span> <span class="p">(</span><span class="mi">200</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">)),</span> <span class="p">(</span><span class="mi">250</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">))</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>更新成</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">unless</span> <span class="n">defined?</span><span class="p">(</span><span class="no">PhusionPassenger</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nb">require</span> <span class="s1">&#39;puma&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>替换完毕更新 <code>gem</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># mysql 数据库</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">bundle install --without development <span class="nb">test</span> postgres --path vendor/bundle --no-deployment
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"># postgres 数据库</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">bundle install --without development <span class="nb">test</span> mysql --path vendor/bundle --no-deployment
</span></span></code></pre></div><p>最后还有两处需要修改，添加 <code>config/puma.rb</code>（替代 <code>config/unicorn.rb</code>） 以及替换 <code>/etc/init.d/gitlab</code> 服务脚本代码。</p>
<p><code>config/puma.rb</code>的代码在<a href="https://gitlab.com/gitlab-org/gitlab-recipes/blob/master/app-server/puma/puma.rb">这里可以下载</a>，无需做任何的修改。</p>
<p><code>/etc/init.d/gitlab</code> 服务脚本：<a href="https://gitlab.com/gitlab-org/gitlab-recipes/tree/master/init/sysvinit/centos">CentOS</a> | <a href="https://gitlab.com/gitlab-org/gitlab-recipes/tree/master/init/sysvinit/debian">Debian(Ubuntu)</a></p>
<blockquote>
<p>服务脚本需要设置下执行权限： chmod +x /etc/init.d/gitlab</p>
</blockquote>
<p>最后开启服务应该就完美了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ <span class="o">(</span>sudo<span class="o">)</span> service gitlab start
</span></span></code></pre></div><h2 id="我想用-apache-怎么办">我想用 Apache 怎么办？</h2>
<p>嗯，我没尝试过，官方有提供收集的资料，<a href="https://gitlab.com/gitlab-org/gitlab-recipes/tree/master/web-server">自己查看下吧</a>，记得要活学活用，直接套肯定会出问题的。</p>
]]></content:encoded></item><item><title>初识 Ruby Gem Guard</title><link>https://icyleaf.com/2014/01/intro-ruby-gem-guard/</link><pubDate>Sat, 25 Jan 2014 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2014/01/intro-ruby-gem-guard/</guid><description>
撰写规则帮你监听文件系统变更做出对应的行动</description><content:encoded><![CDATA[<p><a href="http://guardgem.org">Guard</a> 是一个很好的 Web 辅助开发工具，因为看了 tutsplus 网站的介绍视频：<a href="http://net.tutsplus.com/tutorials/tools-and-tips/guard-is-your-best-friend/">Guard is your best firend</a>。这里把视频的东西提取出来自我消化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ gem install guard
</span></span></code></pre></div><p>它实际的工作就像名字那样，实时守卫这某些文件并做出对应的操作，本质上相当于一个有这个思想的禁卫兵，通过指派命令（安装扩展 gem）而负责守卫和执行，比如视频中提到的：</p>
<p>上面是概念的理解，实际上的流程是，设定一系列的规则，让他监控文件内容（修改时间）的动态，一旦发生变化则根据不同的命令执行不同的操作。</p>
<p>具体基本操作不再多少，官方 <a href="https://github.com/guard/guard">README</a> 写的非常详细，或者通过上面视频也能熟悉。</p>
<h2 id="guard-sass">guard-sass</h2>
<p>监听 <a href="http://sass-lang.com/">sass</a> 文件并转换成 css 文件</p>
<h2 id="guard-coffeescript">guard-coffeescript</h2>
<p>监听 <a href="http://coffeescript.org/">coffeescript</a> 文件并转换成 js 文件</p>
<h2 id="guard-rspec">guard-rspec</h2>
<p>自动跑 <a href="https://github.com/rspec/rspec-core">rspec</a> test</p>
<h2 id="guard-livereload">guard-livereload</h2>
<p>配合浏览器的辅助工具，做到无需手动刷新页面即可看到 html/css/js 的修改变化，浏览器需要安装配套插件。</p>
<h2 id="guard-zeus">guard-zeus</h2>
<p>自动接管 <a href="https://github.com/burke/zeus">zeus</a></p>
<h2 id="guard-puma">guard-puma</h2>
<p><a href="http://puma.io">puma</a> 是目前比较新的一个 web 服务器，这个扩展可以监听配置变化从而自动重启服务器。</p>
<p>官方列举的所有扩展：<a href="https://github.com/guard/guard/wiki/List-of-available-Guards">List of available Guards</a></p>
]]></content:encoded></item><item><title>学习 Ansible + Vagrant</title><link>https://icyleaf.com/2013/12/learning-ansible-and-vagrant/</link><pubDate>Sat, 21 Dec 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/12/learning-ansible-and-vagrant/</guid><description>
Vagrant 可能会让人忘记但你不应该不学 Ansible</description><content:encoded><![CDATA[<blockquote>
<p>Ansible is a radically simple IT orchestration engine that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications— automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.</p>
</blockquote>
<p>简单来说 <a href="https://github.com/ansible/ansible">Ansible</a> 是一个极简化的应用和系统部署工具，类似 <a href="https://github.com/puppetlabs/puppet">Puppet</a>、<a href="https://github.com/opscode/chef">Chef</a>、<a href="https://github.com/saltstack/salt">SaltStack</a>。由于默认使用 <code>ssh</code> 管理服务器（集群），配置文件采用 yaml 而不是某一种特定语言制定。方便至极。</p>
<p>很多人说 salt 也很用的，为什么不考虑呢，我个人觉得，ansible 的配置文件编写起来比较方便，不需要使用 <a href="http://jinja.pocoo.org/">jinja2</a> 模板引擎适合非 <code>python</code> 用户管理。而且我也较同意 &ldquo;<a href="http://missingm.co/2013/06/ansible-and-salt-a-detailed-comparison/">Ansible and Salt: A detailed comparison</a>&rdquo; 文章的评测。</p>
<p>由于个人之前没用过任何其他工具，至于你想知道上面哪些之间有什么区别的话，参见此文：<a href="http://www.infoworld.com/d/data-center/review-puppet-vs-chef-vs-ansible-vs-salt-231308?page=0,0">Review: Puppet vs. Chef vs. Ansible vs. Salt</a> 或 &ldquo;<a href="http://ttyn.me/2013/02/19/ansible_intro.html">开始使用配置和发布管理</a>&rdquo; 一文中也有提到其特性。</p>
<h1 id="安装">安装</h1>
<p>大家移步 LinuxToy 的 <a href="https://linuxtoy.org/archives/hands-on-with-ansible.html">Ansible 快速上手</a> 一文，以及 <a href="http://gogojimmy.net/2013/05/26/vagrant-tutorial/">使用Vagrant練習環境佈署</a> 作为学习铺垫，我就不再多写。这里我想重点介绍下 Ansible + Vagrant 配合使用技巧。</p>
<blockquote>
<p>其实上面 &ldquo;使用Vagrant練習環境佈署&rdquo; 提到的配置文件是 Vagrantfile config version = 1 时候的，当前 vagrant 版本是 1.4.1， Vagrantfile config version = 2，因此配置的部分已经有所变动。大家需要做下更新。</p>
</blockquote>
<p>如果你使用的是 Vagrant 1.4.0+，工具已经完全集成了上述的 DevOps 工具（甚至 Docker，另外一神器，后续看看能否给个介绍）。默认配置文件只包含了 Puppet 和 Chef，大家需要看<a href="http://docs.vagrantup.com/v2/provisioning/index.html">官方文档</a>。</p>
<p>如果你是 Mac OS 用户，可以通过 <code>brew</code> 和 <code>brew-cask</code> 命令安装：</p>
<pre tabindex="0"><code>$ brew update
$ brew install ansible
$ brew cask install vagrant
</code></pre><h1 id="创建-vagrant-实例">创建 Vagrant 实例</h1>
<p>首先创建学习目录(<code>~/src/learn_ansible</code>)和一个实例，采用 CentOS 6.5 x64 系统：</p>
<pre tabindex="0"><code>$ vagrant init centos65 https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box
</code></pre><p>下载完毕之后，编辑 <code>Vagrantfile</code> 添加如下内容：</p>
<pre tabindex="0"><code>config.vm.network :private_network, ip: &#34;33.33.33.10&#34;
config.vm.provision :ansible do |ansible|

ansible.inventory_path = &#34;ansbile/hosts&#34;
	ansible.playbook = &#34;ansbile/playbook.yml&#34;

	# 默认使用 sudo 权限
	ansible.sudo = true
	# 开启调试信息模式
	ansible.verbose = &#39;vvv&#39;
end
</code></pre><p>并在学习目录创建 <code>ansible</code> 目录以及下面两个文件，结构如下：</p>
<pre tabindex="0"><code>$ tree
.
├── Vagrantfile
└── ansible
    ├── hosts
    └── playbook.yml
1 directory, 3 files

`hosts` 文件内容，ip 地址和上面 `Vagrantfile` 设置的一致：
</code></pre><p>[webserver]
33.33.33.10</p>
<pre tabindex="0"><code>
`playbook.yml` 文件内容：
</code></pre><hr>
<h1 id="ansbile-的配置文件这里指定只作用于-webserver-服务器">ansbile 的配置文件，这里指定只作用于 webserver 服务器</h1>
<h1 id="使用-vagrant-的-sudu-权限执行任务">使用 vagrant 的 sudu 权限执行任务</h1>
<ul>
<li>hosts: webserver
user: vagrant
sudo: yes
tasks:
<h1 id="任务只有一个就是安装-nginx">任务只有一个，就是安装 nginx</h1>
<ul>
<li>name: Install Nginx
yum: name=nginx state=present</li>
</ul>
</li>
</ul>
<pre tabindex="0"><code>

# 连接 &amp; 部署

使用 Vagrant 的好处在于，它集成了这些工具，并通过 `vagrant provision` 这个命令就能连接服务器并部署。这里我想让大家学习到如何通过传统 ssh 链接 vagrant 虚拟机的方法：

从上面的配置文件我们得知，服务器的 ip 是 `33.33.33.10` 而且默认登录到虚拟机上的用户是 vagrant（密码也是用户名），链接端口是 22。我们先拷贝 ssh public key 到服务器上：
</code></pre><p>$ ssh-copy-id <a href="mailto:vagrant@33.33.33.10">vagrant@33.33.33.10</a></p>
<pre tabindex="0"><code>
完成之后，我们就可以通过下面命令测试是否配置成功：
</code></pre><p>$ ansible -u vagrant -i ansible/hosts all -m ping</p>
<p>webserver | success &raquo; {
&ldquo;changed&rdquo;: false,
&ldquo;ping&rdquo;: &ldquo;pong&rdquo;
}</p>
<pre tabindex="0"><code>
返回 `ping: pong` 即为连接成功并可以进行部署。若你之前执行了 `vagrant provision` 就会自动执行 `playbook.yml` 的内容。


今天初探就到此结束，希望通过本篇文字大家对它有个大概的了解。
</code></pre>]]></content:encoded></item><item><title>ActiveRecord 使用秘笈</title><link>https://icyleaf.com/2013/12/activerecord-tips/</link><pubDate>Tue, 03 Dec 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/12/activerecord-tips/</guid><description>
作为 Rails 生态之一的 ORM 一定要好好学习</description><content:encoded><![CDATA[<p>ActiveRecord 是 Rails 内置的 ORM 框架，大多数人学习 Ruby 都是从 rails 开始，接触的也是这个 ORM，因此就有了这个使用秘笈。</p>
<h1 id="支持-rake-dbxxx-命令">支持 <code>rake db:xxx</code> 命令</h1>
<p>在非 rails 项目怎么让 rake 支持 db:xxx 命令呢？把如下代码放到 <code>Rakefile</code> 中:</p>
<pre tabindex="0"><code>namespace :db do
  require &#39;activerecord&#39;
  require &#39;yaml&#39;

  desc &#34;加载项目表数据到数据库&#34;
  task :init =&gt; :dbenv do
    file = &#34;db/schema.rb&#34;
    load(file) # 参考 rails 文件结构
  end

  desc &#34;创建数据库初始化数据&#34;
  task :seed =&gt; :dbenv do
    seed_file = File.join(File.dirname(__FILE__), &#39;db&#39;, &#39;seeds.rb&#39;)
    load(seed_file) if File.exist?(seed_file)
  end

  desc &#34;合并 db/migrate 目录下的数据库文件&#34;
  task :migrate =&gt; :dbenv do
    ActiveRecord::Migration.verbose = ENV[&#34;VERBOSE&#34;] ? ENV[&#34;VERBOSE&#34;] == &#34;true&#34; : true
    ActiveRecord::Migrator.migrate(&#34;db/migrate/&#34;, ENV[&#34;VERSION&#34;] ? ENV[&#34;VERSION&#34;].to_i : nil)
    Rake::Task[&#34;db:schema:dump&#34;].invoke if ActiveRecord::Base.schema_format == :ruby
  end

  desc &#39;设定 STEP=n 回滚之前版本的数据库结构&#39;
  task :rollback =&gt; :dbenv do
    step = ENV[&#39;STEP&#39;] ? ENV[&#39;STEP&#39;].to_i : 1
    ActiveRecord::Migrator.rollback(&#39;db/migrate/&#39;, step)
    Rake::Task[&#34;db:schema:dump&#34;].invoke if ActiveRecord::Base.schema_format == :ruby
  end

  task :dbenv do
    dbname = ENV[&#39;db&#39;] || &#39;development&#39;
  	$dbconfig = YAML::load(&#39;db/database.yml&#39;)
    ActiveRecord::Base.establish_connection($dbconfig[dbname])
  end

  namespace :schema do
    desc &#34;把数据库结构写入 db/schema.rb 文件&#34;
    task :dump =&gt; :dbenv do
      require &#39;active_record/schema_dumper&#39;
      File.open(ENV[&#39;SCHEMA&#39;] || &#34;db/schema.rb&#34;, &#34;w&#34;) do |file|
        ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
      end
    end
  end
end
</code></pre><p>初始化数据库结构</p>
<pre tabindex="0"><code>$ rake db:init
</code></pre><h1 id="支持-sql-server">支持 SQL Server</h1>
<p>只针对 *nix 系统：</p>
<ol>
<li>安装 freetds</li>
</ol>
<pre tabindex="0"><code>* Mac OS: `brew install freetds`
* CentOS: `yum install -y freetds`
</code></pre><ol start="2">
<li><code>gem install tiny_tds</code></li>
<li><code>gem install activerecord-sqlserver-adapter</code></li>
</ol>
<p>引用如下：</p>
<pre tabindex="0"><code>require &#39;tiny_tds&#39;
require &#39;activerecord-sqlserver-adapter&#39;
require &#39;active_record&#39;

ActiveRecord::Base.establish_connection({
  :adapter =&gt; &#39;sqlserver&#39;
 :host =&gt; &#39;10.10.10.10&#39;,
 :username =&gt; &#39;sa&#39;,
  :password =&gt; &#39;p@ssword&#39;,
  :database =&gt; &#39;development&#39;,
  :timeout =&gt; 10,
  :port =&gt; 1433,
})

class Users &lt; ActiveRecord::Base
	self.table_name = &#39;User&#39;
	default_scope { lock(&#39;WITH (NOLOCK)&#39;) }
end
</code></pre><h1 id="多数据库支持">多数据库支持</h1>
<p>创建 <code>config/database.yml</code> 文件:</p>
<pre tabindex="0"><code>development:
  adapter: mysql2
  host: localhost
  username: root
  password:
  database: development
  timeout: 10
  port: 3306
test:
  adapter: mysql2
  host: 10.10.10.10
  username: root
  password: p@ssword
  database: test
  timeout: 10
  port: 1433
production:
  adapter: mysql2
  host: 33.33.33.33
  username: root
  password: p@ssword
  database: production
</code></pre><p>创建 <code>lib/model.rb</code> 文件:</p>
<pre tabindex="0"><code>$dbconfig = YAML::load(File::open(&#39;config/database.yml&#39;))

class User &lt; ActiveRecord::Base
  establish_connection $dbconfig[&#39;development&#39;]
end

class Post &lt; ActiveRecord::Base
  establish_connection $dbconfig[&#39;test&#39;]
end

class Tag &lt; ActiveRecord::Base
  establish_connection $dbconfig[&#39;production&#39;]
end
</code></pre><h1 id="动态创建表名">动态创建表名</h1>
<p>假若有个需求需要按照每月分表（当然也可以安装业务分表什么的），我们可以通过下面方式调用：</p>
<pre tabindex="0"><code># 插入 post，如果表不存在则创建后插入
post = Post.date(&#39;201312&#39;).get_or_create_table.create(
  title:&#39;test&#39;,
  content:&#39;body&#39;
)

# Model 实现代码
class Post &lt; ActiveRecord::Base
  @date = Time.now.strftime(&#34;%Y%02m&#34;)

  def self.date(date)
  	@date = date
  end

  def self.get_or_create_table(params={})
    self.date(params[:date]) if params[:date]
    self.create_table(params) if !self.exists?
  end

  def self.create_table(params={})
    self.date(params[:date]) if params[:date]
    table_name = self.table_name
    ActiveRecord::Schema.define do
      create_table table_name do |table|
        table.column :title, :string
        table.column :content, :text
        table.column :created_at, :datetime
        table.column :updated_at, :datetime
      end
    end

    return self
  end

  def self.table_exists?
    # 如果你设置了多数据库请取消下行注解并更改配置名（参考上个技巧）
    # ActiveRecord::Base.establish_connection($dbconfig[&#39;development&#39;])

    ActiveRecord::Base.connection.tables.include?(self.table_name)
  end

  def table_name
    &#34;#{@date_users}&#34;
  end
end
</code></pre>]]></content:encoded></item><item><title>利用 argparse 写的脚本命令：测试 URL 响应时间</title><link>https://icyleaf.com/2012/08/url-request-time-test-using-python-with-argparse/</link><pubDate>Thu, 02 Aug 2012 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2012/08/url-request-time-test-using-python-with-argparse/</guid><description>
前几天看完《Python简明教程》，预想练手，想起同事的一个 ruby 代码，尝试改写成 python，顺便看看两个语言的简练程度。下面是原始的 ruby 代码：...</description><content:encoded><![CDATA[<p>前几天看完《<a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/">Python简明教程</a>》，预想练手，想起同事的一个 ruby 代码，尝试改写成 python，顺便看看两个语言的简练程度。下面是原始的 ruby 代码：</p>
<pre tabindex="0"><code>#!/usr/bin/env ruby

require &#39;rubygems&#39;
require &#39;net/http&#39;

urls = [&#34;http://icyleaf.com&#34;]
50.times do
  urls.each do |url|
    start_at = Time.now
    Net::HTTP.get URI.parse(url)
    end_at = Time.now
    diff = end_at - start_at
    if diff &lt; 0.3 then
      color_code = 32
    elsif diff &gt; 0.8 then
      color_code = 31
    else
      color_code = 33
    end
    puts &#34;#{url}\n time: \033[#{color_code}m#{diff}\033[0m seconds&#34;
  end
end
</code></pre><p>改写 python 的同时，考虑脚本的灵活性准备增加两个参数，第一个是请求测试次数，第二个是请求测试的 URL，而 python 默认提供了 <a href="http://docs.python.org/dev/library/argparse.html">argparse</a> 库，可以很方便的生成 &ndash;help 的帮助和解析传递的参数：</p>
<pre tabindex="0"><code>#!/usr/bin/env python

import urllib2
import time
import sys
import argparse

def benchmark(url, count):
	for i in range(count):
		s = time.time()
		r = urllib2.urlopen(urllib2.Request(url))
		e = time.time()
		diff = e - s

		if diff &lt; 0.3:
			color_code = 32
		elif diff &gt; 0.8:
			color_code = 31
		else:
			color_code = 33

		print &#39;# %d&#39; % (i + 1)
		print &#39;\tStauts: %s&#39; % r.getcode()
		print &#39;\tTime: \033[%dm%f\033[0m second(s)&#39; % (color_code, diff)


def main(argv):
	parser = argparse.ArgumentParser(description=&#39;url request time test&#39;)

	parser.add_argument(&#39;URL&#39;, help=&#39;request url&#39;)
	parser.add_argument(&#39;-t&#39;, &#39;--time&#39;, action=&#39;store&#39;, dest=&#39;count&#39;, type=int, default=10, help=&#39;request times&#39;)
	args = parser.parse_args(argv)

	benchmark(args.URL, args.count)


if __name__ == &#39;__main__&#39;:
	main(sys.argv[1:])
</code></pre><p>当然，我主要是为了练手 python 才去写的，ruby 本身也有 <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/optparse/rdoc/OptionParser.html">optparse</a> 库用于解析参数，但是需要自己手写生成 &ndash;help 的输出，而且需要对每个参数做相应的 callback。</p>
<p>效果如下：</p>
<p><img src="http://ww3.sinaimg.cn/large/65d1d65bgw1dvi5nsc4sdj.jpg"
  
  
  alt="screenshot"></img>
</p>
]]></content:encoded></item></channel></rss>