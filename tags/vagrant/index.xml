<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Vagrant on icyleaf</title><link>https://icyleaf.com/tags/vagrant/</link><description>Recent content in Vagrant on icyleaf</description><language>zh</language><lastBuildDate>Sat, 21 Dec 2013 12:34:56 +0800</lastBuildDate><atom:link href="https://icyleaf.com/tags/vagrant/index.xml" rel="self" type="application/rss+xml"/><item><title>学习 Ansible + Vagrant</title><link>https://icyleaf.com/2013/12/learning-ansible-and-vagrant/</link><pubDate>Sat, 21 Dec 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/12/learning-ansible-and-vagrant/</guid><description>
Vagrant 可能会让人忘记但你不应该不学 Ansible</description><content:encoded><![CDATA[<blockquote>
<p>Ansible is a radically simple IT orchestration engine that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications— automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.</p>
</blockquote>
<p>简单来说 <a href="https://github.com/ansible/ansible">Ansible</a> 是一个极简化的应用和系统部署工具，类似 <a href="https://github.com/puppetlabs/puppet">Puppet</a>、<a href="https://github.com/opscode/chef">Chef</a>、<a href="https://github.com/saltstack/salt">SaltStack</a>。由于默认使用 <code>ssh</code> 管理服务器（集群），配置文件采用 yaml 而不是某一种特定语言制定。方便至极。</p>
<p>很多人说 salt 也很用的，为什么不考虑呢，我个人觉得，ansible 的配置文件编写起来比较方便，不需要使用 <a href="http://jinja.pocoo.org/">jinja2</a> 模板引擎适合非 <code>python</code> 用户管理。而且我也较同意 &ldquo;<a href="http://missingm.co/2013/06/ansible-and-salt-a-detailed-comparison/">Ansible and Salt: A detailed comparison</a>&rdquo; 文章的评测。</p>
<p>由于个人之前没用过任何其他工具，至于你想知道上面哪些之间有什么区别的话，参见此文：<a href="http://www.infoworld.com/d/data-center/review-puppet-vs-chef-vs-ansible-vs-salt-231308?page=0,0">Review: Puppet vs. Chef vs. Ansible vs. Salt</a> 或 &ldquo;<a href="http://ttyn.me/2013/02/19/ansible_intro.html">开始使用配置和发布管理</a>&rdquo; 一文中也有提到其特性。</p>
<h1 id="安装">安装</h1>
<p>大家移步 LinuxToy 的 <a href="https://linuxtoy.org/archives/hands-on-with-ansible.html">Ansible 快速上手</a> 一文，以及 <a href="http://gogojimmy.net/2013/05/26/vagrant-tutorial/">使用Vagrant練習環境佈署</a> 作为学习铺垫，我就不再多写。这里我想重点介绍下 Ansible + Vagrant 配合使用技巧。</p>
<blockquote>
<p>其实上面 &ldquo;使用Vagrant練習環境佈署&rdquo; 提到的配置文件是 Vagrantfile config version = 1 时候的，当前 vagrant 版本是 1.4.1， Vagrantfile config version = 2，因此配置的部分已经有所变动。大家需要做下更新。</p>
</blockquote>
<p>如果你使用的是 Vagrant 1.4.0+，工具已经完全集成了上述的 DevOps 工具（甚至 Docker，另外一神器，后续看看能否给个介绍）。默认配置文件只包含了 Puppet 和 Chef，大家需要看<a href="http://docs.vagrantup.com/v2/provisioning/index.html">官方文档</a>。</p>
<p>如果你是 Mac OS 用户，可以通过 <code>brew</code> 和 <code>brew-cask</code> 命令安装：</p>
<pre tabindex="0"><code>$ brew update
$ brew install ansible
$ brew cask install vagrant
</code></pre><h1 id="创建-vagrant-实例">创建 Vagrant 实例</h1>
<p>首先创建学习目录(<code>~/src/learn_ansible</code>)和一个实例，采用 CentOS 6.5 x64 系统：</p>
<pre tabindex="0"><code>$ vagrant init centos65 https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box
</code></pre><p>下载完毕之后，编辑 <code>Vagrantfile</code> 添加如下内容：</p>
<pre tabindex="0"><code>config.vm.network :private_network, ip: &#34;33.33.33.10&#34;
config.vm.provision :ansible do |ansible|

ansible.inventory_path = &#34;ansbile/hosts&#34;
	ansible.playbook = &#34;ansbile/playbook.yml&#34;

	# 默认使用 sudo 权限
	ansible.sudo = true
	# 开启调试信息模式
	ansible.verbose = &#39;vvv&#39;
end
</code></pre><p>并在学习目录创建 <code>ansible</code> 目录以及下面两个文件，结构如下：</p>
<pre tabindex="0"><code>$ tree
.
├── Vagrantfile
└── ansible
    ├── hosts
    └── playbook.yml
1 directory, 3 files

`hosts` 文件内容，ip 地址和上面 `Vagrantfile` 设置的一致：
</code></pre><p>[webserver]
33.33.33.10</p>
<pre tabindex="0"><code>
`playbook.yml` 文件内容：
</code></pre><hr>
<h1 id="ansbile-的配置文件这里指定只作用于-webserver-服务器">ansbile 的配置文件，这里指定只作用于 webserver 服务器</h1>
<h1 id="使用-vagrant-的-sudu-权限执行任务">使用 vagrant 的 sudu 权限执行任务</h1>
<ul>
<li>hosts: webserver
user: vagrant
sudo: yes
tasks:
<h1 id="任务只有一个就是安装-nginx">任务只有一个，就是安装 nginx</h1>
<ul>
<li>name: Install Nginx
yum: name=nginx state=present</li>
</ul>
</li>
</ul>
<pre tabindex="0"><code>

# 连接 &amp; 部署

使用 Vagrant 的好处在于，它集成了这些工具，并通过 `vagrant provision` 这个命令就能连接服务器并部署。这里我想让大家学习到如何通过传统 ssh 链接 vagrant 虚拟机的方法：

从上面的配置文件我们得知，服务器的 ip 是 `33.33.33.10` 而且默认登录到虚拟机上的用户是 vagrant（密码也是用户名），链接端口是 22。我们先拷贝 ssh public key 到服务器上：
</code></pre><p>$ ssh-copy-id <a href="mailto:vagrant@33.33.33.10">vagrant@33.33.33.10</a></p>
<pre tabindex="0"><code>
完成之后，我们就可以通过下面命令测试是否配置成功：
</code></pre><p>$ ansible -u vagrant -i ansible/hosts all -m ping</p>
<p>webserver | success &raquo; {
&ldquo;changed&rdquo;: false,
&ldquo;ping&rdquo;: &ldquo;pong&rdquo;
}</p>
<pre tabindex="0"><code>
返回 `ping: pong` 即为连接成功并可以进行部署。若你之前执行了 `vagrant provision` 就会自动执行 `playbook.yml` 的内容。


今天初探就到此结束，希望通过本篇文字大家对它有个大概的了解。
</code></pre>]]></content:encoded></item></channel></rss>