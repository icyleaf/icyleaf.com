<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Virtualenv on icyleaf</title><link>https://icyleaf.com/tags/virtualenv/</link><description>Recent content in Virtualenv on icyleaf</description><language>zh-cn</language><lastBuildDate>Wed, 16 Jan 2013 12:34:56 +0800</lastBuildDate><atom:link href="https://icyleaf.com/tags/virtualenv/index.xml" rel="self" type="application/rss+xml"/><item><title>介绍 virtualenvwrapper</title><link>https://icyleaf.com/2013/01/intro-virtualenvwrapper/</link><pubDate>Wed, 16 Jan 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/01/intro-virtualenvwrapper/</guid><description>多 Python 版本环境的管理工具</description><content:encoded><![CDATA[<p>上回说到 <a href="http://icyleaf.com/2012/07/intro-virtualenv">virtualenv</a> 的基本使用，这会为了提高工作效率，再次介绍针对于它增强的一个扩展 <a href="http://www.doughellmann.com/projects/virtualenvwrapper/">virtualenvwrapper</a>。</p>
<h2 id="安装配置">安装配置</h2>
<pre tabindex="0"><code>$ pip install virtualenvwrapper
</code></pre><p>安装好之后需要简单配置下，主要是设置独立环境的保存路径：</p>
<pre tabindex="0"><code>$ export WORKON_HOME=~/Envs
$ mkdir -p $WORKON_HOME
$ source /usr/local/bin/virtualenvwrapper.sh
</code></pre><p>如果使用 oh-my-zsh 的可以开启对应的 virtualenvwrapper 插件， <code>WORKON_HOME</code> 会设置在 <code>~/.virtualenvs/</code></p>
<h2 id="常用命令">常用命令</h2>
<h1 id="查看已创建的环境">查看已创建的环境</h1>
<pre tabindex="0"><code>$ lsvirtualenv
</code></pre><h1 id="创建环境">创建环境</h1>
<pre tabindex="0"><code>$ mkvirtualenv &lt;env_name&gt;
$ mkvirtualenv -r requirements.txt &lt;env_name&gt;
</code></pre><h1 id="切换到某个环境">切换到某个环境</h1>
<pre tabindex="0"><code>$ workon &lt;env_name&gt;
</code></pre><h1 id="设置当前环境的默认工作路径下次执行-workon-命令会自动切换路径">设置当前环境的默认工作路径(下次执行 workon 命令会自动切换路径)</h1>
<pre tabindex="0"><code>(env_name) $ setvirtualenvproject
</code></pre><h1 id="查看当前环境已安装的-packages">查看当前环境已安装的 packages</h1>
<pre tabindex="0"><code>$ lssitepackages
</code></pre><h1 id="删除环境">删除环境</h1>
<pre tabindex="0"><code>$ rmvirtualenv &lt;env_name&gt;
</code></pre><h1 id="创建临时环境-deactivate-之后自动销毁">创建临时环境 (deactivate 之后自动销毁)</h1>
<pre tabindex="0"><code>$ mktmpenv
</code></pre><p>查看更详细的<a href="http://virtualenvwrapper.readthedocs.org/en/latest/command_ref.html">命令描述文档</a>。</p>
]]></content:encoded></item><item><title>初次接触 virtualenv</title><link>https://icyleaf.com/2012/07/intro-virtualenv/</link><pubDate>Fri, 27 Jul 2012 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2012/07/intro-virtualenv/</guid><description>python 的 virtualenv 功能看着类似于 Ruby 的 RVM，其实这两个东西我都没有用过，本身脚本语言用的最熟练的是 php，最近觉得 php 在处理一些多线程和终端繁琐的事情上有...</description><content:encoded><![CDATA[<p>python 的 virtualenv 功能看着类似于 Ruby 的 RVM，其实这两个东西我都没有用过，本身脚本语言用的最熟练的是 php，最近觉得 php 在处理一些多线程和终端繁琐的事情上有些局限性。决定熟悉下 python 并尝试用 django 做一个小应用。</p>
<p>由于本身 <a href="http://github.com/openparty/openparty">OpenParty</a> 的代码也是基于 django 开发的，加上最近也开始使用了 virtualenv，这样正好解决了不同项目在使用不同的环境造成的一些困扰。</p>
<p>OS X 本身已经安装了 easy_install 可以通过命令安装：</p>
<pre tabindex="0"><code>$ easy_install pip
</code></pre><p>安装好之后，可以为每个项目创建一个专属的开发环境，这个环境可以单独存放在一个目录下面，比如：</p>
<pre tabindex="0"><code>~/envs
      \
      |- env1
      |- env2
      \- env3
</code></pre><p>创建一个的纯净的开发环境:</p>
<pre tabindex="0"><code>$ virtualenv --no-site-packages &lt;env_name&gt;
</code></pre><p>进入专属的开发环境：</p>
<pre tabindex="0"><code>$ source &lt;env_name&gt;/bin/activate
</code></pre><p>你会发现 <code>(&lt;env_name&gt;)</code> 会出现在你终端提示的前面，这个时候就说明进入该环境，以后的任何和 python 相关的依赖都是在这个环境下面，和系统全局的不受任何影响。</p>
<p>比如通过快速安装项目的依赖：</p>
<pre tabindex="0"><code>(env_name)$ pip install -r requirements
</code></pre><p>下载的依赖都会存放在这个路径：</p>
<pre tabindex="0"><code>&lt;env_name&gt;/lib/python2.7/site-packages/
</code></pre><p>退出当前的开发环境：</p>
<pre tabindex="0"><code>$ deactivate
</code></pre><p>资料参考：</p>
<ol>
<li><a href="http://github.com/openparty/openparty">OpenParty README</a></li>
<li><a href="http://www.virtualenv.org/">virtualenv</a></li>
<li><a href="http://jsome.net/blog/2010/06/11/start-to-use-virtualenv">开始使用Virtualenv</a></li>
</ol>
]]></content:encoded></item></channel></rss>