<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Linux on icyleaf</title><link>https://icyleaf.com/tags/linux/</link><description>Recent content in Linux on icyleaf</description><language>zh-cn</language><lastBuildDate>Wed, 23 Aug 2023 10:04:13 +0800</lastBuildDate><atom:link href="https://icyleaf.com/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>vector + loki 实现 mosdns 数据看板</title><link>https://icyleaf.com/2023/08/using-vector-transform-mosdns-logging-to-grafana-via-loki/</link><pubDate>Wed, 23 Aug 2023 10:04:13 +0800</pubDate><guid>https://icyleaf.com/2023/08/using-vector-transform-mosdns-logging-to-grafana-via-loki/</guid><description>快速验证规则的同时实现类似 AdGuard Home 好看的数据看板</description><content:encoded><![CDATA[<p>我是从 4.0 版本开始使用 <a href="https://github.com/IrineSistiana/mosdns">mosdns</a>，经历了 4.1 和 4.2 <a href="https://github.com/IrineSistiana/mosdns/discussions/417#discussioncomment-3831982">不稳定的功能更新</a>和今年 1 月份发布 5.x 大版本重构后貌似已经稳定下来。</p>
<p>托 @<a href="https://twitter.com/river_leaves/status/1574393162163896321">river_leaves</a> 的福利用 mosdns 自带的 <a href="https://irine-sistiana.gitbook.io/mosdns-wiki/mosdns-v5/api-shuo-ming">prometheus metrics</a> 接口实时查看 DNS 解析情况。</p>
<p>配置中的规则是灵活且有时候很难调试，为了验证配置规则是否有效以及可视化看到域名访问频次，我从 mosdns 日志本身下手，需要的工具有 vector、prometheus、loki 和 grafana。</p>













  
  
    
      <figure data-pswp="2552x1204" data-size="800x"><a href="/uploads/2023/08/grafana-mosdns.png" class="gallery-item" target="_blank" data-pswp-width="2552" data-pswp-height="1204"><img src="/uploads/2023/08/grafana-mosdns_hu7b3446c2932c9a82ef05eb189f85c3c2_313540_800x0_resize_box_3.png"/></a><figcaption>

    <p>实时监控 mosdns 规则解析 Grafana 看板</p></figcaption></figure>

<blockquote>
<p>当前教程仅适用于 mosdns 5.0 ~ 5.1.3 版本（后续版本没有发布可能存在配置变化，依据实际情况调整）</p>
</blockquote>
<h2 id="mosdns">mosdns</h2>
<p>mosdns 5 版本采用了<a href="https://github.com/IrineSistiana/mosdns/discussions/584">新数据源解包格式</a>，配置我实在懒得调整了，直接在采用了 <a href="https://github.com/sbwml/luci-app-mosdns">luci-app-mosdns</a> 插件配置微调。配置中各个 plugins 名称请确保不要修改和变动，否则会导致 vector 转换规则无法正常工作。</p>
<p>看不到下面配置文件的，送上<a href="https://gist.github.com/icyleaf/e98093f673b4b2850226db582447175a#file-mosdns_config_v5-yaml">直达电梯</a>。</p>
<script type="text/javascript" src="http://gist.github.com/e98093f673b4b2850226db582447175a.js?file=mosdns_config_v5.yaml&theme=dark"></script>

<p>配置定义了 mosdns 日志的文件路径为 <code>/var/log/mosdns.log</code>，输出日志等级只需要是 INFO 即可。如果 mosdns 服务所在磁盘空间较小建议使用 logrotate 来切割日志并控制归档日志数量，以免出现空间不足的情况。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-conf" data-lang="conf"><span class="line"><span class="ln">1</span><span class="cl"><span class="err">/</span><span class="nv">var</span><span class="err">/</span><span class="nv">log</span><span class="err">/</span><span class="nv">mosdns.log</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nv">daily</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nv">rotate</span> <span class="nv">2</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nv">compress</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nv">missingok</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">  <span class="nv">notifempty</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="vector">vector</h2>
<p><a href="https://vector.dev">vector</a> 是一个日志收集工具，能够从多个源（Source）收集、转换（Transform）并推送到下一个接收器（Sinks）。</p>













  
  
    
      <figure data-pswp="1630x736" data-size="800x"><a href="/uploads/2023/08/vector-flow.png" class="gallery-item" target="_blank" data-pswp-width="1630" data-pswp-height="736"><img src="/uploads/2023/08/vector-flow_hubd01c31007c9ec336c64593db2dd6651_89209_800x0_resize_box_3.png"/></a></figure>

<p>vector 需要能够直接访问到 mosdns 的日志文件。这里有两种方式可以实现：一种是两个服务都在一台机器上运行，另外一种是通过容器化共享 volume 让 vector 可以读取 mosdns 日志。</p>
<p>工具本身是 Go 语言开发从 Github 直接下载好对应的包解压缩就能够使用或者使用一键安装脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">curl --proto <span class="s1">&#39;=https&#39;</span> --tlsv1.2 -sSf https://sh.vector.dev <span class="p">|</span> bash
</span></span></code></pre></div><p>Openwrt/Immortalwrt 用户可使用我个人维护的仓库 <a href="https://github.com/icyleaf/openwrt-dist">icyleaf/openwrt-dist</a> 添加后即可安装（支持 amd64、armv8 平台的 snapshot 和 23.05.0-rc3 两个分支）：</p>
<p>添加仓库密钥</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">wget http://cdn.jsdelivr.net/gh/icyleaf/openwrt-dist@master/key-build.pub
</span></span><span class="line"><span class="ln">2</span><span class="cl">opkg-key add key-build.pub
</span></span></code></pre></div><p>根据 openwrt 平台不同修改源地址</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 源规则</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"># src/gz icyleaf https://icyleaf-openwrt-repo.vercel.app/{{{target}}/packages/{{arch}}</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"># 添加 snapshot 分支 amd64 (x86/64) 平台的源</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;src/gz icyleaf https://icyleaf-openwrt-repo.vercel.app/snapshosts/packages/x86/64&#34;</span> &gt;&gt; /etc/opkg/customfeeds.conf
</span></span></code></pre></div><p>安装 vector</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">opkg update
</span></span><span class="line"><span class="ln">2</span><span class="cl">opkg install vector
</span></span></code></pre></div><p>修改 <code>/etc/vector/config.yml</code> 的配置文件如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">data_dir</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/vector</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="w"></span><span class="nt">sources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="w">  </span><span class="nt">mosdns-log-file</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">file</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="w">    </span><span class="nt">include</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="w">      </span>- <span class="l">/var/log/mosdns.log</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="w">    </span><span class="nt">read_from</span><span class="p">:</span><span class="w"> </span><span class="l">beginning</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="w"></span><span class="nt">transforms</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="w">  </span><span class="nt">mosdns-input</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">filter</span><span class="w">
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="w">    </span><span class="nt">inputs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="w">      </span>- <span class="l">mosdns-log-file</span><span class="w">
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="w">    </span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="sd">      .file == &#34;/var/log/mosdns.log&#34;</span><span class="w">      
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="w">  </span><span class="nt">mosdns-data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">remap</span><span class="w">
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="w">    </span><span class="nt">inputs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="w">      </span>- <span class="l">mosdns-input</span><span class="w">
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="w">    </span><span class="nt">drop_on_error</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="w">    </span><span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="sd">      .type = &#34;mosdns&#34;
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="sd">      .app = &#34;mosdns&#34;
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="sd">      del(.host)
</span></span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="sd">      del(.file)
</span></span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="sd">      del(.source_type)
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="sd">      message_parts = split!(.message, r&#39;\t&#39;)
</span></span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="sd">      .timestamp = parse_timestamp!(message_parts[0], format: &#34;%FT%T%.9fZ&#34;)
</span></span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="sd">      .level = message_parts[1]
</span></span></span><span class="line"><span class="ln">34</span><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="sd">      if (length(message_parts) == 6) {
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="sd">        .plugin = message_parts[2]
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="sd">        .processor = message_parts[3]
</span></span></span><span class="line"><span class="ln">38</span><span class="cl"><span class="sd">        .message = message_parts[4]
</span></span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="ln">40</span><span class="cl"><span class="sd">        if (exists(message_parts[5])) {
</span></span></span><span class="line"><span class="ln">41</span><span class="cl"><span class="sd">          .metadata = parse_json!(message_parts[5])
</span></span></span><span class="line"><span class="ln">42</span><span class="cl"><span class="sd">          . = merge!(., .metadata)
</span></span></span><span class="line"><span class="ln">43</span><span class="cl"><span class="sd">          del(.metadata)
</span></span></span><span class="line"><span class="ln">44</span><span class="cl"><span class="sd">        }
</span></span></span><span class="line"><span class="ln">45</span><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="ln">46</span><span class="cl"><span class="sd">        .processor = message_parts[2]
</span></span></span><span class="line"><span class="ln">47</span><span class="cl"><span class="sd">        .message = message_parts[3]
</span></span></span><span class="line"><span class="ln">48</span><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="ln">49</span><span class="cl"><span class="sd">        if (exists(message_parts[4])) {
</span></span></span><span class="line"><span class="ln">50</span><span class="cl"><span class="sd">          .metadata = parse_json!(message_parts[4])
</span></span></span><span class="line"><span class="ln">51</span><span class="cl"><span class="sd">          . = merge!(., .metadata)
</span></span></span><span class="line"><span class="ln">52</span><span class="cl"><span class="sd">          del(.metadata)
</span></span></span><span class="line"><span class="ln">53</span><span class="cl"><span class="sd">        }
</span></span></span><span class="line"><span class="ln">54</span><span class="cl"><span class="sd">      }
</span></span></span><span class="line"><span class="ln">55</span><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="ln">56</span><span class="cl"><span class="sd">      if (exists(.query)) {
</span></span></span><span class="line"><span class="ln">57</span><span class="cl"><span class="sd">        query_parts = split!(.query, r&#39;\s&#39;)
</span></span></span><span class="line"><span class="ln">58</span><span class="cl"><span class="sd">        .domain = query_parts[0]
</span></span></span><span class="line"><span class="ln">59</span><span class="cl"><span class="sd">        .record = query_parts[2]
</span></span></span><span class="line"><span class="ln">60</span><span class="cl"><span class="sd">        .address = query_parts[5]
</span></span></span><span class="line"><span class="ln">61</span><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="ln">62</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln">63</span><span class="cl"><span class="w"></span><span class="nt">sinks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">64</span><span class="cl"><span class="w">  </span><span class="c"># 同步到 loki，根据实际情况修改 endpoint 的值</span><span class="w">
</span></span></span><span class="line"><span class="ln">65</span><span class="cl"><span class="w">  </span><span class="nt">loki</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">66</span><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="ln">67</span><span class="cl"><span class="w">    </span><span class="nt">inputs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">68</span><span class="cl"><span class="w">      </span>- <span class="l">mosdns-data</span><span class="w">
</span></span></span><span class="line"><span class="ln">69</span><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;http://10.10.10.2:3100&#39;</span><span class="w">
</span></span></span><span class="line"><span class="ln">70</span><span class="cl"><span class="w">    </span><span class="nt">encoding</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">71</span><span class="cl"><span class="w">      </span><span class="nt">codec</span><span class="p">:</span><span class="w"> </span><span class="l">json</span><span class="w">
</span></span></span><span class="line"><span class="ln">72</span><span class="cl"><span class="w">    </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">73</span><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ app }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="ln">74</span><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ type }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="ln">75</span><span class="cl"><span class="w">    </span><span class="nt">healthcheck</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">76</span><span class="cl"><span class="w">      </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="ln">77</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln">78</span><span class="cl"><span class="w">  </span><span class="c"># 临时输出转换数据到 vector 控制台（生产环境请禁用）</span><span class="w">
</span></span></span><span class="line"><span class="ln">79</span><span class="cl"><span class="w">  </span><span class="nt">debug_mosdns</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">80</span><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">console</span><span class="w">
</span></span></span><span class="line"><span class="ln">81</span><span class="cl"><span class="w">    </span><span class="nt">inputs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">82</span><span class="cl"><span class="w">      </span>- <span class="l">mosdns-data</span><span class="w">
</span></span></span><span class="line"><span class="ln">83</span><span class="cl"><span class="w">    </span><span class="nt">encoding</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">84</span><span class="cl"><span class="w">      </span><span class="nt">codec</span><span class="p">:</span><span class="w"> </span><span class="l">json</span><span class="w">
</span></span></span></code></pre></div><p>运行 vector 服务（部署好 loki 后再运行）</p>
<p>非 openwrt 用户使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vector --config /etc/vector/config.yml --watch-config --verbose
</span></span></code></pre></div><p>openwrt 用户使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ /etc/init.d/vector start
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">Loaded with warnings <span class="o">[</span><span class="s2">&#34;/etc/vector/config.yml&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">-----------------------------------------------
</span></span><span class="line"><span class="ln">5</span><span class="cl">√ Component configuration
</span></span><span class="line"><span class="ln">6</span><span class="cl">√ Health check <span class="s2">&#34;loki&#34;</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">√ Health check <span class="s2">&#34;vector&#34;</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">-----------------------------------------------
</span></span><span class="line"><span class="ln">9</span><span class="cl">                                      Validated
</span></span></code></pre></div><p>使用 openwrt 插件的 vector 服务本身是会监控配置文件变化并重载，后面再调整的时候也不需要反复重启服务。</p>
<h2 id="prometheus">prometheus</h2>
<p><a href="https://prometheus.io/">prometheus</a> 是一个监控数据服务，可以作为 Grafana 数据源使用。安装参考<a href="https://prometheus.io/docs/prometheus/latest/installation/">官方教程</a>，配置文件需要把 mosdns metrics 地址（比如是 10.10.10.1:8338）加到 <code>prometheus.yml</code> 文件中:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="ln"> 1</span><span class="cl">global:
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  scrape_interval:     1m
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  evaluation_interval: 1m
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">scrape_configs:
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="gi">+  - job_name: mosdns
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="gi">+    scrape_interval: 5s
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="gi">+    # scrape_timeout: 10s
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="gi">+    # metrics_path: /metrics
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="gi">+    static_configs:
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="gi">+      - targets:
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="gi">+        - 10.10.10.1:8338
</span></span></span></code></pre></div><h2 id="loki">loki</h2>
<p><a href="https://grafana.com/oss/loki/">loki</a> 是一个日志聚合服务，本身也是 Grafana 研发的，可以作为 Grafana 数据源使用。参照<a href="https://grafana.com/docs/loki/latest/installation/docker/">官方文档</a>就能部署好 loki 和 Grafana，唯一需要注意的是要提前下载好 loki <a href="https://raw.githubusercontent.com/grafana/loki/v2.8.0/cmd/loki/loki-local-config.yaml">配置文件</a>。部署好之后把 loki 地址更新到上面 vector 配置。</p>
<h2 id="grafana">grafana</h2>
<p><a href="https://grafana.com/">grafana</a> 是一个数据可视化工具，安装见 loki 部分，已有服务直接跳过。</p>
<p>Dashboard 看板的配置就非常简单了，先添加好 prometheus 和 loki 的数据源后，导入 <a href="https://grafana.com/grafana/dashboards/19305-mosdns-v5/">mosdns v5 看板</a>，按照图示配置即可。</p>













  
  
    
      <figure data-pswp="1804x800" data-size="800x"><a href="/uploads/2023/08/import-grafana-dashboard.png" class="gallery-item" target="_blank" data-pswp-width="1804" data-pswp-height="800"><img src="/uploads/2023/08/import-grafana-dashboard_hub624a0be8631d27cc91142a38cc5db9b_78770_800x0_resize_box_3.png"/></a><figcaption>

    <p>Grafana 导入 Dashboard 看板</p></figcaption></figure>














  
  
    
      <figure data-pswp="2138x1306" data-size="800x"><a href="/uploads/2023/08/configure-grafana-database.png" class="gallery-item" target="_blank" data-pswp-width="2138" data-pswp-height="1306"><img src="/uploads/2023/08/configure-grafana-database_hu1e22fd61c3dc8671eabbbb90328e1589_111606_800x0_resize_box_3.png"/></a><figcaption>

    <p>Grafana 配置数据源</p></figcaption></figure>

<h2 id="结语">结语</h2>
<p>感谢 mosdns 长达几个月的配置稳定之前挖的坑填上了，撒花！</p>
]]></content:encoded></item><item><title>如何搭建家用 homelab: 数据存储</title><link>https://icyleaf.com/2023/07/how-to-homelab-part-3-storages/</link><pubDate>Mon, 24 Jul 2023 10:30:25 +0800</pubDate><guid>https://icyleaf.com/2023/07/how-to-homelab-part-3-storages/</guid><description>如果你想部署任何一个服务，你都需要存储一些数据</description><content:encoded><![CDATA[












  
  
    
      <figure data-pswp="1280x1707" data-size="800x"><a href="/tutorials/how-to-homelab/storages/hp-micro-gen8.jpeg" class="gallery-item" target="_blank" data-pswp-width="1280" data-pswp-height="1707"><img src="/tutorials/how-to-homelab/storages/hp-micro-gen8_hu08300d076dd4851218d95fd3c3a735cf_375638_800x0_resize_q75_box.jpeg"/></a><figcaption>

    <p>我的 NAS 服务器</p></figcaption></figure>

<p>当你有些照片、视频需要存放时；或跑一些无状态的应用或服务时；或同步转存某网云的文件时，这些数据是不是都要保存起来，这就是数据存储。本篇的内容都是从各方面浅尝辄止的介绍，每个部分展开讲都是很大的篇幅，能力有限，大家多多理解。</p>
<h2 id="存储介质">存储介质</h2>
<p>存储介质只从硬盘考虑，无论是 HDD 机械硬盘还是 SSD 固态硬盘在适合的场合都是不错的选择。</p>
<h3 id="hdd-机械硬盘">HDD 机械硬盘</h3>
<p>HDD 全称是 Hard Disk Drive，采用纯机械结构，数据存储在一张环形的磁性盘片上，通过磁头持续移动来读取数据或写入数据（有点类似胶片机）</p>













  
  
    
      <figure data-pswp="2370x1580" data-size="800x"><a href="https://images.unsplash.com/photo-1597852074816-d933c7d2b988?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=2370&amp;q=80" class="gallery-item" target="_blank" data-pswp-width="2370" data-pswp-height="1580"><img src="/photo-1597852074816-d933c7d2b988_18431204067559107571_hu3d03a01dcc18bc5be0e67db3d8d209a6_0_800x0_resize_q75_box.jpg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://unsplash.com/photos/GNyjCePVRs8">benjamin lehman</a>
    </p>

    <p>HDD 机械硬盘的内部结构</p></figcaption></figure>

<p>HDD 硬盘优点是存储容量大、价格便宜，缺点是容易损坏且噪音较大。为了突破更大的容量限制，硬盘厂商也在从各种科技层面持续改进诞生了 12T+ 大容量硬盘。</p>
<p>读写速度受转速、磁盘数量等因素影响。转速是指硬盘每分钟旋转的圈数，单位是 rpm（每分钟的转动数），常见的有 5400rpm 和 7200rpm 规格。一般来讲转速越高读写速度越好，但噪音、耗电量和发热量也越高；单个磁盘容量是有上限的，想要更大容量最简单的方案是增加更多磁性盘片。</p>













  
  
    
      <figure data-pswp="678x452" data-size="800x"><a href="/tutorials/how-to-homelab/storages/9-platter-Ultrastar-18TB-HDD.jpeg" class="gallery-item" target="_blank" data-pswp-width="678" data-pswp-height="452"><img src="/tutorials/how-to-homelab/storages/9-platter-Ultrastar-18TB-HDD_hu8c4058ea039e3d4b31b8a5d177eba626_61808_800x0_resize_q75_box.jpeg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://www.anandtech.com/show/17097/western-digital-30tb-hdd-plans-mamr-future-unclear">anandtech</a>
    </p>

    <p>HDD 多磁盘</p></figcaption></figure>

<p>多磁盘的出现就要引出 CMR/PMR 垂直磁记录（垂直盘）和 SMR 叠瓦磁记录（叠瓦盘）两个概念，传统机械硬盘都属于前者， 2013 年希捷发布了可以提高存储容量高出 25% 的 SMR 磁盘，但由于读取寻址复杂，写入影响之前的数据，现在非常不受大家欢迎。</p>
<p>硬盘厂商现在出售的 HDD 硬盘会两种混合出货，现在购买尽可能考虑 CMR/PMR 垂直盘。</p>













  
  
    
      <figure data-pswp="1200x628" data-size="800x"><a href="/tutorials/how-to-homelab/storages/pmr-vs-cmr.jpeg" class="gallery-item" target="_blank" data-pswp-width="1200" data-pswp-height="628"><img src="/tutorials/how-to-homelab/storages/pmr-vs-cmr_hud0c1f5384c508937af3c94c29a26ec0a_82125_800x0_resize_q75_box.jpeg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://www.buffalotech.com/blog/cmr-vs-smr-hard-drives-in-network-attached-storage-nas">buffalotech</a>
    </p>

    <p>CMR/PMR 和 SMR 磁盘结构对比</p></figcaption></figure>

<h3 id="ssd-固态硬盘">SSD 固态硬盘</h3>
<p>SSD 全称是 Solid-state Drive，采用纯 NAND 存储芯片来减少损坏和提升高读写的速度，因为制造工艺复杂且芯片厂家较少目前价格还处于一个有竞争力的市场上，随着国内厂商的研发速度逐渐提升，从价格方面收益的还是广大的消费者的我们。</p>













  
  
    
      <figure data-pswp="500x336" data-size="800x"><a href="/tutorials/how-to-homelab/storages/ssd-nand.png" class="gallery-item" target="_blank" data-pswp-width="500" data-pswp-height="336"><img src="/tutorials/how-to-homelab/storages/ssd-nand_hu5d0c900d7b459cda8ce02a2906f9a8d5_267481_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://www.advantech.com/pt-br/resources/news/choosing-the-right-ssd-technology-for-expanding-embedded-application-requirements">advantech</a>
    </p>

    <p>SSD 固态硬盘内部结构</p></figcaption></figure>

<p>这种硬盘的特点是新技术的魅力：拥有超高速的读写速度，使用时不会担心晃动造成的硬盘损坏。但存储容量同样也是有单个或多个 NAND 芯片构成，但不会像机械硬盘那么大，4 TB 已经是很大的容量了。</p>
<p>读写速度受芯片的工艺、良品率和有无额外硬件外部缓存芯片等因素影响，在深入就不懂了，摘部分<a href="https://zh.wikipedia.org/wiki/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98">维基百科</a>的介绍，有兴趣的自己再查吧。</p>
<blockquote>
<p>目前用来生产固态硬盘的 NAND Flash 有四种，分别是单层式存储（SLC）、多层式存储（MLC，通常用来指称双层式存储）、三层式存储（TLC）、四层式存储（QLC）。有些厂商亦称 TLC 为 3-bit MLC。</p>
<p>SLC、MLC、TLC 的读写速度依序从快至慢（约4:2:1），使用寿命依序从长至短（约 6:3:2），成本依序从高至低，需要纠错比特数（ECC）则是相反地从低至高（同一制程下 1:2:4。不过 ECC 也受制程的影响，同一种芯片，越小尺度的制程需要越多的纠错比特）。固态硬盘的主流从 SLC 芯片转到 MLC 芯片，促成了 2011 年的大降价，固态硬盘因此普及。</p>
</blockquote>
<h2 id="接口类型">接口类型</h2>
<h3 id="sata">SATA</h3>













  
  
    
      <figure data-pswp="1024x570" data-size="800x"><a href="/tutorials/how-to-homelab/storages/sata-drive-data-and-power-connectors.jpg" class="gallery-item" target="_blank" data-pswp-width="1024" data-pswp-height="570"><img src="/tutorials/how-to-homelab/storages/sata-drive-data-and-power-connectors_hu3aad2e9a46a87b83e8838aea6c2c29e0_250158_800x0_resize_q75_box.jpg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://en.wikipedia.org/wiki/SATA">wikipedia</a>
    </p>

    <p>SATA 电源接口（左）及数据接口（右）</p></figcaption></figure>

<p>早期 ATA 的串口改进版，SATA 规格的硬盘有 HDD 和 SSD 两种。其优点是抗干扰性强，线材细小且有较高的传输速度等原因一直沿用至今，现在已经成为主流的接口类型。最新的 SATA 3.0 标准能够达到 600 MiB/s 传输速度（6 Gbit/s 带宽）。</p>
<h3 id="m2-ngff">M.2 (NGFF)</h3>













  
  
    
      <figure data-pswp="1739x1686" data-size="800x"><a href="/tutorials/how-to-homelab/storages/m2-keys-mean.png" class="gallery-item" target="_blank" data-pswp-width="1739" data-pswp-height="1686"><img src="/tutorials/how-to-homelab/storages/m2-keys-mean_huc254688dfed818ed5e7aae2c8217656b_820735_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://www.delock.de/infothek/M.2/M.2_e.html">delock</a>
    </p>

    <p>M.2 接口图解</p></figcaption></figure>

<p>M.2 原本的名称是 NGFF（Next Generation Form Factor），本来是用于取代 mSATA 为了兼容早期硬件设计层面有 USB 规格、SATA 规格和 PCIE 规格，它们的传输速度依次递增。使用 PCIE 通道的往往又被叫做 NVMe。</p>
<h3 id="msata">mSATA</h3>













  
  
    
      <figure data-pswp="960x779" data-size="800x"><a href="/tutorials/how-to-homelab/storages/m2-vs-msata.png" class="gallery-item" target="_blank" data-pswp-width="960" data-pswp-height="779"><img src="/tutorials/how-to-homelab/storages/m2-vs-msata_hu5cb2de0bbb3d3c003359644821693a50_513877_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://www.reddit.com/r/gpdwin/comments/80ial8/psa_dont_buy_msata_gpd_win_2_only_supports_m2_sata/">r/gpdwin</a>
    </p>

    <p>M.2 和 mSATA 对比</p></figcaption></figure>

<p>一些国内工控机上还长能见到 mSATA 硬盘接口，它也遵循 SATA 协议只不过是采用的更小的接口的 SSD 硬盘，常用在小型化笔记本上，由于较小的体积优势特别适合放在工控机，虽然它的尺寸规格和 M.2 接口一样但接口协议是不一样的，无法兼容。</p>
<h3 id="usb">USB</h3>













  
  
    
      <figure data-pswp="1578x620" data-size="800x"><a href="/tutorials/how-to-homelab/storages/usb-speed.png" class="gallery-item" target="_blank" data-pswp-width="1578" data-pswp-height="620"><img src="/tutorials/how-to-homelab/storages/usb-speed_huaa694c20c5931d50dbd8bbb4bd9a6cd2_128318_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://zh.wikipedia.org/wiki/USB">wikipedia</a>
    </p>

    <p>USB 3.x 标准</p></figcaption></figure>

<p>USB 硬盘还有另外一个更熟悉的名称：移动硬盘。常用在电脑本身空间不足，各类较大资源的存储或者摄影、影视行业作为临时存储使用等场景。有些开发板（比如早期树莓派）无法提供更多的存储接口而往往会提供 USB 3.0 接口，在做一些非高频的读写应用场景也是能够满足需求的。只需要记着至少满足 USB 3.0 标准（能够达到 400 MiB/s 传输速度），3.1 标准最好（1.2 GiB/s 传输速度）。</p>
<p>连接接口方面我已经不想吐槽了，尤其是 Type-C 接口，针脚定义的是全的，厂商为了成本考虑，卖的便宜的线往往只能满足充电需求，没有数据传输针脚；有的虽然只需要充电考虑，也会漏一些针脚无法满足高功率（30-100W）的充电标准（高功率需要额外的 e-mark 芯片）；有点可能不支持 DP，HDMI 视频信号；绝大多数不支持雷雳/雷电/Thunderbolt 4 协议（需 Intel 认证），满满的坑，买的时候一点要看仔细，问清楚。</p>













  
  
    
      <figure data-pswp="2080x796" data-size="800x"><a href="/tutorials/how-to-homelab/storages/usb-type-list.png" class="gallery-item" target="_blank" data-pswp-width="2080" data-pswp-height="796"><img src="/tutorials/how-to-homelab/storages/usb-type-list_hu12d0823745cb40b0572b948e6f316d6f_190806_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://zh.wikipedia.org/wiki/USB">wikipedia</a>
    </p>

    <p>USB 连接接口</p></figcaption></figure>

<h2 id="尺寸规格">尺寸规格</h2>
<h3 id="sata-方面">SATA 方面</h3>













  
  
    
      <figure data-pswp="1955x956" data-size="800x"><a href="/tutorials/how-to-homelab/storages/hard-drive-size.png" class="gallery-item" target="_blank" data-pswp-width="1955" data-pswp-height="956"><img src="/tutorials/how-to-homelab/storages/hard-drive-size_hu9ec337cc31c93e85754929476e3a4128_882699_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://www.delock.de/infothek/M.2/M.2_e.html">delock</a>
    </p>

    <p>硬盘尺寸大小</p></figcaption></figure>

<p>常见的主要有 2.5 寸和 3.5 寸两种规格。2.5 寸 HDD 和 SSD 两种都会有，3.5 寸基本上全是 HDD 硬盘，SSD 容量都是芯片颗粒不会占太大体积没必要。</p>
<h3 id="m2-ngff-方面">M.2 (NGFF) 方面</h3>













  
  
    
      <figure data-pswp="1750x710" data-size="800x"><a href="/tutorials/how-to-homelab/storages/m2-size.png" class="gallery-item" target="_blank" data-pswp-width="1750" data-pswp-height="710"><img src="/tutorials/how-to-homelab/storages/m2-size_huc53523f3091dfc6eed4f6987160581b9_187121_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://www.delock.de/infothek/M.2/M.2_e.html">delock</a>
    </p>

    <p>M.2 尺寸</p></figcaption></figure>

<h2 id="磁盘寿命">磁盘寿命</h2>
<p>任何的硬盘厂商都会给硬盘一个保质期外还会有一个额外的评判条件来做参考，对于 HDD 硬盘是平均无故障工作时间 MTBF（小时为单位）；对于 SSD 硬盘是最大写入量（TBW 为单位）。两者的监控都可以通过支持 <a href="https://zh.wikipedia.org/wiki/S.M.A.R.T.">S.M.A.R.T</a> 的任何应用完成。</p>













  
  
    
      <figure data-pswp="2234x2152" data-size="800x"><a href="/tutorials/how-to-homelab/storages/wd-red-plus-specs.png" class="gallery-item" target="_blank" data-pswp-width="2234" data-pswp-height="2152"><img src="/tutorials/how-to-homelab/storages/wd-red-plus-specs_huf1ac4b76ccf55624adb740a9768a90d1_387774_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://documents.westerndigital.com/content/dam/doc-library/zh_cn/assets/public/western-digital/product/internal-drives/wd-red-plus-hdd/product-brief-western-digital-wd-red-plus-hdd.pdf">西部数据</a>
    </p>

    <p>西数红盘的产品简介</p></figcaption></figure>

<p>HDD 受机械结构的影响，很容易因为振动过大，写入时突然掉电出现坏道，少量的坏道可以通过磁盘检测和修复工具可以规避，随着磁盘坏道越来越多赶紧备份并替换新的磁盘的好。虽然评判标准是平均无故障工作时间，然而在实验室恒定条件下机械硬盘能够无故障工作几万甚至几十万小时，实际上要看 S.M.A.R.T 检测报告的情况。</p>













  
  
    
      <figure data-pswp="650x433" data-size="800x"><a href="/tutorials/how-to-homelab/storages/hard-disk-platter-damanged.jpeg" class="gallery-item" target="_blank" data-pswp-width="650" data-pswp-height="433"><img src="/tutorials/how-to-homelab/storages/hard-disk-platter-damanged_hu4c6ef5214192bb236a1ec4747347c046_86500_800x0_resize_q75_box.jpeg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://blocksandfiles.com/2019/07/12/the-reasons-disk-drives-fail/">blocks&amp;files</a>
    </p>

    <p>磁盘坏道</p></figcaption></figure>

<p>SSD 最大 TPW 值通常都会商品参数之中找到，实际写入 TBW 可以在 S.M.A.R.T 检测报告找到：</p>
<ul>
<li>SATA 的 SSD 计算公式：
<blockquote>
<p><code>Total_LBAs_Written * Sector Size / 1024^4 = TBW</code></p>
</blockquote>
</li>
<li>NVME 的 SSD 计算公式：
<blockquote>
<p><code>Data Units Written = TBW</code></p>
</blockquote>
</li>
</ul>
<p>硬盘的门道多坑也多，有了大概了解真要买的话也别太过于担心，我们可以站在巨人的肩膀：<a href="https://www.backblaze.com/">Backblaze</a></p>
<p>该公司他们会采购不同容量，不同品牌，SSD 和 HDD 硬盘作为生产环境用于提供商业服务：类似亚马逊 S3 云存储、价格低廉的数据备份服务，每年都会布季度和年度的硬盘统计报告。</p>
<p>硬盘统计报告：<a href="https://www.backblaze.com/cloud-storage/resources/hard-drive-test-data">https://www.backblaze.com/cloud-storage/resources/hard-drive-test-data</a></p>













  
  
    
      <figure data-pswp="670x690" data-size="800x"><a href="/tutorials/how-to-homelab/storages/b2-drive-survival-chart-extended.jpg" class="gallery-item" target="_blank" data-pswp-width="670" data-pswp-height="690"><img src="/tutorials/how-to-homelab/storages/b2-drive-survival-chart-extended_hua67f88eccd5388ba1c4cd9818bc3d6a3_91387_800x0_resize_q75_box.jpg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://www.backblaze.com/blog/how-long-do-disk-drives-last/">Backblaze</a>
    </p>

    <p>Backblaze 2021 年 9 月超长期磁盘寿命统计表</p></figcaption></figure>

<p>根据他们在 2021 年 12 月发布的磁盘使用寿命有多长的报告来看，中位数是在六年零九个月左右，这个时间是他们的使用场景的结果，家用肯定会更长。我现在服役最长的 HDD 是 10 年前，前不久有些坏道过多的 12 年 2.5 寸 5400rpm HDD 磁盘退役了。</p>













  
  
    
      <figure data-pswp="2252x336" data-size="800x"><a href="/tutorials/how-to-homelab/storages/ten-years-old-hdd.png" class="gallery-item" target="_blank" data-pswp-width="2252" data-pswp-height="336"><img src="/tutorials/how-to-homelab/storages/ten-years-old-hdd_hu87688ff9891c61d39f1066243f7dc82e_99745_800x0_resize_box_3.png"/></a><figcaption>

    <p>超长时间的 HDD</p></figcaption></figure>

<h2 id="存储协议">存储协议</h2>
<p>说完了硬件部分，我们在来聊聊软件部分，在不考虑数据的文件系统的选购上来说，文件共享有 DAS、NAS 和 SAN 划分：</p>
<ul>
<li>DAS 全称是 Direct Access Storage 即本地直连存储</li>
<li>NAS 全称是 Network Attached Storage 即网络连接存储</li>
<li>SAN 全称是 Storage Area Network 即存储区域网络</li>
</ul>













  
  
    
      <figure data-pswp="860x657" data-size="800x"><a href="/tutorials/how-to-homelab/storages/das-nas-san.png" class="gallery-item" target="_blank" data-pswp-width="860" data-pswp-height="657"><img src="/tutorials/how-to-homelab/storages/das-nas-san_hu07252d7b79b27c7e8ac194d6a7c4773e_204231_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://walker-a.com/archives/4522">挨踢路人甲</a>
    </p>

    <p>DAS vs NAS vs SAN</p></figcaption></figure>

<p>手机、电脑、服务器等电子设备自带的存储就是 DAS；</p>
<p>微软的 SMB/CIFS，*nux 的 NFS 和苹果的 AFP 等都属于 NAS；</p>
<p>前两个都很容易理解，SAN 的区别在于存储还是多节点应用服务器上，通过统一服务来做资源管理，比较常见的是 iSCSI。</p>













  
  
    
      <figure data-pswp="3017x1533" data-size="800x"><a href="/tutorials/how-to-homelab/storages/san-network.png" class="gallery-item" target="_blank" data-pswp-width="3017" data-pswp-height="1533"><img src="/tutorials/how-to-homelab/storages/san-network_huf0f94d8372b6524ce2882fcfb70f2ced_57931_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://walker-a.com/archives/4522">挨踢路人甲</a>
    </p>

    <p>SAN 网络工作原理</p></figcaption></figure>

<h3 id="afp">AFP</h3>
<p>Apple 专有协议，Linux 虽然还有 <a href="https://netatalk.sourceforge.io/">netatalk</a> AFP 开源实现，仅可用在 macOS 挂载远程磁盘使用，很多的服务本身是不支持的，homelab 层面完全不用考虑。</p>
<h3 id="smb">SMB</h3>
<p>SMB 协议常用在 Windows 系统之间的文件共享，也称之为 CIFS。在 Linux 可以通过安装 Samba 开源实现。不过基于用户身份鉴权和本身设计上有缺陷的原因并不能很好的在 homelab 中发挥最大的性能，可以使用但不太推荐，建议使用 SMB 3.0 及以上版本。</p>
<h3 id="nfs">NFS</h3>
<p>NFS 协议常用在 *nux 系统之间的文件共享。基于 IP 地址/地址段鉴权，配置简单可以很轻松上手，在 homelab 初期非常适合，建议使用 NFS 4.0 及以上版本。随着应用对存储服务的依赖越来越多，也会遇到 NFS 速度较慢，存在争用、分布式锁、单点服务等瓶颈。就会慢慢转向多集群分布且适合 homelab 尤其是 Kubernetes 的块存储服务。</p>
<h3 id="iscsi">iSCSI</h3>
<p>SCSI 本身是一个支持热插拔的企业级硬盘的商业常用的硬件接口，前面加一个小 i 摇身一变成了一种网络文件共享协议来仿真模拟 SCSI 协议，基于块存储的特性让文件共享具有较高 IO 吞吐量也能够游刃有余。</p>
<h2 id="存储系统">存储系统</h2>
<p>存储系统的目的是实现核心存储数据的基础上提供文件共享，管理和其他扩展功能。通常情况下上面提到的 SMB 和 NFS 协议都属于内置的文件共享功能，iSCSI 只有部分系统内置支持。</p>
<h3 id="群晖">群晖</h3>
<p>用户受众最大的可能就是<a href="https://www.synology.cn/zh-cn">群晖</a>机器，基本上大家入手的第一台 NAS 就可能是它，配置简单的话可以很轻松上手。</p>













  
  
    
      <figure data-pswp="900x600" data-size="800x"><a href="/tutorials/how-to-homelab/storages/synology-name-rule.jpeg" class="gallery-item" target="_blank" data-pswp-width="900" data-pswp-height="600"><img src="/tutorials/how-to-homelab/storages/synology-name-rule_hu0b4b0fdb7df205aebd42a3da912c90bb_134591_800x0_resize_q75_box.jpeg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="http://www.ptyqm.com/24518.html">PT邀请码</a>
    </p>

    <p>群晖型号命名规则</p></figcaption></figure>

<p>群晖底层是 Linux 系统，它的软件生态体系是完善的，因此价格较贵，硬件通常都不是特别好，官方提供的<a href="https://www.synology.cn/zh-cn/support/nas_selector">场景预估工具</a>很容易找到对应的机型，建议懂硬件的可以再看看其 <a href="https://kb.synology.com/zh-hk/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have">CPU 和内存规格</a>是否满足。</p>
<h3 id="unraid">Unraid</h3>
<p><a href="https://unraid.net/product">Unraid</a> 这两年开始流行的新型虚拟化 NAS 系统，从名字就能看出来是不支持硬件 raid 阵列，底层是 slackware 系统。系统核心主打虚拟化平台，最有趣的是在他们官网的用户案例最显著的分别列的是 Minecraft 自建服务器、游戏服务器、密码管理和备份服务，反而 NFS 服务端、数据存储成了附加功能，也怪不得它们的 Slogan 是 &ldquo;More Than a NAS OS&rdquo;。</p>
<p>截至 2023 年 07 月 21 日为止，他们的付费策略如下所示：</p>
<table>
<thead>
<tr>
<th>套餐</th>
<th>价格</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Basic</td>
<td>$59</td>
<td>6 盘位</td>
</tr>
<tr>
<td>Plus</td>
<td>$89</td>
<td>12 盘位</td>
</tr>
<tr>
<td>Pro</td>
<td>$129</td>
<td>无限盘位</td>
</tr>
</tbody>
</table>
<p>2022 年官方有过一次 5 折的优惠活动，不着急的可以等等看，2023 年的现在官网有一个 85 折的 <a href="https://unraid.net/summer-sale">23 夏日特卖</a>，优惠码：<code>SUMMER23</code> （不是广告）</p>
<h3 id="truenas">TrueNAS</h3>
<p><a href="https://www.truenas.com/">TrueNAS</a> 一直都是 NAS 开源项目标杆级的存在，前身叫 FreeNAS，基于 ZFS 特性创建的数据池可以保证数据的高可用和数据安全。提供商业版和免费版，免费版有划分为 Core 和 Scale。Core 是基础版提供最核心的数据存储功能，底层是 FreeBAS 系统；Scale 额外提供虚拟化功能，底层是 Debian 系统，无论是那种硬件要求都较高，尤其是内存，最低硬件要求：</p>
<ul>
<li>CPU: 双核 64位 Intel 或 AMD 处理器</li>
<li>内存: 8 GB</li>
<li>启动盘: 16 GB 系统盘</li>
<li>存储池: 两块容量相同的磁盘组成存储池</li>
</ul>
<p>ZFS 组 Raid 数据池支持 Z1/Z2/Z3，创建数据池时推荐使用 <a href="https://wintelguy.com/zfs-calc.pl">ZFS RAIDZ 计算器</a>。</p>
<h3 id="rockstor">Rockstor</h3>
<p><a href="https://rockstor.com/">Rockstor</a> 也是一个类似 TreeNAS 的开源系统，也是唯一一个基于 BTRFS 文件系统作为数据池的数据存储服务，充分利用 BTRFS 特性在数据管理、数据备份、数据快照上有全方面的功能支持。底层是 openSUSE 系统，除了刚开始配置管理和 CLI 工具上有点不太适应以外，服务管理还基本一致。另外我非常喜欢的一点是除了 x86 架构，还支持 ARM64 和树莓派 4 开发板，硬件要求也比较低：</p>
<ul>
<li>CPU: 任意 64 位 Intel/AMD 处理器或 ARM64 A53 处理器（双核 i3 或 A72+ 更佳）</li>
<li>内存: 2 GB（4 GB 更佳）</li>
<li>启动盘: 16 GB 系统盘（32GB 更佳）</li>
<li>存储池: 至少一块额外硬盘（按需分配）</li>
</ul>
<p>我在 Proxmox 以 VM 的形式跑了半年，一切正常，还能定时快照，爽的一匹。切记 BTRFS <a href="https://btrfs.readthedocs.io/en/latest/Status.html#raid56">Raid 5/6 有功能缺陷</a>，要么单盘要么 Raid 0/1/10，组成 Raid 的话推荐使用<a href="https://www.synology.com/en-us/support/RAID_calculator?hdds=12%20TB">群晖 RAID 计算器</a>或<a href="https://carfax.org.uk/btrfs-usage/">BTRFS 计算器</a>。</p>
<h3 id="openmediavault">OpenMediaVault</h3>
<p><a href="https://www.openmediavault.org">OpenMediaValue</a>（简称 OMV）是基于 Debian（仅支持 Buster, Bullseye 两个版本）开源的 NAS 系统，优点是硬件条件需求很低，附属功能都以插件形式存在，支持插件库，不开启的情况下也不会占用资源和空间，唯一的不足之处是他的 Web 管理系统，每操作个功能都需要点击 “应用” 然后一个较长时间的等待有点烦人，不过基本上可以忽略。最低硬件要求：</p>
<ul>
<li>CPU: 任意 64位 Intel/AMD 处理器或 ARM 处理器</li>
<li>内存: 1 GB</li>
<li>启动盘: 4 GB 系统盘</li>
<li>存储池: 至少一块额外硬盘（按需分配）</li>
</ul>
<p>它的定位和 Unraid 很类似，除了 NAS 还想干很多事情。通过 <a href="https://wiki.omv-extras.org/">omv-extra 插件库</a>能够支持 Docker、 Proxmox 内核等附属的功能，官方并不提供 ARM 的镜像，运行<a href="https://github.com/OpenMediaVault-Plugin-Developers/installScript">系统安装脚本</a>可以在部分开发板的 armbian 系统上安装。</p>
<h3 id="纯-linux">纯 Linux</h3>
<p>高阶点的玩家可以自己在任何主流的 Linux 系统上手动配置安装 SMB、NFS 服务端，并完成自己的配置。除此之外还可以考虑使用 <a href="https://cockpit-project.org/">Cockpit</a> 通过 Web 界面管理磁盘和文件共享功能。</p>
<h2 id="分布式存储">分布式存储</h2>
<p>上面提到的文件共享协议和 NAS 系统都是单体设备部署，如遇到意外时停电、运行的电脑发生晃动造成 HDD 硬盘损坏都会造成应用完全不可用，在有备份的前提下更换硬件、重做系统、恢复备份数据需要耗费很长的时间，如何避免并实现 zero down 呢？
和解决硬盘容量的思路一样，增加多台机器组成集群的分布式存储。</p>













  
  
    
      <figure data-pswp="1600x900" data-size="800x"><a href="/tutorials/how-to-homelab/storages/Storage-to-Use_v04-23-21.max-1600x1600.jpeg" class="gallery-item" target="_blank" data-pswp-width="1600" data-pswp-height="900"><img src="/tutorials/how-to-homelab/storages/Storage-to-Use_v04-23-21.max-1600x1600_hu1356fd0b1756d7491d89a5d7f23816bf_1002948_800x0_resize_q75_box.jpeg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://cloud.google.com/blog/topics/developers-practitioners/map-storage-options-google-cloud">Google Cloud</a>
    </p>

    <p>对象存储 VS 块存储 VS 文件存储</p></figcaption></figure>

<p>分布式存储可以分为对象存储和块存储，上图列出来不同存储的说明和使用场景。</p>
<p>下面罗列一些我经常<strong>见到的</strong>（绝大多数没长时间用过）解决方案，其他云存储方案可以参考<a href="https://anarsolutions.com/10-popular-cloud-native-storage-solutions-%F0%9F%93%8C/">这里</a>。</p>
<h3 id="ceph">Ceph</h3>
<p>企业级别的开源分布式存储服务，支持对象存储、块存储和文件存储三种类型。功能强大，容量不够了加机器就能扩容。最大的缺点是硬件要求很高且架构复杂造成运维成本也很高。</p>













  
  
    
      <figure data-pswp="1440x1006" data-size="800x"><a href="/tutorials/how-to-homelab/storages/ceph-diagramm.png" class="gallery-item" target="_blank" data-pswp-width="1440" data-pswp-height="1006"><img src="/tutorials/how-to-homelab/storages/ceph-diagramm_hud0423c5889e92e2ca8c59979a4b84d88_44584_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://ceph.com/en/discover/technology">Ceph</a>
    </p>

    <p>Ceph 对三种类型存储的支持</p></figcaption></figure>

<p><a href="https://rook.io/">Rook</a> 是专门为 Kubernetes 研发的 Ceph 云原生存储，硬件要求过高以至于我的 RK3399 + 4G 内存规格的开发板部署困难而放弃。</p>
<h3 id="gluster">Gluster</h3>
<p><a href="https://www.gluster.org/">Gluster</a> 是块存储，相比 Ceph 来说结构相对简单，易于部署，所以也方便在其上部署容器。官方建议运行在 XFS 文件系统上，底层用 LVM 实现快照。</p>
<p>网上能够看到很多 Ceph 和 Gluster 对比的文章和视频，对这两个有兴趣的可以看看这两个的文章：</p>
<ul>
<li><a href="https://cloud-atlas.readthedocs.io/zh_CN/latest/gluster/gluster_vs_ceph.html">Gluster和Ceph对比</a></li>
<li><a href="https://www.reddit.com/r/homelab/comments/ukt2aw/so_2_years_running_zfsgluster_and_im_extremely/">So 2 years running ZFS+Gluster and I&rsquo;m <strong>extremely</strong> glad I did (migration from TrueNAS)</a></li>
</ul>
<h3 id="longhorn">Longhorn</h3>












<figure data-pswp="x" data-size="0x0"><img src="/tutorials/how-to-homelab/storages/how-longhorn-works.svg"
      alt="图片来源"/><figcaption><p class="source">图片来源<a href="https://longhorn.io/docs/1.5.1/concepts/">Longhorn</a>
    </p>

    <p>Longhorn 工作原理</p></figcaption></figure>

<p><a href="https://longhorn.io/">Longhorn</a> 是纯 Kubernetes 云原生块存储，基于 iSCSI 文件共享协议，从文档上看有较好的数据备份、快速回滚、故障转移等功能，且最低硬件要求也不高：</p>
<ul>
<li>集群数量：三个节点（唯一的硬性要求）</li>
<li>CPU 架构：AMD64/ARM64</li>
<li>CPU：每个节点 4 vCPU</li>
<li>内存：每个节点 4 GB 内存</li>
<li>Kubernetes 版本：v1.21+</li>
</ul>
<p>我去年的时候在开发板集群短暂测试过一段时间，它创建 PVC 的过程比较慢，尚未确定具体是哪里的原因（开发板上 TF 卡槽规格、 TF 卡本身）。</p>
<h3 id="openebs">OpenEBS</h3>
<p><a href="https://openebs.io/">OpenEBS</a> 也是纯 Kubernetes 云原生存储，提供本地卷和分布式存储卷，分布式卷根据<a href="https://openebs.io/docs/concepts/casengines">不同使用场景</a>内置了 3 个存储引擎：<a href="https://openebs.io/docs/concepts/cstor">cStor</a>、<a href="https://openebs.io/docs/concepts/jiva">Jiva</a> 和 <a href="https://openebs.io/docs/concepts/mayastor">Mayastor</a>。</p>
<h2 id="存储备份原则">存储备份原则</h2>
<p>如果没有备份那么数据可能在历史上就不曾存在过（笑），如何保证数据安全性呢，这就不得不提到知名的 <a href="https://en.wikipedia.org/wiki/Backup#Storage">3-2-1</a> 备份原则：</p>
<ul>
<li>3：至少三份完整备份数据</li>
<li>2：存放在两种不同的存储介质（冷/热硬盘、光盘、移动硬盘、NAS、磁带、云存储等）</li>
<li>1：至少一份备份数据保存在异地（与原始数据不同地理位置的地方，比如云存储、朋友或亲戚的家等）</li>
</ul>
<p>经过我的观察严格遵循这个原则的玩家其实挺少的，绝大多数都是 2-2-1（比如我）:</p>
<ul>
<li>2：两份完整备份数据（甚至用 raid 1 或 raid 10 来实现的双备份）</li>
<li>2：存放在两种不同的存储介质（冷/热硬盘、NAS 或移动硬盘）</li>
<li>1：至少一份备份数据保存在异地（云存储、老家的 NAS）</li>
</ul>
<p>我个人解读是对于 3 的定义有不同，有些人认为 3 是三份完整备份数据，有些人认为是一份原始数据 + 量份完整备份数据；有些人可能认为两份完整备份数据已经足够了。无论如何解读都没有对或错，只要能保证数据的安全性和可恢复性就是好策略。</p>
<p>市面上有很多优秀的商业和开源数据备份工具或服务</p>
<h3 id="备份工具">备份工具</h3>
<p>现在有太多优秀的数据备份工具可供选择，且差异化也会越来越小，绝大多数都是支持远程协议和云存储的数据同步、数据加密、压缩等功能，以下列举的都是数据备份相关的工具，并没有把单纯数据同步的工具列在内。</p>
<table>
<thead>
<tr>
<th>工具</th>
<th>性质</th>
<th>开发语言</th>
<th>特色</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.borgbackup.org/">BorgBackup</a></td>
<td>免费/开源</td>
<td>Python</td>
<td>异地备份</td>
</tr>
<tr>
<td><a href="https://www.duplicati.com/">Duplicati</a></td>
<td>免费/开源</td>
<td>C#</td>
<td>Web UI，AES 256 加密</td>
</tr>
<tr>
<td><a href="https://www.synology.com/en-global/dsm/feature/hyper_backup">Hyper Backup</a></td>
<td>商业</td>
<td>-</td>
<td>基于 Synology NAS</td>
</tr>
<tr>
<td><a href="https://kopia.io/">Kopia</a></td>
<td>免费/开源</td>
<td>Go</td>
<td>Web UI，API，块存储，增量备份，定时快照，备份策略，自建备份服务器</td>
</tr>
<tr>
<td><a href="https://rclone.org/">Rclone</a></td>
<td>免费/开源</td>
<td>Go</td>
<td>Web UI，分布式存储</td>
</tr>
<tr>
<td><a href="https://www.resilio.com/individuals/">Resilio</a></td>
<td>商业/免费</td>
<td>-</td>
<td>采用 P2P 协议同步</td>
</tr>
<tr>
<td><a href="https://restic.net/">Restic</a></td>
<td>免费/开源</td>
<td>Go</td>
<td>增量备份</td>
</tr>
</tbody>
</table>
<p>个人建议优先考虑支持加密备份（支持压缩更好），支持定时能够增量快照或备份，同时又有备份策略（保留最多数量，是否删除等）的工具，原因有二：</p>
<ul>
<li>能够按照自己需求配置后自动化处理的绝不要人工干预</li>
<li>加密是为了保证数据的安全性，防止数据的泄露带来的不必要的损失</li>
</ul>
<h3 id="云存储服务">云存储服务</h3>
<p>网上各厂家提供的云存储收费通常是按照占用磁盘空间大小和流量两个纬度计算费用，据我所知目前最最便宜且口碑比较好的是 Backblaze 的 <a href="https://www.backblaze.com/cloud-storage">B2 云备份</a>服务。</p>
<table>
<thead>
<tr>
<th>云存储</th>
<th>存储</th>
<th>下载</th>
</tr>
</thead>
<tbody>
<tr>
<td>Backblaze B2</td>
<td>0.0005 美元/GB/月</td>
<td>0.01 美元/GB</td>
</tr>
<tr>
<td>亚马逊 S3</td>
<td>0.026 美元/GB/月</td>
<td>0.09 美元/GB</td>
</tr>
<tr>
<td>Azure</td>
<td>0.0208 美元/GB/月</td>
<td>0.08 美元/GB</td>
</tr>
<tr>
<td>Google Cloud</td>
<td>0.0023 美元/GB/月</td>
<td>0.11 美元/GB</td>
</tr>
<tr>
<td>阿里云 OSS</td>
<td>0.0075 ~ 0.12 元/GB/月</td>
<td>0.25 ~ 0.50 元/GB</td>
</tr>
<tr>
<td>腾讯云 COS</td>
<td>0.01 ~ 0.099 元/GB/月</td>
<td>0.5 元/GB</td>
</tr>
</tbody>
</table>
<p>B2 服务最吸引人的地方注册直接赠送免费 10G 空间，下载头 1GB 免费，API 提供免费额度，小场景使用几乎可以一直白嫖，国内的云存储价格打法就特别眼花缭乱，大体划分为标准存储，低频，（冷）归档，深度（冷）归档。</p>
<h2 id="小结">小结</h2>
<p>准备好好你的 NAS，下一篇正式开始 homelab 实战。</p>
]]></content:encoded></item><item><title>如何搭建家用 homelab: Openwrt 软路由</title><link>https://icyleaf.com/2023/04/how-to-homelab-part-2-openwrt-soft-router/</link><pubDate>Wed, 26 Apr 2023 20:30:00 +0800</pubDate><guid>https://icyleaf.com/2023/04/how-to-homelab-part-2-openwrt-soft-router/</guid><description>用牺牲硬件的网络转换效率来换取不必受设备提供商的限制和可玩性</description><content:encoded><![CDATA[<p>路由器是猫总管（调制解调器）最得力的一把手，掌管 homelab 网络大权。对于中国玩家提到软路由肯定绕不开 OpenWrt，今天我尝试用一个全新的视角唠唠这个大家熟悉却又陌生的系统。
以下会涉及大量的基础认知、概念理解，<strong>不会涉及网络配置或高阶玩法</strong>。</p>
<h2 id="什么是-openwrt">什么是 OpenWrt</h2>
<blockquote>
<p>与同价位的硬路由相比，软路由硬件更好，可配置性更高，但需要一定的网络知识才能发挥作用。软硬路由的选择取决于网络环境的场景，有些人投入了软路由的怀抱，有些人经历了软路由后<a href="https://taresky.com/2019byebye">坚定的使用硬路由</a>，还有些人的硬路由之下还会接一个软路由当旁路由<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。</p>
</blockquote>
<p><a href="https://openwrt.org/">OpenWrt</a> 首先是一个开源的操作系统，能够实现硬路由器的核心功能：LAN 和 WAN 的网络转发、路由（DHCP、防火墙、DNS 解析等），在 Linux 开放的生态和社区基础上扩展出丰富的功能<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，这个是硬件路由器没有能力达到的（钞能力或重刷魔改固件除外）。</p>













  
  
    
      <figure data-pswp="1757x1080" data-size="800x"><a href="/tutorials/how-to-homelab/part-2/openwrt-packages-preview.png" class="gallery-item" target="_blank" data-pswp-width="1757" data-pswp-height="1080"><img src="/tutorials/how-to-homelab/part-2/openwrt-packages-preview_hud400891ca261fa9e07ca732397145413_435673_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://github.com/SuLingGG/OpenWrt-Rpi">SuLingGG/OpenWrt-Rpi</a>
    </p>

    <p>丰富的软件包资源</p></figcaption></figure>

<p>它适配 x86、x86_64、arm、arm64 和 MIPS 等架构上千种硬件设备。硬件要求极低，21.02 版本最低要求 16M 闪存和 128M 内存，2023 年的今天没有人会拿老的硬路由古董去折腾它了吧，没有吧？没有吧？任意一台淘汰的 x86 设备都高于这个配置。
且在 x86/x86Z_64 平台安装它甚至比安装 Ubuntu、Debian 系统还要简单。较全的列表请查阅<a href="https://openwrt.org/supported_devices">官方硬件支持列表</a> 未列入的还可以在 <a href="https://github.com/search?q=openwrt&amp;type=repositories">Github 搜索</a>。</p>
<h2 id="版本分布">版本分布</h2>
<p>OpenWrt 虽然有一套<a href="https://openwrt.org/zh/releases/start">发布流程</a>却没有稳定的发版节奏和老版本的废弃规则。版本号类似<a href="https://semver.org/lang/zh-CN/">语义化版本规范</a>划分 <code>X</code>.<code>Y</code>.<code>Z</code> 三段。<code>X</code>.<code>Y</code> 是年和月相对固定，小功能迭代全靠更新 <code>Z</code> 的值。版本大致划分两类：</p>
<ul>
<li>稳定版：生产环境 Ready 的稳定版本。v22.03.2 是该系列的最新版本。</li>
<li>开发版：不稳定但会包含不断的迭代增强功能的开发版本，也称之为 snapshot 版本，完成<a href="https://openwrt.org/docs/guide-developer/releases/goals/start">里程碑</a>会进入 RC 版本。</li>
</ul>
<table>
<thead>
<tr>
<th>版本</th>
<th>状态</th>
<th>重大变化</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://openwrt.org/zh/releases/snapshot">snapshot</a></td>
<td>开发版本</td>
<td>-</td>
</tr>
<tr>
<td><a href="https://openwrt.org/zh/releases/22.03/start">22.03</a></td>
<td>最新版本</td>
<td>基于 5.10 内核、防火墙迁移 nftables、黑暗模式</td>
</tr>
<tr>
<td><a href="https://openwrt.org/zh/releases/21.02/start">21.02</a></td>
<td>可看做是 LTS 版本</td>
<td>基于 5.4 内核、DSA 初步支持</td>
</tr>
<tr>
<td><a href="https://openwrt.org/docs/guide-developer/releases/goals/19.07.4">19.07</a></td>
<td>不再支持</td>
<td>基于 4.11 内核、WPA3 支持、客户端渲染 luci</td>
</tr>
<tr>
<td><a href="https://openwrt.org/zh/releases/18.06/start">18.06</a></td>
<td>不再支持</td>
<td>基于 4.9 或 4.11 内核、合并 Lede 源码</td>
</tr>
<tr>
<td><a href="https://openwrt.org/zh/releases/17.01/start">LEDE 17.01</a></td>
<td>不再支持</td>
<td>基于 4.4 内核</td>
</tr>
</tbody>
</table>
<p>以上版本信息是截止 2023 年 4 月底。</p>
<h2 id="衍生及支系">衍生及支系</h2>
<blockquote>
<p>话说天下大势，分久必合，合久必分</p>
</blockquote>
<p>开源系统生态同样遵循，有些是不满原系统的管理或生态愤恨分支的支系，有些是针对特定的方面有了深化的衍生功能，列举几个我了解的支系。</p>
<h3 id="lede">LEDE</h3>
<p><a href="https://zh.wikipedia.org/wiki/LEDE">LEDE</a> 是前者的原因分支出来的一派，新增了很多关键新功能和对新设备的支持而崛起，在 2018 年 1 月 LEDE 宣布和 OpenWRT 和解正式宣布合并，合并后使用 OpenWrt 的名字和 LEDE 的代码。</p>
<p>早期国内知名的 <a href="https://github.com/coolsnowwolf">Lean 狼大</a>的 <a href="https://github.com/coolsnowwolf/lede">Lede 系统</a>，很多国内玩家最早接触的系统之一。</p>
<h3 id="immortalwrt">Immortalwrt</h3>
<p>基于官方分支的 <a href="https://github.com/immortalwrt">Immortalwrt</a> 是一个跟进上游速度很快又融合了 Lean 狼大版本特色的新支系。Lean 狼大<a href="https://twitter.com/icyleaf/status/1496789460473638913">也有参与其中</a>，主要是针对中国玩家定制的固件，拥有更好的本地化适配、加入了各种官方软件列表中没有但是国内环境中可能会用到的软件功能，比如网络多拨、国内镜像及<span class="spoiler">翻开也不会告诉你的功能等。</span>
</p>
<p>我从 21.02 开始跟进并使用 snapshot 开发版本没遇到什么大坑，该项目每周都会定时合并上游的代码。</p>
<h3 id="istoreos">iStoreOS</h3>
<p>同样是基于官方分支的 <a href="https://www.istoreos.com/">iStoreOS</a> 另辟蹊径，舍弃了 OpenWrt 自身的包管理机制，重新打造了一套类似 <a href="https://www.koolcenter.com/category/merlin">KoolCenter 梅林固件</a>的软件商店用于解决因为 OpenWRT 系统依赖和软件包依赖杂乱导致不同平台的插件依赖不匹配而无法安装的问题。同时提供多套 UI 操作界面和类似上面一样特色功能和 NAS 向功能：网盘、Docker、异地组网、相册备份等。</p>
<blockquote>
<p>由于个人没有实际部署和使用，按下不表。</p>
</blockquote>
<h2 id="固件构成">固件构成</h2>
<p>不同的硬件和软件包的搭配组合衍生出五花八门的固件版本。那有没有想过固件到底是什么，有什么组成的呢？</p>
<p>固件的构成主要是三类 vmlinuz、rootfs 和系统引导。</p>
<ul>
<li>vmlinux 是 ELF 文件最原始包含 Linux 内核静态链接的可执行文件；vmlinuz 是压缩后的 vmlinux 且能可启动的文件<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>。</li>
<li>rootfs 是 OpenWrt 的根分区的所有文件，提供 gzip 压缩后的原始文件、ext4 分区后的文件和 squashfs 分区后的文件。</li>
<li>系统引导是引导设备开机后正确引领到上述两个文件的 bootloader，OpenWrt 借助的是 grub2 来实现 legacy 或 EFI 分区引导。</li>
</ul>
<p>固件文件名包含的 combined 译为合并这就是上面几个文件的自由组合，组合方式会从<code>文件分区</code>和<code>封装</code>两个字段体现。</p>













  
  
    
      <figure data-pswp="2115x1848" data-size="800x"><a href="/tutorials/how-to-homelab/part-2/openwrt-file-structure.png" class="gallery-item" target="_blank" data-pswp-width="2115" data-pswp-height="1848"><img src="/tutorials/how-to-homelab/part-2/openwrt-file-structure_hu89ce50451123b48915fffad04a92e22e_139504_800x0_resize_box_3.png"/></a><figcaption>

    <p>Openwrt 固件文件解构</p></figcaption></figure>

<p>OpenWrt 文件系统分区可选择 <a href="https://zh.wikipedia.org/wiki/Ext4">ext4</a> 或 <a href="https://en.wikipedia.org/wiki/SquashFS">squashFS</a>。ext4 是一个可读可写的分区格式，这也是 Linux 生态应用最广的文件系统；对比 squashFS 它是一个只读的分区格式，看似不好用但它却有一个非常诱人的功能，可恢复出厂设置或直刷同文件分区的固件达到升级的功能，只不过需要挂在其他可写的磁盘做扩展应用。</p>
<p>封装格式提供可烧录的 iso、img 镜像外，还提供了虚拟化的镜像文件，方便使用者根据各自的情况随意部署。</p>
<p>多提一句，官方还额外其他提供一个组合字段 <code>-factory</code> 和 <code>-sysupgrade</code> 来区分全新安装或升级的专属固件，这俩不能混用。</p>
<blockquote>
<p>本节会涉及 Linux 的启动机制，我也是略懂皮毛，如果有描述错误请指正。</p>
</blockquote>
<h2 id="安装固件">安装固件</h2>













  
  
    
      <figure data-pswp="2290x750" data-size="800x"><a href="/tutorials/how-to-homelab/part-2/openwrt-fireware-image-files.png" class="gallery-item" target="_blank" data-pswp-width="2290" data-pswp-height="750"><img src="/tutorials/how-to-homelab/part-2/openwrt-fireware-image-files_hu4f63e536e962ff43b9fa658f4c31bfb4_224192_800x0_resize_box_3.png"/></a><figcaption>

    <p>Openwrt 固件镜像文件</p></figcaption></figure>

<p>我相信结合上面的固件构成的原理在选择什么类型的固件上会迎刃而解了吧。安装步骤略过不讲了吧，网络上有<a href="https://www.google.com.hk/search?q=openwrt+%E5%AE%89%E8%A3%85">太多的教程</a>可供参考。</p>
<h2 id="系统核心">系统核心</h2>
<h3 id="访问渠道">访问渠道</h3>
<p>OpenWrt 提供 Web UI 和 SSH 两种方式访问和管理，默认 Web 界面由 <a href="https://github.com/openwrt/luci">luci</a> 实现前端展示，uhttpd 负责 web 代理服务。
可通过浏览器访问 http://192.168.1.1 或 <a href="http://openwrt.lan">http://openwrt.lan</a> 打开，默认开放 80 端口；SSH 端口为 22，默认用户名为 root，没有密码。</p>













  
  
    
      <figure data-pswp="1033x689" data-size="800x"><a href="/tutorials/how-to-homelab/part-2/openwrt-themes-preview.png" class="gallery-item" target="_blank" data-pswp-width="1033" data-pswp-height="689"><img src="/tutorials/how-to-homelab/part-2/openwrt-themes-preview_hu33abb04a3fc26983cc7948708958ea73_140538_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://blog.vpngame.com/openwrt/cara-install-dan-ganti-tema-luci-di-openwrt/">3elajar OpenWrt</a>
    </p>

    <p>luci 丰富的主题</p></figcaption></figure>

<p>luci 是官方维护和默认内置开启的前端 UI 实现，其实深挖能发现还有很多的<a href="https://openwrt.org/docs/guide-user/luci/webinterface.overview">实现方案</a>。
还有社区近期还在维护的 <a href="https://github.com/zhaojh329/oui">oui</a>、<a href="https://github.com/x-wrt/x-wrt">x-wrt</a> 和很久不再更新的 <a href="https://github.com/mkschreder/juci">juci</a> 等。
这也能够看的出来 OpenWrt 在系统开放性上有很大的包容度。</p>
<h3 id="网络接口">网络接口</h3>
<p>默认使用 LAN 2（eth1） 为 WAN 口，LAN 1（eth0）为 LAN 口，如果有多个 WAN、LAN 口需要在网络接口中重新配置。</p>
<h3 id="配置管理">配置管理</h3>
<p>系统的配置文件系统层面绝大多数的配置文件都储存在 <code>/etc/config</code> 路径下面，编辑保存后是保存对于配置文件而不是实际修改对应服务，因此需要再执行提交操作，这部会完成把部分服务的中间配置更新到真正的配置文件中，再有必要的执行服务的重启操作。</p>
<p>我会通过“修改 LAN IP 地址”的例子分别演示 OpenWrt 配置文件的修改的几种途径。</p>
<h4 id="通过-web-ui">通过 Web UI</h4>
<p>luci 提供网页的可视化操作，比如查看配置、更新管理等配置的管理工作。</p>













  
  
    
      <figure data-pswp="1910x822" data-size="800x"><a href="/tutorials/how-to-homelab/part-2/openwrt-luci.png" class="gallery-item" target="_blank" data-pswp-width="1910" data-pswp-height="822"><img src="/tutorials/how-to-homelab/part-2/openwrt-luci_hu625591b40daa7a557058fbcbacf8b92b_94153_800x0_resize_box_3.png"/></a></figure>

<p>分别选择 &ldquo;网络&rdquo; -&gt; &ldquo;接口&rdquo;，找到接口 lan 右侧的编辑按钮，点开后编辑 IPv4 地址，保存再应用。</p>
<h4 id="通过终端编辑器">通过终端编辑器</h4>
<p>使用 vim 或 nano 这类文本编辑器编辑 <code>/etc/config/network</code> 文件，找到 lan 分段下面的 ipaddr 修改值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="ln"> 1</span><span class="cl">config interface &#39;loopback&#39;
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  option device &#39;lo&#39;
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  option proto &#39;static&#39;
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  option ipaddr &#39;127.0.0.1&#39;
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  option netmask &#39;255.0.0.0&#39;
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">config globals &#39;globals&#39;
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  option ula_prefix &#39;fdd3:af57:2ab4::/48&#39;
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">config device
</span></span><span class="line"><span class="ln">11</span><span class="cl">  option name &#39;br-lan&#39;
</span></span><span class="line"><span class="ln">12</span><span class="cl">  option type &#39;bridge&#39;
</span></span><span class="line"><span class="ln">13</span><span class="cl">  list ports &#39;eth0&#39;
</span></span><span class="line"><span class="ln">14</span><span class="cl">  option ipv6 &#39;0&#39;
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">config interface &#39;lan&#39;
</span></span><span class="line"><span class="ln">17</span><span class="cl">  option device &#39;br-lan&#39;
</span></span><span class="line"><span class="ln">18</span><span class="cl">  option proto &#39;static&#39;
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="gd">-	option ipaddr &#39;192.168.1.1&#39;
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="gd"></span><span class="gi">+	option ipaddr &#39;10.10.10.1&#39;
</span></span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="gi"></span>  option netmask &#39;255.255.255.0&#39;
</span></span><span class="line"><span class="ln">22</span><span class="cl">  option ip6assign &#39;60&#39;
</span></span><span class="line"><span class="ln">23</span><span class="cl">  option gateway &#39;192.168.16.1&#39;
</span></span><span class="line"><span class="ln">24</span><span class="cl">  list dns &#39;233.5.5.5&#39;
</span></span><span class="line"><span class="ln">25</span><span class="cl">  list dns &#39;202.106.0.20&#39;
</span></span></code></pre></div><p>保存后在重启 network 服务。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ /etc/init.d/network restart
</span></span></code></pre></div><h4 id="通过终端-uci-工具">通过终端 uci 工具</h4>













  
  
    
      <figure data-pswp="2650x1282" data-size="800x"><a href="/tutorials/how-to-homelab/part-2/openwrt-uci.png" class="gallery-item" target="_blank" data-pswp-width="2650" data-pswp-height="1282"><img src="/tutorials/how-to-homelab/part-2/openwrt-uci_hue276e5c9fefad17390851e095847751d_229224_800x0_resize_box_3.png"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://openwrt.org/docs/guide-user/base-system/uci">OpenWrt Wiki</a>
    </p>

    <p>Openwrt uci 对应关系</p></figcaption></figure>

<p><a href="https://openwrt.org/docs/guide-user/base-system/uci">uci</a> 是配置管理的快捷 CLI 工具，它会比网页编辑或终端找配置文件编辑都要方便。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 设置 LAN 的 IP 地址</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ uci <span class="nb">set</span> network.lan.ipaddr<span class="o">=</span>10.10.10.1
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c1"># 提交应用操作</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">$ uci commit network
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"># 重启网络服务</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">$ /etc/init.d/network restart
</span></span></code></pre></div><h4 id="通过-json-rpc-接口">通过 JSON-RPC 接口</h4>













  
  
    
      <figure data-pswp="2143x1561" data-size="800x"><a href="/tutorials/how-to-homelab/part-2/api-architecture-styles.jpeg" class="gallery-item" target="_blank" data-pswp-width="2143" data-pswp-height="1561"><img src="/tutorials/how-to-homelab/part-2/api-architecture-styles_hu66a712dc29cc2d0893569aae05f00fac_195912_800x0_resize_q75_box.jpeg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://twitter.com/Rapid_API/status/1567656196022181891">Rapid@twitter</a>
    </p>

    <p>API 接口方案一览图</p></figcaption></figure>

<p>Openwrt 内部通信全靠的是 <a href="https://openwrt.org/docs/techref/ubus">ubus</a> 总线工具，JSON-RPC 是基于它的二次封装的接口服务。固件默认不会开启此服务，如果需要请在编译固件配置中<a href="https://github.com/openwrt/luci/wiki/JsonRpcHowTo">开启它</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># 登录认证获得 token (返回 JSON 的 result 字段值)</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">$ curl http://&lt;hostname&gt;/cgi-bin/luci/rpc/auth --data <span class="s1">&#39;
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="s1">{
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="s1">  &#34;id&#34;: 1,
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="s1">  &#34;method&#34;: &#34;login&#34;,
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="s1">  &#34;params&#34;: [
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="s1">    &#34;user&#34;, &#34;password&#34;
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="s1">  ]
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="s1">}&#39;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"># 修改 LAN IP 地址</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">$ curl http://&lt;hostname&gt;/cgi-bin/luci/rpc/uci?auth<span class="o">=</span>yourtoken --data <span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s1">{
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="s1">  &#34;method&#34;:&#34;set&#34;,
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s1">  &#34;params&#34;:[
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s1">    &#34;network&#34;, &#34;lan&#34;, &#34;ipaddr&#34;, &#34;10.10.10.1&#34;
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s1">  ]
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="s1">}&#39;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="c1"># 提交 network 配置变更</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">$ curl http://&lt;hostname&gt;/cgi-bin/luci/rpc/uci?auth<span class="o">=</span>yourtoken --data <span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="s1">{
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="s1">  &#34;method&#34;:&#34;commit&#34;,
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="s1">  &#34;params&#34;:[
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="s1">    &#34;network&#34;
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="s1">  ]
</span></span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="s1">}&#39;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="c1"># 重启 network 服务 （接口请求后可能无法正常响应）</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">$ curl http://&lt;hostname&gt;/cgi-bin/luci/rpc/sys?auth<span class="o">=</span>yourtoken --data <span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="s1">{
</span></span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="s1">  &#34;method&#34;:&#34;call&#34;,
</span></span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="s1">  &#34;params&#34;:[
</span></span></span><span class="line"><span class="ln">34</span><span class="cl"><span class="s1">    &#34;/etc/init.d/network restart&#34;
</span></span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="s1">  ]
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="s1">}&#39;</span>
</span></span></code></pre></div><p>更全面的接口地址和调试可前往我维护的 Postman <a href="https://documenter.getpostman.com/view/14290/SzKPUgEo">OpenWrt RPC 接口合集</a>。</p>
<h3 id="设备管理">设备管理</h3>
<p>Dnsmasq 是默认配置和管理设备 DHCP、DNS 为一体的服务，配置文件是 <code>/etc/config/dhcp</code>，应用服务 <code>/etc/init.d/dnsmasq</code>。</p>
<h3 id="防火墙">防火墙</h3>
<p>OpenWrt 22.03 版本开始不再使用 iptable 而是该用 nfstable 实现。两个同时时候存在不兼容情况需要注意。防火墙还承担接口转发的配置，
配置文件是 <code>/etc/config/firewall</code>，应用服务 <code>/etc/init.d/firewall</code>。</p>
<h3 id="ddns">DDNS</h3>
<p>动态动态域名解析，解决公网IP不固定的问题，前提是要有公网 IP 才行。可通过给客户提工单说需要用摄像头看家里的猫猫、狗狗、鱼鱼、龟龟为理由有一定概率给开通。
配置文件是 <code>/etc/config/ddns</code>，应用服务 <code>/etc/init.d/ddns</code>。注意使用不同的域名供应商需要安装对应的软件包扩展才行。</p>
<h3 id="包管理">包管理</h3>
<p><a href="https://openwrt.org/docs/guide-user/additional-software/opkg">opkg</a> 是 OpenWrt 的包管理工具，命令类似于 Debian 的 apt。
它可设置官方和第三方源。也能安装、升级和卸载包的功能。配置目录文件是 <code>/etc/opkg.conf</code> 文件和 <code>/etc/okpg</code> 目录下面的其他源配置文件构成。软件包是 <code>.ipk</code> 扩展名。网页端也有对应的功能实现。</p>
<h2 id="编译固件">编译固件</h2>
<p>国内似乎有一个偏见，任何的软件升级和新软件包都要重新编译和重刷固件，以至于流行起了利用 Github Action 白嫖资源来编译符合一万个人心中的哈姆雷特。</p>
<p>编译固件的教程也异常的多，在 Github 能找到很多硬件设备、很多个性化的编译固件的工具，实在懒省事也有开发者提供在线<a href="https://supes.top/">自定义构建固件工具</a>供您选择。</p>
<p>前期刚开始接触的时候<a href="https://github.com/icyleaf/openwrt-autobuilder">我也不例外</a>加入到了编译固件的行列，直到最近意识到编译固件只是为了升级几个软件包版本而觉得这个事情有些偏离了设计初衷，我也开始尝试自己编译所需的<a href="https://github.com/icyleaf/openwrt-packages">软件包</a>和<a href="https://github.com/icyleaf/openwrt-dist">软件源</a>。</p>
<h3 id="开发软件包">开发软件包</h3>
<p>如果你是要开发新软件包或编译软件包，你会立刻头大起来，这方面的资源可是少的可怜，我的建议是照着<a href="https://openwrt.org/docs/guide-developer/toolchain/single.package">官方文档</a>一步步来。</p>
<p>你需要的是理解如何准备开发环境、克隆源码、安装编译环境和了解项目的目录结构，官方也考虑到前期准备会异常辛苦和困难重重，特意提供一个三种开发包。</p>













  
  
    
      <figure data-pswp="2300x912" data-size="800x"><a href="/tutorials/how-to-homelab/part-2/openwrt-dev-files.png" class="gallery-item" target="_blank" data-pswp-width="2300" data-pswp-height="912"><img src="/tutorials/how-to-homelab/part-2/openwrt-dev-files_hub712545ea67e7dea7998ba1f55078d39_233471_800x0_resize_box_3.png"/></a><figcaption>

    <p>Openwrt 开发包文件</p></figcaption></figure>

<ul>
<li><a href="https://openwrt.org/docs/guide-developer/toolchain/buildsystem_essentials#description">toolchain</a>: 包含了 GCC 编译器、编译必须的二进制工具和链接器（比如 tar, binutils 等）以及 C 标准库（比如 glibc、musl、uClibc 或者 dietlibc）组成的预编译环境，方便修改 OpenWrt 源码。</li>
<li><a href="https://openwrt.org/docs/guide-developer/toolchain/using_the_sdk">SDK</a>: 包含了预编译 toolchain 包和一个编译平台（target 或叫 platform）用于不同平台交叉 ipk 软件包的开发套件。需要注意的是仅允许 ipk 软件包交叉编译，固件本身无法交叉编译。</li>
<li><a href="https://openwrt.org/zh/docs/guide-user/additional-software/imagebuilder">imagebuilder</a>: 一个能够快速调整固件内容的特定平台预编译的开箱包，能够这个预设好的环境精简预装的 ipk 包、调整系统参数也能够快速生成个性化固件。需要注意的是软件包是提前预设好，只能精简无法添加新软件包。</li>
</ul>
<p>本章节只是浅浅让大家了解并没有计划全面展开，如果你想更深入如何开发一个 OpenWrt 软件包，欢迎留言跟我互动，多的话我或许会单开一个系列。</p>
<h2 id="最后想说的话">最后想说的话</h2>
<p>在我的 Homelab 网络拓扑中 OpenWrt 仅仅承担有线部分的网络转发和路由功能，主要是 DHCP、DNS、DDNS 和网络加速为主，无线网络会再通过下游的 Mesh AP 完成。
Docker、网盘等这类复杂且有风险的功能不会出现在 OpenWrt 系统。</p>
<p>接下来会开启存储服务和 VM 虚拟机管理系统 Proxmox 等核心基础服务。</p>
<!-- raw HTML omitted -->
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>可参考<a href="https://blog.lishun.me/openwrt-mega-post">川叶</a>的教程查看主旁路由设置和性能对比&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://zh.wikipedia.org/wiki/OpenWrt">维基百科</a>的解释&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>vmlinuz 资料参考<a href="https://zoepla.github.io/2019/09/%E5%86%85%E6%A0%B8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/">内核环境搭建和基础知识</a>和<a href="https://blog.csdn.net/catoop/article/details/120809707">vmlinuz 文件解压缩</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>如何搭建家用 homelab: 硬件和架构</title><link>https://icyleaf.com/2023/01/how-to-homelab-part-1-hardware-and-architecture/</link><pubDate>Tue, 31 Jan 2023 19:28:50 +0800</pubDate><guid>https://icyleaf.com/2023/01/how-to-homelab-part-1-hardware-and-architecture/</guid><description>家庭设备架构和考虑因素是根据实际需求不断地演变、试错和总结</description><content:encoded><![CDATA[



<div class="updated">
  <header class="updated-header">
    <h4 class="updated-title">更新</h4>
    
    <p class="updated-meta">Feb 12, 2023</p>
    
  </header>
  <article class="updated-body">
    PDD 600 多采购 Apple TV 用于代替原先的 Android 电视盒子，终于有了一个价格合适即有网飞认证高清又能提供更好的生态体验。
  </article>
</div>


<p>前面<a href="https://icyleaf.com/2022/02/how-to-homelab-part-0/">先导篇</a>全面性介绍了搭建家用 homelab 软硬件的可能性，实际操作上每个人的室内环境，网络布线都不太一样，钞能力的不同也有会千万种解法。我无法给出一个 100% 的解决方案，但我给大家回顾自己设备架构演变的过程在每个阶段是什么需求，遇到什么问题以及如何应对的，在文章末尾也会给出一些搭建 homelab 中不容忽视的因素。</p>
<h2 id="我的设备架构">我的设备架构</h2>
<blockquote>
<p>首先声明个人设备架构并不代表这是最佳的方案，只是当前符合我要求的结果，随着需求和技术变化而迭代更新。我的梦想就是有间下图的<a href="https://blog.cavelab.dev/2021/02/new-home-office/">地下室</a>能够给我随意折腾就好了。</p>
</blockquote>













  
  
    
      <figure data-pswp="2066x1444" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/memo-devices-changes.png" class="gallery-item" target="_blank" data-pswp-width="2066" data-pswp-height="1444"><img src="/tutorials/how-to-homelab/part-1/memo-devices-changes_hu35c3082d2dbedac4f58069b5e8a3e9e3_2396575_800x0_resize_box_3.png"
      alt="创意来源"/></a><figcaption><p class="source">创意来源<a href="https://twitter.com/featherye/status/1619863195145089025">@HCocoa@twitter</a>
    </p>

    <p>homelab 梦想预期</p></figcaption></figure>

<p>当时房子装修是一切从简<span class="spoiler">（没有钱）</span>
造成网络线路设计不太合理：</p>
<ul>
<li>电视墙，卧室和工作室虽预埋 6 类网线但都是单根</li>
<li>弱电箱<a href="https://twitter.com/icyleaf/status/1591070791646744576">太小</a>无法扩展，前期很多设备都堆积到电视后面</li>
<li>房子不大无法设置散热友好的独立机柜</li>
<li>房间有 WIFI 死角</li>
</ul>
<p>新增家庭成员后原工作室改成了儿童房，部分设备又做了迁移，只能基于现有的结构进行优化和改进，以下请目睹我的血泪史。</p>
<h3 id="设备架构演变">设备架构演变</h3>
<h4 id="2014--2016">2014 ~ 2016</h4>













  
  
    
      <figure data-pswp="1204x750" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/homelab-diagram-v0.png" class="gallery-item" target="_blank" data-pswp-width="1204" data-pswp-height="750"><img src="/tutorials/how-to-homelab/part-1/homelab-diagram-v0_huf87e6e7ddab588d948a389d696e1d1c3_56332_800x0_resize_box_3.png"/></a><figcaption>

    <p>v0 设备架构拓扑图</p></figcaption></figure>

<p>这个期间换了新工作上班通勤每天都较长回家也不太折腾网络，路由器是从租房时代沿用过来的网件 WGR614。电视图便宜买了当时乐视出的第一代智能电视满足打开听个响的需求结果不到半年时间系统卡成翔，以至于之后再也没考虑过 Android 系统电视，头两年为了省钱明知在北京应该用联通还是莽了北方电信，那网速真是垃圾啊。还捡了一些不太靠谱的垃圾件就不提了。</p>
<h4 id="2016--2018">2016 ~ 2018</h4>













  
  
    
      <figure data-pswp="2212x1038" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/homelab-diagram-v0.1.png" class="gallery-item" target="_blank" data-pswp-width="2212" data-pswp-height="1038"><img src="/tutorials/how-to-homelab/part-1/homelab-diagram-v0.1_huf66b4d76496a1cf08ad9e6737ad64050_133744_800x0_resize_box_3.png"/></a><figcaption>

    <p>v0.1 设备架构拓扑图</p></figcaption></figure>

<p>托工作福利政策出国旅游频次逐渐变多，拍摄的照片越来越多需要存储，2016 年从<a href="https://post.smzdm.com/p/399864/">什么值得买</a>了解后德淘了一台 HP Microserver Gen8。这是一台拥有 4 盘位，双千兆网口还带 iLO 管理功能的服务器，我却给它只安装了黑群晖算是成为了最早的 NAS 服务器设备架构，5.x 版本的群晖还不支持 Docker 算是一台单纯的 NAS 服务用来存储照片、视频、替代 Dropbox 的 Drive 服务，从上图也能看到我当时完全不了解什么是链路聚合，要不然我肯定给黑群晖接入双网口了。</p>
<p>路由器升级到了网件 6300v2 并刷入了 KoolCenter 定制化的<a href="https://twitter.com/icyleaf/status/887209662012989440">梅林固件</a>方便畅游网络，内网穿透这个时候被迫在使用，黑群晖升级后没法完全洗白之前的<a href="https://quickconnect.to/">群晖 QuickConnect</a> 服务被废，从联通客服申请公网 IP 后在通过 DDNS 定时上报（脚本还是<a href="https://twitter.com/zhmocean">糖醋鼻子</a>提供的）。</p>
<p>电视更换成了索尼 4K 60 寸互联网电视，外接了一个晶晨 S912 外贸盒子安装了 Kodi 和 Youtube 成为家庭影音系统。</p>
<p>PS 4 应该是在某一年黑五美亚捆绑赠送了 GTA5 和最后生还者的版本。</p>
<h4 id="2018--2019">2018 ~ 2019</h4>













  
  
    
      <figure data-pswp="2284x1662" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/homelab-diagram-v1.0.png" class="gallery-item" target="_blank" data-pswp-width="2284" data-pswp-height="1662"><img src="/tutorials/how-to-homelab/part-1/homelab-diagram-v1.0_huc1d6c49922a951b2ad5c6811196fb260_221563_800x0_resize_box_3.png"/></a><figcaption>

    <p>v1 设备架构拓扑图</p></figcaption></figure>

<p>2018 年我在推上吐槽梅林固件刷机太难被 <a href="https://twitter.com/icyleaf/status/1100322141914853376">anbutu</a> 安利 openwrt 系统并赠送了一台 <a href="https://cn.v2ex.com/t/659602">N270 x86 32 位双网口工控机</a>让我了解了新领域：软路由。</p>













  
  
    
      <figure data-pswp="1280x1280" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/n270-soft-router.jpeg" class="gallery-item" target="_blank" data-pswp-width="1280" data-pswp-height="1280"><img src="/tutorials/how-to-homelab/part-1/n270-soft-router_hube238e244fb01f35d525ea3f565974ff_485496_800x0_resize_q75_box.jpeg"/></a><figcaption>

    <p>N270 x86 32 位双网口工控机</p></figcaption></figure>

<p>黑群晖升级到了支持 Docker 的 6.x 版本，开始尝试跑一些基础服务，比如 <a href="https://aria2.github.io/">aria2</a>，<a href="https://www.home-assistant.io/">home assistant</a>，<a href="https://github.com/AdguardTeam/AdGuardHome">Adguard home</a> 等。不知道什么时候小区会莫名其妙突然停电几分钟后再恢复，有一次硬盘被群晖的检测爆出来好多坏道，吓得我立刻买了<a href="https://twitter.com/icyleaf/status/1096386681907798017">施耐德 APC BK650</a> 带通讯协议，接入群晖保证断电后安全关机。</p>
<p>2019 年初开始学习拍摄视频，采购了<a href="https://icyleaf.com/2019/01/itx-coffee-lake-hackintosh-build-for-4k-video-editing/">新的 Intel 主机</a>在时隔 <a href="https://twitter.com/icyleaf/status/11322513061580800">9 年</a>后后重新学习安装<a href="https://icyleaf.com/2019/03/asrock-z390-gaming-itx-install-hackintosh-tutorial/">黑苹果</a>来代替年迈的 Macbook Pro 2015 款，期间不升级后续版本主要是因为 Intel 太拉，Apple 把硬件全焊死升级顶配不值得。</p>
<h4 id="2020--2021">2020 ~ 2021</h4>













  
  
    
      <figure data-pswp="4644x3004" data-size="800x"><a href="/tutorials/how-to-homelab/part-0/homelab-diagram-v2.0.png" class="gallery-item" target="_blank" data-pswp-width="4644" data-pswp-height="3004"><img src="/tutorials/how-to-homelab/part-0/homelab-diagram-v2.0_hud6b13e642cdec1b76e4883675cc1f0da_933051_800x0_resize_box_3.png"
      alt="首发"/></a><figcaption><p class="source">首发<a href="https://twitter.com/icyleaf/status/1472036769742745603">@icyleaf@twitter</a>
    </p>

    <p>v2 设备架构拓扑图</p></figcaption></figure>

<p>2020 年末实际上才是我正式踏入 homelab 元年，之前只是满足存储需求的 NAS 服务。</p>
<p>软路由升级了至 <a href="https://twitter.com/icyleaf/status/1242070362839330817">E3845 四口工控机</a>（代号 <a href="https://starcraft.fandom.com/wiki/Larva_(StarCraft_II)">Larva</a>）它只承担最基础服务比如拨号，DNS 服务、屏蔽广告，DDNS 等。</p>
<p>交换机迷之自信选择网件 GS105 4 口非网管版，当时很多人问我为什么不选 8 口，我没有意识到后面的变化只是考虑弱电箱只能塞下 4 口。</p>
<p>应用服务由当时新爆出来的<a href="https://twitter.com/icyleaf/status/1339568737083527169">蜜獾超存</a>（代号 <a href="https://starcraft.fandom.com/wiki/Corruptor">Corruptor</a>）矿机<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>承担：6 盘位 / 双千兆网口 / J1900 CPU /8G 内存 / 64G MSATA，我主要是看中了它的机箱体积和设计，比蜗牛星际之类的好看太多。在它身上分别调研尝试下列系统：</p>
<ul>
<li>Debian: 直接跑 Docker 服务有点心不甘</li>
<li><a href="https://maxiee.github.io/post/mihuan1md/">OMV</a>: 最简单的 NAS 系统提供 Docker/Proxmox 内核，但任何操作都要 Apply 好久，实在没法接受</li>
<li><a href="https://www.proxmox.com">Proxmox</a>: 跑十几个不太吃性能系统及服务勉强可接受</li>
<li><a href="https://www.rancher.com/products/harvester">harvester</a>: Rancher 开源的基于 k8s 提供完全集成的存储和虚拟化功能的<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzM4Nzk1NQ==&amp;mid=2247500683&amp;idx=1&amp;sn=2a30a79313c6b51b41a39c6618ccef1b">超融合基础架构软件</a>，万万没想到 <a href="https://twitter.com/icyleaf/status/1429100937499447296">J1900 带不动</a>&hellip;</li>
</ul>
<p>或许你会问为什么不利用好 Gen 8 服务器？原因是 G1610T 性能太弱带不起 ESXI 虚拟化，可升级 CPUs 比如 E3 1265L v2 之类的价格都虚高。我从一开始就把它当做纯粹的 NAS 服务器。四盘位上设置两两硬盘组成 RAID 1。一组 RAID 3T 作为照片存储，第二组 3T 是提供给蜜獾超存安装的服务提供数据存储服务，光驱位扩展一个 SSD 充当缓存盘就完事了。</p>
<p>经过一番折腾倔强的 J1900 扛不住压力，从咸鱼分别入了 17x17 豆希 ITX 主板，定制了 flex 电源，<a href="https://www.bilibili.com/read/cv9438621#reply149844420272">改了静音风扇</a>，配上 8700es CPU，PDD 入的单条 32G 内存和<a href="https://twitter.com/icyleaf/status/1416395829858869249">酷兽 256G M2 SSD</a>，复用蜜獾超存的机箱但它机身宽度较窄符合要求的只有利民 AXP90 x36，机箱后出风用都是酷冷的漩涡 80 静音风扇。</p>
<p>系统继续使用 Proxmox 设置备份还原工具<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>后用 VMs 跑 <a href="https://github.com/jellyfin/jellyfin">jellyfin</a>, <a href="https://github.com/portainer/portainer">portainer</a>, <a href="https://github.com/dani-garcia/vaultwarden">vaultwarden</a>, <a href="https://github.com/louislam/uptime-kuma">uptime kuma</a>, <a href="https://github.com/traefik/traefik">traefik</a> 等监控、数据库、应用服务，存储方面酷兽 SSD 作为系统盘，<a href="https://twitter.com/icyleaf/status/1228626720489537537">闲置的 4 块硬盘</a>组了 btrfs RAID 10，第五块做 3T 做电影、电视剧下载盘，最后一块是备用。</p>
<p>通过两次硬件升级淘汰的主机也都没有失去价值</p>
<ul>
<li>J1900 板 U 卖了也不值几个钱，干脆新套了<a href="https://twitter.com/icyleaf/status/1561341317778575363/">MAXT 小机箱</a>用于测试新的试验田捣腾其他稀奇古怪的系统、服务，并赋予新代号 <a href="https://en.wikipedia.org/wiki/Deadpool">Deadpool</a></li>
<li>N270 软路由在爆发疫情初期寄给了需要的武汉朋友</li>
</ul>
<h4 id="2022--2023">2022 ~ 2023</h4>
<blockquote>
<p>实际上是 2022 整年的版本，后续有变化会再更新。</p>
</blockquote>













  
  
    
      <figure data-pswp="4644x3342" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/homelab-diagram-v2.1.png" class="gallery-item" target="_blank" data-pswp-width="4644" data-pswp-height="3342"><img src="/tutorials/how-to-homelab/part-1/homelab-diagram-v2.1_hu2e07676c2790f7a793b80a519fce3f89_1014582_800x0_resize_box_3.png"
      alt="首发"/></a><figcaption><p class="source">首发<a href="https://twitter.com/icyleaf/status/1619228928685801474">@icyleaf@twitter</a>
    </p>

    <p>v2.1 设备架构拓扑图</p></figcaption></figure>

<p>原计划是可以安心跑个 1 - 2 年不太可能会有什么大变化，只需要在基于 Proxmox 系统继续试验并搞定多 VMs 跑 k8s/k3s 集群后就能安心养老，两次事故打乱了我的规划。一次是升级至 64G 内存后<a href="https://twitter.com/icyleaf/status/1534419122427408385">挂了块硬盘</a>，幸好从 RAID 移除后还能<a href="https://twitter.com/icyleaf/status/1534543188333297665">正常工作</a>；第二次直接 All in one boom 原因是 <a href="https://twitter.com/icyleaf/status/1583461623179509761">CPU 散热风扇无法工作</a>。在采购风扇和优化机箱风道期间给了我反思的过程，我明明是排斥 All in one 设计的结果自己主力开发机也是这样的设计，服务越多则越要保证服务可用性，那就要新添至少 1 - 2 新主机但家里真的没有更多的地方，翻阅国内外的资料目标锁定了几个目标：</p>
<ul>
<li><a href="https://homelab.khuedoan.com/">NEC M700</a>: 6 代，魔改支持 7/8/9 代</li>
<li><a href="https://rpi4cluster.com/">树莓派 4B</a>: 有丰富的成功案例但价格简直一个离谱<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></li>
<li><a href="https://v2ex.com/t/878188">荣品 king3399</a>: RK3399 性能强但我没赶上车价格被炒上去且 2G 内存有点小</li>
</ul>
<p>某天在闲鱼刷推荐线看到一个比荣品 king3399 更好的 <a href="https://twitter.com/icyleaf/status/1586636664457551872">EAIDK 610</a> RK3399 开发板 4G 内存价格才 200 出头，尝试买了两个又在 <a href="https://twitter.com/icyleaf/status/1598302816938127360">anbutu</a> 和社区 <a href="https://gitee.com/e190/armbian/">eaidk-610 armbian-build 项目</a>的帮助下成功编译并烧录了 armbian 系统，跑通 k3s 服务后又入了两个和 Proxmox 的 VMs 组成了 amd86 和 arm86 的混合集群。</p>













  
  
    
      <figure data-pswp="1536x2048" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/eaidk-610.jpg" class="gallery-item" target="_blank" data-pswp-width="1536" data-pswp-height="2048"><img src="/tutorials/how-to-homelab/part-1/eaidk-610_hu074222726f2aa0440c99e8e5bdbae569_466590_800x0_resize_q75_box.jpg"
      alt="首发"/></a><figcaption><p class="source">首发<a href="https://twitter.com/icyleaf/status/1585792876235005953">@icyleaf@twitter</a>
    </p>

    <p>EAIDK 610 开发板</p></figcaption></figure>

<p>就这上面集群测试跑通的同时 J1900 主机也完成了对 <a href="https://twitter.com/icyleaf/status/1579499063577554945">nomad</a> 服务的试水并逐步稳定下来，后面也可以和 Proxmox VMs 组成混合集群。</p>
<p>内网穿透方面除了公网加端口之外多了 <a href="https://twitter.com/icyleaf/status/1539849981598740480">traefik hub</a> 方案。作为最早一批内测用户还额外拥有更多的免费额度，现在免费版限制最大 5 个公网服务。</p>
<p>Gen 8 在更换新的氦气盘转移数据有大量的视频转码工作要跑 CPU 有点吃不消，闲鱼 1230v2 价格 150 <a href="https://twitter.com/icyleaf/status/1564962797372395520">收了它</a>继续卖命，群晖<a href="https://twitter.com/icyleaf/status/1565176566535323649">需要修改</a>才能正确识别新 U。</p>
<h2 id="我的设备选择">我的设备选择</h2>
<blockquote>
<p>用了很长的篇幅介绍了我的设备演变史，从文字和拓扑图大家已经了解了七七八八，为了方便理解这里会再汇总一份供大家赏阅。在软硬件的折腾方面我总能想起<a href="https://www.gracecode.com/posts/3191.html">明城</a>大哥。</p>
</blockquote>
<p>软硬件我采用的是 <a href="https://www.thoughtworks.com/zh-cn/radar">thoughtworks 技术雷达</a> 的策略把任何一个方案划分成<code>评估</code>、<code>试验</code>、<code>采纳</code>和<code>暂缓</code> 4 个阶段，因此会包含很多解决方案，标记<code>采纳</code>的可安心服用。</p>
<h3 id="硬件">硬件</h3>
<div >
  
<table>
<thead><tr><th>主机代号</th>
<th>系统</th>
<th>阶段</th>
<th>数量</th>
<th>用途</th>
</tr></thead>
<tbody>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Immortal">Immortal</a> <sup>amd64</sup>
  <br />9700k/32G/6TB/6600xt
</td>
<td>macOS<br />Windows</td>
<td><span class="badge bg-success">采纳</span></td>
<td>1</td>
<td>个人生产力工具</td>
</tr>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Queen_(StarCraft_II)">Queen</a> <sup>amd64</sup><br />
  HP Gen8 (1230v2/8G/40TB)
</td>
<td>群晖</td>
<td><span class="badge bg-success">采纳</span></td>
<td>1</td>
<td>NAS</td>
</tr>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Corruptor">Corruptor</a> <sup>amd64</sup><br />
  蜜獾超存 (8700es/64G/10TB)
</td>
<td>Proxmox</td>
<td><span class="badge bg-success">采纳</span></td>
<td>1</td>
<td>虚拟开发机</td>
</tr>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Bunker">Bunker</a> <sup>amd64</sup><br />
  J1900/8G/1TB
</td>
<td>Debian</td>
<td><span class="badge bg-success">采纳</span></td>
<td>1</td>
<td>Nomad 集群成员</td>
</tr>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Larva_(StarCraft_II)">Larva</a> <sup>amd64</sup><br />
  E3845/2G/16GB/i211<small>x4</small>
</td>
<td>Openwrt</td>
<td><span class="badge bg-success">采纳</span></td>
<td>1</td>
<td>软路由</td>
</tr>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Splitter">Splitter</a> <sup>arm64</sup><br />
  EAIDK610 (RK3399/4G/6+128GB)
</td>
<td>Armbian</td>
<td><span class="badge bg-warning">试验</span></td>
<td>4</td>
<td>k3s 集群</td>
</tr>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Colossus">Colossus</a> <sup>arm64</sup><br />
  Apple TV 2021(4K/32G)
</td>
<td>Apple TV</td>
<td><span class="badge bg-success">采纳</span></td>
<td>1</td>
<td>新电视盒子</td>
</tr>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Lair">Lair</a> <sup>armv8</sup><br />
  H96 Pro+ (S912/4G/32GB)
</td>
<td>Android TV</td>
<td><span class="badge bg-success">采纳</span></td>
<td>1</td>
<td>备用电视盒子</td>
</tr>
<tr>
<td>
  <a href="https://starcraft.fandom.com/wiki/Drone">Drone</a> <sup>arm64</sup><br />
  Orange Pi 3 LTS
</td>
<td>Armbian</td>
<td><span class="badge bg-notice">评估</span></td>
<td>1</td>
<td>未完成的 IP KVM</td>
</tr>
</tbody></table>

</div>

<p>当主机出现故障需要维护时需要单独的显示器和键鼠，更好的解决方案是 <a href="https://github.com/stars/icyleaf/lists/ip-kvm">IP KVM</a>。现有方案要么仅支持树莓派 4B，要么需要两个开发板。我曾使用树莓派 3B 和 <a href="https://twitter.com/icyleaf/status/1539975823670710274">香橙派 3LTS</a> 刷入 <a href="https://github.com/tiny-pilot/tinypilot">tinypilot</a> 只能开启 HDMI 画面采集，无法模拟键鼠操作。</p>
<p>偏向底层及硬件一直是我的弱项，我想世界末日了我们这些写软件服务的都会在第一时间挂了吧，哈哈哈。</p>
<h4 id="硬盘">硬盘</h4>
<p>在个人能力范围内优先级考虑：<code>M2 SSD</code> &gt; <code>SATA SSD</code> &gt; <code>氦气盘</code> &gt; <code>非叠瓦盘</code>，这方面我也看着大家的建议买，建议是硬盘太多做好整理，尤其是购买时间，购买渠道，购买数量，硬盘编号，保质年限，过保时间以及定期的 SMART 检测数据记录。</p>













  
  
    
      <figure data-pswp="949x1253" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/harddisk-2022-full.png" class="gallery-item" target="_blank" data-pswp-width="949" data-pswp-height="1253"><img src="/tutorials/how-to-homelab/part-1/harddisk-2022-full_hud081e0864bcc4ffbf16f9ee8e8cfcbbf_501693_800x0_resize_box_3.png"/></a><figcaption>

    <p>硬盘大军</p></figcaption></figure>














  
  
    
      <figure data-pswp="1512x1538" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/harddisk-category.png" class="gallery-item" target="_blank" data-pswp-width="1512" data-pswp-height="1538"><img src="/tutorials/how-to-homelab/part-1/harddisk-category_hube521c0ab503d096d3459f577944019e_171022_800x0_resize_box_3.png"/></a><figcaption>

    <p>硬盘分布情况</p></figcaption></figure>

<h4 id="ups-电源">UPS 电源</h4>
<p>一次电力的闪断更有可能让服务器硬件（尤其是的硬盘）就会出现故障而坏掉，保证硬件和数据的安全性 UPS 电源是必备的，优先考虑支持通讯的，因为停电虽然有 UPS 可以用电池模式继续保持运行，电池电量是有限的服务器如果知道当前的状态进行安全关机。</p>
<div >
  
<table>
<thead><tr>
<th>UPS 设备</th>
<th>辐射范围</th>
<th>描述</th>
</tr></thead>
<tbody>
<tr>
<td>APC BK650</td>
<td>Proxmox + 黑群晖 + WIFI AP</td>
<td>连接 Proxmox 并开启 NUT 服务和<br /> apcupsd 数据接入 Prometheus</td>
</tr>
<tr>
<td>APC BK650</td>
<td>黑苹果 + Armbian 集群 + Nomad</td>
<td>连接 Nomad 并开启 NUT 服务<br /> apcupsd 数据接入 Prometheus</td>
</tr>
<tr>
<td><a href="https://twitter.com/icyleaf/status/1590351704020910080">弱电箱 UPS</a></td>
<td>光猫 + 软路由 + 交换机</td>
<td>软路由接受其他两个 NUT 通知<br />四口 12V 还富裕一个</td>
</tr>
</tbody></table>

</div>

<p>我只使用过施耐德 APC 带有通讯协议的 UPS 基本上可通过 <a href="http://www.apcupsd.org/">apcupsd</a> 或 NUT（绝大多数 NAS 系统比如群晖、威联通等都支持）通过该服务可以让没有直接插通讯线的设备也能过接收到通知并执行安全关机操作<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>。</p>
<h3 id="软件">软件</h3>
<h4 id="操作系统">操作系统</h4>
<div >
  
<table>
<thead><tr><th>操作系统</th>
<th>阶段</th>
<th>描述</th>
</tr></thead>
<tbody>
<tr>
<td><a href="https://www.proxmox.com/">proxmox</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>高可玩性且兼具自动化管理的虚拟机系统</td>
</tr>
<tr>
<td><a href="https://www.debian.org/">debian</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>作为服务器个人最熟悉的基础 amd64 OS</td>
</tr>
<tr>
<td><a href="https://www.armbian.com/">armbian</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>ARM 版本的 Debian，理由同上</td>
</tr>
<tr>
<td><a href="https://openwrt.org/">openwrt</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>可玩性很高的开源软路由系统</td>
</tr>
<tr>
<td><a href="https://www.talos.dev/">talos</a></td>
<td><span class="badge bg-warning">试验</span></td>
<td>100% API 管理且支持多部署环境的基于 k8s 实现的发行版</td>
</tr>
<tr>
<td><a href="https://pi-hole.net/">pi-hole</a></td>
<td><span class="badge bg-warning">试验</span></td>
<td>国外非常流行的 DNS 管理系统，界面友好</td>
</tr>
<tr>
<td><a href="https://rockstor.com/">rockstor</a></td>
<td><span class="badge bg-notice">评估</span></td>
<td>基于 openSUSE + btrfs 的 NAS 系统，支持 SMART 和 NUT<br />注意<a href="https://twitter.com/icyleaf/status/1610885440961404929">不兼容 Asia/Beijing 时区</a></td>
</tr>
<tr>
<td><a href="https://kairos.io/">kairos</a></td>
<td><span class="badge bg-notice">评估</span></td>
<td>新发布的容器化系统，感兴趣但还没成功跑通</td>
</tr>
<tr>
<td><a href="https://www.truenas.com/">truenas</a></td>
<td><span class="badge bg-notice">评估</span></td>
<td>基于 FreeBSD 开发的 NAS 系统（ZFS 首选）</td>
</tr>
<tr>
<td><a href="https://www.openmediavault.org/">omv</a></td>
<td><span class="badge bg-danger">暂缓</span></td>
<td>完成度高的 NAS 系统但个人无爱</td>
</tr>
<tr>
<td><a href="https://vmware.github.io/photon/">photonOS</a></td>
<td><span class="badge bg-danger">暂缓</span></td>
<td>Vmware 虚拟化优化但嫌弃 redhat 系统</td>
</tr>
<tr>
<td><a href="https://www.tritondatacenter.com/smartos">smarterOS</a></td>
<td><span class="badge bg-danger">暂缓</span></td>
<td>支持虚拟化和 ZFS 但依赖高内存成度的 NAS 系统但个人无爱</td>
</tr>
</tbody></table>

</div>

<p>性能强大的机器以 Proxmox 作为宿主机内部套 Debian 或 Armbian 来跑所需的服务或基于容器化技术的编排管理服务或容器化系统（Linux Container OS<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>）</p>
<h4 id="文件系统">文件系统</h4>
<div >
  
<table>
<thead><tr><th>类型</th>
<th>阶段</th>
<th>描述</th>
</tr></thead>
<tbody>
<tr>
<td>btrfs</td>
<td><span class="badge bg-success">采纳</span></td>
<td>磁盘管理方便，支持快照和 COW</td>
</tr>
<tr>
<td>ext4</td>
<td><span class="badge bg-success">采纳</span></td>
<td>最保险的文件系统</td>
</tr>
<tr>
<td>zfs</td>
<td><span class="badge bg-notice">评估</span></td>
<td>强健可靠、可伸缩、易于管理就是吃内存</td>
</tr>
<tr>
<td>xfs</td>
<td><span class="badge bg-notice">评估</span></td>
<td>据说速度很快，个人没有太多研究<br />talos <a href="https://www.talos.dev/v1.3/learn-more/architecture/">默认文件系统</a></td>
</tr>
</tbody></table>

</div>

<p>个人优先级选择 <code>btrfs</code> &gt; <code>ext4</code> &gt; <code>zfs</code> &gt; <code>xfs</code>。注意的是 btrfs 现阶段不建议使用 <a href="https://btrfs.wiki.kernel.org/index.php/Status#RAID56">RAID 5/6</a>，不太考虑 zfs 是组 RAID 后新增硬盘麻烦且有成本。xfs 真不了解，感兴趣的可以看下以上文件系统<a href="https://www.dimoulis.net/posts/benchmark-of-postgresql-with-ext4-xfs-btrfs-zfs/">在 PostgreSQL 的基准测试</a>。</p>
<p>对于 btrfs 我个人的看法是只有自己尝试过才知道结果，尽管 Promox <a href="https://www.proxmox.com/en/news/press-releases/proxmox-virtual-environment-7-0">7.0</a> 第一把 btrfs 作为<a href="https://pve.proxmox.com/wiki/BTRFS">技术预览</a>的情况下发布，我也做了小白鼠使用它在将近 2 年的时间内基本正常，只有一次小故障还是因淘宝买的垃圾硬盘质量太差出现太多的坏道。btrfs 在 RAID10 最低 4 块磁盘的前提下移除掉坏盘也能过正常工作（删减都做一次 <a href="https://btrfs.readthedocs.io/en/latest/Balance.html">balance</a> 即可），除此之外我并没有遇到任何问题。虽然 COW 特性会拖累磁盘 IO 现状也都能接受。</p>
<p>对 btrfs 感兴趣的小伙伴推荐看 <a href="https://twitter.com/Houge_Langley">@Houge</a> 的<a href="https://www.bilibili.com/video/BV1Fh411e7Wk/">教学视频</a>或者 openSUSE 官方推出的<a href="https://www.bilibili.com/video/BV115411u7bU/">入门教学视频</a>。用过或已入门 btrfs 的可深入阅读 <a href="https://farseerfc.me/zhs/btrfs-vs-zfs-difference-in-implementing-snapshots.html">btrfs 与 zfs 快照实现差异</a>，<a href="https://linuxhint.com/btrfs-vs-xfs-brief-comparison/">btrfs 与 xfs 对比</a>，<a href="https://markmcb.com/2020/01/07/five-years-of-btrfs/">Five Years of Btrfs</a> 和 <a href="https://it-notes.dragas.net/2018/10/13/btrfs-best-pratices/">BTRFS Best Practices</a> 做到心中有数。</p>
<h4 id="存储服务">存储服务</h4>
<div >
  
<table>
<thead><tr><th>服务</th>
<th>阶段</th>
<th>描述</th>
</tr></thead>
<tbody>
<tr>
<td>smb</td>
<td><span class="badge bg-success">采纳</span></td>
<td>兼容性和实用性最高，仅建议手动文件挂载使用</td>
</tr>
<tr>
<td>nfs</td>
<td><span class="badge bg-success">采纳</span></td>
<td>可作为最低保障数据挂载</td>
</tr>
<tr>
<td><a href="https://min.io/">minos</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>兼容 S3 应用的开源存储服务</td>
</tr>
<tr>
<td><a href="https://juicefs.com/">juicefs</a></td>
<td><span class="badge bg-warning">试验</span></td>
<td>S3 兼容且 POSIX 兼容性高的开源存储服务</td>
</tr>
<tr>
<td><a href="https://longhorn.io/">longhorn</a></td>
<td><span class="badge bg-warning">试验</span></td>
<td>简单好用的块存储开源服务，磁盘迁移<a href="https://twitter.com/icyleaf/status/1607372383245172737">很容易</a></td>
</tr>
<tr>
<td><a href="https://rook.github.io/">rook ceph</a></td>
<td><span class="badge bg-notice">评估</span></td>
<td>当下具有很大潜力的云原生存储服务<br />小集群或弱鸡 CPU 不建议使用</td>
</tr>
<tr>
<td><a href="https://github.com/openebs/Mayastor">mayastor</a></td>
<td><span class="badge bg-notice">评估</span></td>
<td>针对 NVME 优化的块存储服务</td>
</tr>
</tbody></table>

</div>

<p>存储方面之前都是 Samba、NFS 甚至只用 APF，直到 2022 年才正式开始在生产环境试验，尤其是针对 k8s 的存储我还是一个小白。</p>
<h4 id="容器化管理及编排服务">容器化管理及编排服务</h4>
<p><div >
  
<table>
<thead><tr><th>服务</th>
<th>阶段</th>
<th>描述</th>
</tr></thead>
<tbody>
<tr>
<td><a href="https://www.portainer.io/">portainer</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>支持 Docker/k3s/nomad 多种编排服务的管理服务
</div>
<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup><div >
  </td>
</tr>
<tr>
<td><a href="https://kubesphere.io/">kubesphere</a></td>
<td><span class="badge bg-danger">暂缓</span></td>
<td>新手和企业友好的 k8s 前端容器管理服务，整体来说有点重</td>
</tr>
<tr>
<td><a href="https://www.nomadproject.io/">nomad</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>入门门槛较低但缺乏教学资料的编排服务</td>
</tr>
<tr>
<td><a href="https://k3s.io/">k3s</a></td>
<td><span class="badge bg-warning">试验</span></td>
<td>针对边缘计算、物联网等场景进行了高度优化轻量级的 k8s 发行版</td>
</tr>
<tr>
<td><a href="https://kubernetes.io/">kubernetes</a></td>
<td><span class="badge bg-notice">评估</span></td>
<td>100% 正统血缘 k8s，不敢靠近 :D</td>
</tr>
<tr>
<td><a href="https://docs.docker.com/engine/swarm/">docker swarm</a></td>
<td><span class="badge bg-danger">暂缓</span></td>
<td>官方自己都快弃权的编排服务，不推荐</td>
</tr>
</tbody></table>

</div>
</p>
<p>Portainer 是一款新人友好的容器管理工具，至今我现在也还在用。k3s 也是最容易跨进 k8s 世界且 edge 友好的编排服务。</p>
<h4 id="网关">网关</h4>
<div >
  
<table>
<thead><tr><th>服务</th>
<th>阶段</th>
<th>描述</th>
</tr></thead>
<tbody>
<tr>
<td><a href="https://doc.traefik.io/traefik/">traefik</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>个人认为最好用的网关服务</td>
</tr>
<tr>
<td><a href="https://caddyserver.com/">caddy</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>简单好用的支持 Let's Encrypt 的网关服务</td>
</tr>
<tr>
<td><a href="https://www.nginx.com/">nginx</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>管理多域名可考虑 <a href="https://nginxproxymanager.com">nginx proxy manager</a></td>
</tr>
</tbody></table>

</div>

<p>虽然都是标记的<code>采纳</code>，我主要用前两个，网关首推 traefik，简单使用 caddy，前两个简单好用功能还强大我想不出来理由用第三个。</p>
<h4 id="自动化部署">自动化部署</h4>
<div >
  
<table>
<thead><tr><th>服务</th>
<th>阶段</th>
<th>描述</th>
</tr></thead>
<tbody>
<tr>
<td><a href="https://www.ansible.com/">ansible</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>无代理（利用 SSH）就能自动化部署的配置工具</td>
</tr>
<tr>
<td><a href="https://www.terraform.io/">terraform</a></td>
<td><span class="badge bg-success">采纳</span></td>
<td>只要有接口管理的服务都能自动化部署的工具<br />还是 ansible 最佳排挡</td>
</tr>
<tr>
<td><a href="https://fluxcd.io/flux/">fluxcd</a></td>
<td><span class="badge bg-warning">试验</span></td>
<td>最好用的 gitops 里对 k8s 自动配置部署工具</td>
</tr>
<tr>
<td><a href="https://argo-cd.readthedocs.io/">argocd</a></td>
<td><span class="badge bg-warning">试验</span></td>
<td>gitops 里对 k8s 自动配置部署还有可视化拓扑图</td>
</tr>
<tr>
<td><a href="https://www.pulumi.com/">pulumi</a></td>
<td><span class="badge bg-warning">试验</span></td>
<td>支持多种原生语言配置版本的 terraform<br />实现架构优秀，使用者友好，插件开发者痛苦</td>
</tr>
<tr>
<td><a href="https://saltproject.io/">salt</a></td>
<td><span class="badge bg-danger">暂缓</span></td>
<td>有代理，当初一经面世就要碾压 ansible 的方案<br />看看市场的选择，它也不咋地嘛</td>
</tr>
</tbody></table>

</div>

<p>只要是跟操作系统打交道的 ansible + terraform 打遍天下无敌手！fluxcd 在对 k8s 服务配置和部署上确实找不出毛病，门槛有就看你能不能入门，建议在熟悉 k8s 基础概念和有一定实际部署经验后再使用。</p>
<h2 id="不容忽视的因素">不容忽视的因素</h2>
<p>大量的篇幅介绍了我个人 homelab 设备架构演变和软硬件的选择，还有什么容易忽略的因素呢？</p>
<p>如果把设备比做核心建筑，不容忽视的因素那就是基础建设。两手都要抓这样才能以确保 homelab 能够发挥最大的效能，谁也不想性能无法 100% 压榨或意外故障的发生。</p>
<h3 id="网线规格">网线规格</h3>
<p><strong><code>务必保证所有 homelab 的设备都接入千兆以上有线网络</code></strong>，WIFI 会收到周围信道干扰、传输衰减等不稳定性问题。</p>













  
  
    
      <figure data-pswp="1738x1182" data-size="800x"><a href="/tutorials/how-to-homelab/part-1/cable-ethernet-data-rates.png" class="gallery-item" target="_blank" data-pswp-width="1738" data-pswp-height="1182"><img src="/tutorials/how-to-homelab/part-1/cable-ethernet-data-rates_huf6595c4cf5b97c48e3a51bdfb2bf6182_107276_800x0_resize_box_3.png"
      alt="资料来源"/></a><figcaption><p class="source">资料来源<a href="https://www.ieee802.org/3/cfi/1114_1/CFI_01_1114.pdf">IEEE 802 LMSC</a>
    </p>

    <p>不同规格网线速率图</p></figcaption></figure>

<p><div >
  
<table>
<thead>
<tr>
<th>规格</th>
<th>类型</th>
<th>速率</th>
<th>接口</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>五类线<br /><sup>CAT 5</sup></td>
<td>100Base-T<br />10Base-T</td>
<td>100Mbps</td>
<td>RJ45</td>
<td>不推荐</td>
</tr>
<tr>
<td>超五类线<br /><sup>CAT 5E</sup></td>
<td>100Base-T</td>
<td>1000Mbps<br />2.5Gbps
</div>
<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup><div >
  </td>
<td>RJ45</td>
<td>2.5G 网络<a href="https://www.bilibili.com/video/BV1p14y137v3">仅限 100 米以内</a></td>
</tr>
<tr>
<td>六类线<br /><sup>CAT 6</sup></td>
<td>100Base-T</td>
<td>1Gbps<br />10Gbps</td>
<td>RJ45</td>
<td>万兆网络仅限 50 米内</td>
</tr>
<tr>
<td>超六类线<br /><sup>CAT 6A</sup></td>
<td>100Base-T</td>
<td>10Gbps</td>
<td>RJ45</td>
<td>200 米内可达万兆网络<br />没有 6E 标准</td>
</tr>
<tr>
<td>七类线<br /><sup>CAT 7</sup></td>
<td>100Base-T</td>
<td>10Gbps</td>
<td>GG45/TERA</td>
<td>带着遮蔽</td>
</tr>
<tr>
<td>光纤</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>不懂，详见<a href="https://zh.wikipedia.org/zh-cn/%E5%85%89%E7%BA%96%E9%80%9A%E8%A8%8A">维基百科</a></td>
</tr>
</tbody>
</table>

</div>
</p>
<p>再次重申 <strong><code>千兆以上网络是不可或缺的</code></strong>，最低限度使用 CAT 5E，强烈推荐使用 CAT 6/6A 规格，土豪们 CAT 7 或光纤随意。假如你不知道家里网络的状态提供两种方法检查：</p>
<ol>
<li>查看网线上面的印字会有网线规格标识</li>
<li>过 <a href="https://github.com/esnet/iperf">iperf3</a> 在两台任意可连接有线的设备充当服务器端和客户端进行检测。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1"># 一台开启服务端，假设服务器 IP 是 192.168.1.100</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">iperf3 -s
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"># 一台开客户端，连接服务端进行测试</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">iperf3 -c 192.168.1.100
</span></span></code></pre></div><h3 id="噪音和散热">噪音和散热</h3>
<ul>
<li>硬件
<ul>
<li>机械硬盘读写盘的噪音（有钱就全 SSD 或等待 <a href="https://twitter.com/icyleaf/status/1619937731777556486">EDSFF E1/E3 卡</a>民用）</li>
<li>风扇的轴承、转速和大小也会产生噪音（CPU 散热、显卡、机箱、电源等）</li>
<li>主板 DEBUG 蜂鸣器（有的可关闭或<a href="https://twitter.com/icyleaf/status/1432343002765139968">拆除</a>）</li>
</ul>
</li>
<li>软件
<ul>
<li>群晖为保障系统稳定性默认会全盘写入系统作为 backup 若要解决噪音问题建议<a href="https://twitter.com/icyleaf/status/1620093653791436800">策略性移除</a></li>
<li>Linux 系统可考虑使用 <a href="https://wiki.archlinux.org/title/fan_speed_control">lm-sensors</a> 侦测配置</li>
</ul>
</li>
<li>空间
<ul>
<li>摆放位置决定噪音耐受度和散热效率</li>
</ul>
</li>
</ul>
<h3 id="省电和功率">省电和功率</h3>
<p>CPU 的待机 TPW 只是参考，还需要考虑硬盘，内存和显卡整体，还需要考虑峰值功率，这块没有太多可展开的。要考虑能效但也不过分的在意，尤其是为了降低 5 - 10w TPW 而购买溢价过高的产品，这个在前篇的小结也有提到。</p>
<h2 id="小结">小结</h2>
<p>在 homelab 这条路上刚开始选什么硬件不重要， All in one 基本上是每个入门都会经历的，随着时间推移，就像房子需要维修、车子需要定期保养一样，服务的稳定性、数据安全性都需要关注和维护。</p>
<p>你可能会说我 all in one 几年了一切稳定，我只能说：没有经历过痛苦的人永远不会知道什么叫痛。</p>
<!-- raw HTML omitted -->
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>我记得是在<a href="https://bbs.nas66.com/">矿渣社区</a>看到的发车，后来看的<a href="https://post.smzdm.com/p/andr83k3/">阿文菌</a>的文章。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>官方提供<a href="https://pve.proxmox.com/wiki/Backup_and_Restore">备份和恢复</a>方法，Github Gist 也有<a href="https://gist.github.com/mrpeardotnet/6bdc4b504f43ce57fa7eaee96d376edf">备份脚本</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>以疫情为由成本上升，国内市场 4B 最高能卖到 1200，我吃灰的 3B 都卖了 600 块&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://blog.irain.in/archives/NUT_apcupsd_Synology_DSM_UPS.html">配置教程</a>和关机方案 <a href="https://blog.k8s.li/apcupsd-on-openwrt-with-esxi.html">1</a>、<a href="https://github.com/mingcheng/apcupsd_guarder">2</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>关于容器化 OS 可选性可以看看 <a href="https://blog.k8s.li/Photon-OS.html">Reimu 的博文</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Nomad 支持需要<a href="https://docs.portainer.io/admin/licenses">商业授权</a>，当前可以申请<a href="https://www.portainer.io/take-5"> 5 节点免费商业</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>带宽是 1000 进制，1Gbps = 1000Mbps = 千兆网络, 10Gbps = 万兆网络&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>Linux 101 系列：ssh OpenSSH 客户端工具</title><link>https://icyleaf.com/2014/01/linux-101-ssh/</link><pubDate>Wed, 22 Jan 2014 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2014/01/linux-101-ssh/</guid><description>当你敲下 ssh 为什么没连接成功到远程服务器</description><content:encoded><![CDATA[<blockquote>
<p>使用 *nix 服务器肯定会用到 ssh，它是一个链接到远程服务器终端的工具。</p>
</blockquote>
<h2 id="基本常识">基本常识</h2>
<h3 id="基本组成部分">基本组成部分</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ man ssh
</span></span><span class="line"><span class="ln">2</span><span class="cl">ssh <span class="o">[</span>-1246AaCfgKkMNnqsTtVvXxYy<span class="o">]</span> <span class="o">[</span>-b bind_address<span class="o">]</span> <span class="o">[</span>-c cipher_spec<span class="o">]</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">     <span class="o">[</span>-D <span class="o">[</span>bind_address:<span class="o">]</span>port<span class="o">]</span> <span class="o">[</span>-e escape_char<span class="o">]</span> <span class="o">[</span>-F configfile<span class="o">]</span> <span class="o">[</span>-I pkcs11<span class="o">]</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">     <span class="o">[</span>-i identity_file<span class="o">]</span> <span class="o">[</span>-L <span class="o">[</span>bind_address:<span class="o">]</span>port:host:hostport<span class="o">]</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">     <span class="o">[</span>-l login_name<span class="o">]</span> <span class="o">[</span>-m mac_spec<span class="o">]</span> <span class="o">[</span>-O ctl_cmd<span class="o">]</span> <span class="o">[</span>-o option<span class="o">]</span> <span class="o">[</span>-p port<span class="o">]</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">     <span class="o">[</span>-R <span class="o">[</span>bind_address:<span class="o">]</span>port:host:hostport<span class="o">]</span> <span class="o">[</span>-S ctl_path<span class="o">]</span> <span class="o">[</span>-W host:port<span class="o">]</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">     <span class="o">[</span>-w local_tun<span class="o">[</span>:remote_tun<span class="o">]]</span> <span class="o">[</span>user@<span class="o">]</span>hostname <span class="o">[</span>command<span class="o">]</span>
</span></span></code></pre></div><p>有没有被帮助手册的参数吓到，那我们精简一下：</p>
<blockquote>
<p>ssh [user@]hostname [-p port]</p>
</blockquote>
<p>登录到远程服务器和登录本地电脑系统没什么大的区别，都需要用户名，密码，除此之外我们还需要知道远程服务器的地址（IP 地址或域名均可）及允许的端口（默认 22 端口）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ ssh root@10.10.10.10 -p <span class="m">22</span>
</span></span></code></pre></div><p>有些时候大家发现一些教程没有提到用户，实际上 ssh 很聪明，默认会使用当前系统的用户名：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="o">(</span>icyleaf<span class="o">)</span> $ ssh 10.10.10.10
</span></span></code></pre></div><p>这个就等同于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ ssh icyleaf@10.10.10.10
</span></span></code></pre></div><p>有些服务器可能为了安全期间修改了默认的端口，比如 2020：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ ssh icyleaf@10.10.10.10 -p <span class="m">2020</span>
</span></span></code></pre></div><h3 id="高级参数">高级参数</h3>
<h4 id="socket-代理">Socket 代理</h4>
<p>呐，你可能因为 GFW 的威力，尝试使用 ssh 的 socket 代理，实际上就是用到的 <code>-D</code> 参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">-D <span class="o">[</span>bind_address:<span class="o">]</span>port
</span></span><span class="line"><span class="ln">2</span><span class="cl">   Specifies a <span class="nb">local</span> <span class="sb">``</span>dynamic application-level port forwarding.
</span></span><span class="line"><span class="ln">3</span><span class="cl">   This works by allocating a socket to listen to port on the <span class="nb">local</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">   side, optionally bound to the specified bind_address.  Whenever a
</span></span><span class="line"><span class="ln">5</span><span class="cl">   connection is made to this port, the connection is forwarded over
</span></span><span class="line"><span class="ln">6</span><span class="cl">   the secure channel, and the application protocol is <span class="k">then</span> used to
</span></span><span class="line"><span class="ln">7</span><span class="cl">   determine where to connect to from the remote machine.  Currently
</span></span><span class="line"><span class="ln">8</span><span class="cl">   the SOCKS4 and SOCKS5 protocols are supported, and ssh will act
</span></span><span class="line"><span class="ln">9</span><span class="cl">   as a SOCKS server.  Only root can forward privileged ports.
</span></span></code></pre></div><p>我们来简单画下它的工作流程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">|----client----|                    |-----server----|
</span></span><span class="line"><span class="ln">2</span><span class="cl">|              |                    |               |
</span></span><span class="line"><span class="ln">3</span><span class="cl">|   local port&lt;|  &lt;incoming         |               |
</span></span><span class="line"><span class="ln">4</span><span class="cl">|    ssh port&lt;&gt;|  &lt;--------------&gt;  |&lt;&gt; ssh port    |
</span></span><span class="line"><span class="ln">5</span><span class="cl">                                    |    forwarding&gt;|  &gt;outgoing connection
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">                                     &lt;&lt;&lt;------------local network-----------
</span></span></code></pre></div><p>它首先需要登录到远程服务器，并把本地的请求全部转发到服务器指定的端口上，然后通过由服务器再去请求。例如我们设置 8624 端口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ ssh -D8624 icyleaf@10.10.10.10 -p <span class="m">22</span>
</span></span></code></pre></div><p>这样保持这个连接，我们在设置浏览器或系统的 socket4/5 代理就能达到翻墙的目的。当前这个最大的前提是你的服务器在不手 GFW 的控制下（任意海外未被 GFW 服务器）</p>
<h4 id="跳板代理">跳板代理</h4>
<p>或许曾经你在看某本黑客杂志或电影出现过这样的片段，黑客使用肉鸡跳板不断的增加难度避开警察的追踪，实际上我们通过 ssh 也能非常简单又很酷的实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">-L [bind_address:]port:host:hostport
</span></span><span class="line"><span class="ln">2</span><span class="cl">   Specifies that the given port on the local (client) host is to be
</span></span><span class="line"><span class="ln">3</span><span class="cl">   forwarded to the given host and port on the remote side.  This
</span></span><span class="line"><span class="ln">4</span><span class="cl">   works by allocating a socket to listen to port on the local side,
</span></span><span class="line"><span class="ln">5</span><span class="cl">   optionally bound to the specified bind_address.  Whenever a con-
</span></span><span class="line"><span class="ln">6</span><span class="cl">   nection is made to this port, the connection is forwarded over
</span></span><span class="line"><span class="ln">7</span><span class="cl">   the secure channel, and a connection is made to host port
</span></span><span class="line"><span class="ln">8</span><span class="cl">   hostport from the remote machine.
</span></span></code></pre></div><p>同样给出工作流程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">|----client----|                    |-----server----|                 |-----host-----|
</span></span><span class="line"><span class="ln">2</span><span class="cl">|              |                    |               |                 |              |
</span></span><span class="line"><span class="ln">3</span><span class="cl">|   local port&lt;|  &lt;incoming         |               |                 |              |
</span></span><span class="line"><span class="ln">4</span><span class="cl">|    ssh port&lt;&gt;|  &lt;--------------&gt;  |&lt;&gt; ssh port    |                 |              |
</span></span><span class="line"><span class="ln">5</span><span class="cl">                                    |    forwarding&gt;|  -------------&gt; |&gt;host port    |
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">                                     &lt;&lt;&lt;------------local network-------------------&gt;&gt;&gt;
</span></span></code></pre></div><p>实际上我只需要操作 <code>-L [bind_address:]port:host:hostport</code> 即可。这里假设我们想登录的目标服务器 target(10.10.10.10)，而我们希望在肉鸡 chicken(20.20.20.20) 上做成跳板：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ ssh -L2020:20.20.20.20:22 10.10.10.10
</span></span></code></pre></div><h3 id="简化配置">简化配置</h3>
<p>反复的输入这些繁琐的参数，甚是苦恼，能不能通过一种起个别名就能把上面的参数全部自动设置好呢？！没问题！</p>
<p>创建 <code>~/.ssh/config</code> 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">Host linode
</span></span><span class="line"><span class="ln">2</span><span class="cl">HostName 10.10.10.10
</span></span><span class="line"><span class="ln">3</span><span class="cl">Port <span class="m">22</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">User icyleaf
</span></span></code></pre></div><p>这个就是基本组成部分。如果你想配置更多，下面是完整的参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln"> 1</span><span class="cl">AddressFamily
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">BatchMode
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">BindAddress
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">ChallengeResponseAuthentication
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">CheckHostIP
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">Cipher
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">Ciphers
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">ClearAllForwardings
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">Compression
</span></span><span class="line"><span class="ln">10</span><span class="cl">CompressionLevel
</span></span><span class="line"><span class="ln">11</span><span class="cl">ConnectionAttempts
</span></span><span class="line"><span class="ln">12</span><span class="cl">ConnectTimeout
</span></span><span class="line"><span class="ln">13</span><span class="cl">ControlMaster
</span></span><span class="line"><span class="ln">14</span><span class="cl">ControlPath
</span></span><span class="line"><span class="ln">15</span><span class="cl">ControlPersist
</span></span><span class="line"><span class="ln">16</span><span class="cl">DynamicForward
</span></span><span class="line"><span class="ln">17</span><span class="cl">EscapeChar
</span></span><span class="line"><span class="ln">18</span><span class="cl">ExitOnForwardFailure
</span></span><span class="line"><span class="ln">19</span><span class="cl">ForwardAgent
</span></span><span class="line"><span class="ln">20</span><span class="cl">ForwardX11
</span></span><span class="line"><span class="ln">21</span><span class="cl">ForwardX11Timeout
</span></span><span class="line"><span class="ln">22</span><span class="cl">ForwardX11Trusted
</span></span><span class="line"><span class="ln">23</span><span class="cl">GatewayPorts
</span></span><span class="line"><span class="ln">24</span><span class="cl">GlobalKnownHostsFile
</span></span><span class="line"><span class="ln">25</span><span class="cl">GSSAPIAuthentication
</span></span><span class="line"><span class="ln">26</span><span class="cl">GSSAPIDelegateCredentials
</span></span><span class="line"><span class="ln">27</span><span class="cl">HashKnownHosts
</span></span><span class="line"><span class="ln">28</span><span class="cl">Host
</span></span><span class="line"><span class="ln">29</span><span class="cl">HostbasedAuthentication
</span></span><span class="line"><span class="ln">30</span><span class="cl">HostKeyAlgorithms
</span></span><span class="line"><span class="ln">31</span><span class="cl">HostKeyAlias
</span></span><span class="line"><span class="ln">32</span><span class="cl">HostName
</span></span><span class="line"><span class="ln">33</span><span class="cl">IdentityFile
</span></span><span class="line"><span class="ln">34</span><span class="cl">IdentitiesOnly
</span></span><span class="line"><span class="ln">35</span><span class="cl">IPQoS
</span></span><span class="line"><span class="ln">36</span><span class="cl">KbdInteractiveAuthentication
</span></span><span class="line"><span class="ln">37</span><span class="cl">KbdInteractiveDevices
</span></span><span class="line"><span class="ln">38</span><span class="cl">KexAlgorithms
</span></span><span class="line"><span class="ln">39</span><span class="cl">LocalCommand
</span></span><span class="line"><span class="ln">40</span><span class="cl">LocalForward
</span></span><span class="line"><span class="ln">41</span><span class="cl">LogLevel
</span></span><span class="line"><span class="ln">42</span><span class="cl">MACs
</span></span><span class="line"><span class="ln">43</span><span class="cl">NoHostAuthenticationForLocalhost
</span></span><span class="line"><span class="ln">44</span><span class="cl">NumberOfPasswordPrompts
</span></span><span class="line"><span class="ln">45</span><span class="cl">PasswordAuthentication
</span></span><span class="line"><span class="ln">46</span><span class="cl">PermitLocalCommand
</span></span><span class="line"><span class="ln">47</span><span class="cl">PKCS11Provider
</span></span><span class="line"><span class="ln">48</span><span class="cl">Port
</span></span><span class="line"><span class="ln">49</span><span class="cl">PreferredAuthentications
</span></span><span class="line"><span class="ln">50</span><span class="cl">Protocol
</span></span><span class="line"><span class="ln">51</span><span class="cl">ProxyCommand
</span></span><span class="line"><span class="ln">52</span><span class="cl">PubkeyAuthentication
</span></span><span class="line"><span class="ln">53</span><span class="cl">RekeyLimit
</span></span><span class="line"><span class="ln">54</span><span class="cl">RemoteForward
</span></span><span class="line"><span class="ln">55</span><span class="cl">RequestTTY
</span></span><span class="line"><span class="ln">56</span><span class="cl">RhostsRSAAuthentication
</span></span><span class="line"><span class="ln">57</span><span class="cl">RSAAuthentication
</span></span><span class="line"><span class="ln">58</span><span class="cl">SendEnv
</span></span><span class="line"><span class="ln">59</span><span class="cl">ServerAliveInterval
</span></span><span class="line"><span class="ln">60</span><span class="cl">ServerAliveCountMax
</span></span><span class="line"><span class="ln">61</span><span class="cl">StrictHostKeyChecking
</span></span><span class="line"><span class="ln">62</span><span class="cl">TCPKeepAlive
</span></span><span class="line"><span class="ln">63</span><span class="cl">Tunnel
</span></span><span class="line"><span class="ln">64</span><span class="cl">TunnelDevice
</span></span><span class="line"><span class="ln">65</span><span class="cl">UsePrivilegedPort
</span></span><span class="line"><span class="ln">66</span><span class="cl">User
</span></span><span class="line"><span class="ln">67</span><span class="cl">UserKnownHostsFile
</span></span><span class="line"><span class="ln">68</span><span class="cl">VerifyHostKeyDNS
</span></span><span class="line"><span class="ln">69</span><span class="cl">VisualHostKey
</span></span><span class="line"><span class="ln">70</span><span class="cl">XAuthLocation
</span></span></code></pre></div><h3 id="配置文件">配置文件</h3>
<p>刚才讲到的 <code>~/.ssh/config</code> 是配置 ssh 服务器的文件，其实除了这些还有好多，比如大家可能会经常见到的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln"> 1</span><span class="cl">~/.ssh/config
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  This is the per-user configuration file.  The file format and
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  configuration options are described in ssh_config(5).  Because of
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  the potential for abuse, this file must have strict permissions:
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  read/write for the user, and not accessible by others.
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">~/.ssh/authorized_keys
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  Lists the public keys (DSA/ECDSA/RSA) that can be used for log-
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  ging in as this user.  The format of this file is described in
</span></span><span class="line"><span class="ln">10</span><span class="cl">  the sshd(8) manual page.  This file is not highly sensitive, but
</span></span><span class="line"><span class="ln">11</span><span class="cl">  the recommended permissions are read/write for the user, and not
</span></span><span class="line"><span class="ln">12</span><span class="cl">  accessible by others.
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">~/.ssh/identity
</span></span><span class="line"><span class="ln">15</span><span class="cl">~/.ssh/id_dsa
</span></span><span class="line"><span class="ln">16</span><span class="cl">~/.ssh/id_ecdsa
</span></span><span class="line"><span class="ln">17</span><span class="cl">~/.ssh/id_rsa
</span></span><span class="line"><span class="ln">18</span><span class="cl">  Contains the private key for authentication.  These files contain
</span></span><span class="line"><span class="ln">19</span><span class="cl">  sensitive data and should be readable by the user but not acces-
</span></span><span class="line"><span class="ln">20</span><span class="cl">  sible by others (read/write/execute).  ssh will simply ignore a
</span></span><span class="line"><span class="ln">21</span><span class="cl">  private key file if it is accessible by others.  It is possible
</span></span><span class="line"><span class="ln">22</span><span class="cl">  to specify a passphrase when generating the key which will be
</span></span><span class="line"><span class="ln">23</span><span class="cl">  used to encrypt the sensitive part of this file using 3DES.
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">~/.ssh/identity.pub
</span></span><span class="line"><span class="ln">26</span><span class="cl">~/.ssh/id_dsa.pub
</span></span><span class="line"><span class="ln">27</span><span class="cl">~/.ssh/id_ecdsa.pub
</span></span><span class="line"><span class="ln">28</span><span class="cl">~/.ssh/id_rsa.pub
</span></span><span class="line"><span class="ln">29</span><span class="cl">  Contains the public key for authentication.  These files are not
</span></span><span class="line"><span class="ln">30</span><span class="cl">  sensitive and can (but need not) be readable by anyone.
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">~/.ssh/known_hosts
</span></span><span class="line"><span class="ln">33</span><span class="cl">  Contains a list of host keys for all hosts the user has logged
</span></span><span class="line"><span class="ln">34</span><span class="cl">  into that are not already in the systemwide list of known host
</span></span><span class="line"><span class="ln">35</span><span class="cl">  keys.  See sshd(8) for further details of the format of this
</span></span><span class="line"><span class="ln">36</span><span class="cl">  file.
</span></span></code></pre></div><p>更多文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln"> 1</span><span class="cl">~/.rhosts
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  This file is used for host-based authentication (see above).  On
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  some machines this file may need to be world-readable if the
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  user&#39;s home directory is on an NFS partition, because sshd(8)
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  reads it as root.  Additionally, this file must be owned by the
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  user, and must not have write permissions for anyone else.  The
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  recommended permission for most machines is read/write for the
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  user, and not accessible by others.
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">~/.shosts
</span></span><span class="line"><span class="ln">11</span><span class="cl">  This file is used in exactly the same way as .rhosts, but allows
</span></span><span class="line"><span class="ln">12</span><span class="cl">  host-based authentication without permitting login with
</span></span><span class="line"><span class="ln">13</span><span class="cl">  rlogin/rsh.
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">~/.ssh/
</span></span><span class="line"><span class="ln">16</span><span class="cl">  This directory is the default location for all user-specific con-
</span></span><span class="line"><span class="ln">17</span><span class="cl">  figuration and authentication information.  There is no general
</span></span><span class="line"><span class="ln">18</span><span class="cl">  requirement to keep the entire contents of this directory secret,
</span></span><span class="line"><span class="ln">19</span><span class="cl">  but the recommended permissions are read/write/execute for the
</span></span><span class="line"><span class="ln">20</span><span class="cl">  user, and not accessible by others.
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl">~/.ssh/environment
</span></span><span class="line"><span class="ln">23</span><span class="cl">  Contains additional definitions for environment variables; see
</span></span><span class="line"><span class="ln">24</span><span class="cl">  ENVIRONMENT, above.
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl">~/.ssh/rc
</span></span><span class="line"><span class="ln">27</span><span class="cl">  Commands in this file are executed by ssh when the user logs in,
</span></span><span class="line"><span class="ln">28</span><span class="cl">  just before the user&#39;s shell (or command) is started.  See the
</span></span><span class="line"><span class="ln">29</span><span class="cl">  sshd(8) manual page for more information.
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">/etc/hosts.equiv
</span></span><span class="line"><span class="ln">32</span><span class="cl">  This file is for host-based authentication (see above).  It
</span></span><span class="line"><span class="ln">33</span><span class="cl">  should only be writable by root.
</span></span><span class="line"><span class="ln">34</span><span class="cl">
</span></span><span class="line"><span class="ln">35</span><span class="cl">/etc/shosts.equiv
</span></span><span class="line"><span class="ln">36</span><span class="cl">  This file is used in exactly the same way as hosts.equiv, but
</span></span><span class="line"><span class="ln">37</span><span class="cl">  allows host-based authentication without permitting login with
</span></span><span class="line"><span class="ln">38</span><span class="cl">  rlogin/rsh.
</span></span><span class="line"><span class="ln">39</span><span class="cl">
</span></span><span class="line"><span class="ln">40</span><span class="cl">/etc/ssh/ssh_config
</span></span><span class="line"><span class="ln">41</span><span class="cl">  Systemwide configuration file.  The file format and configuration
</span></span><span class="line"><span class="ln">42</span><span class="cl">  options are described in ssh_config(5).
</span></span><span class="line"><span class="ln">43</span><span class="cl">
</span></span><span class="line"><span class="ln">44</span><span class="cl">/etc/ssh/ssh_host_key
</span></span><span class="line"><span class="ln">45</span><span class="cl">/etc/ssh/ssh_host_dsa_key
</span></span><span class="line"><span class="ln">46</span><span class="cl">/etc/ssh/ssh_host_ecdsa_key
</span></span><span class="line"><span class="ln">47</span><span class="cl">/etc/ssh/ssh_host_rsa_key
</span></span><span class="line"><span class="ln">48</span><span class="cl">  These files contain the private parts of the host keys and are
</span></span><span class="line"><span class="ln">49</span><span class="cl">  used for host-based authentication.  If protocol version 1 is
</span></span><span class="line"><span class="ln">50</span><span class="cl">  used, ssh must be setuid root, since the host key is readable
</span></span><span class="line"><span class="ln">51</span><span class="cl">  only by root.  For protocol version 2, ssh uses ssh-keysign(8) to
</span></span><span class="line"><span class="ln">52</span><span class="cl">  access the host keys, eliminating the requirement that ssh be
</span></span><span class="line"><span class="ln">53</span><span class="cl">  setuid root when host-based authentication is used.  By default
</span></span><span class="line"><span class="ln">54</span><span class="cl">  ssh is not setuid root.
</span></span><span class="line"><span class="ln">55</span><span class="cl">
</span></span><span class="line"><span class="ln">56</span><span class="cl">/etc/ssh/ssh_known_hosts
</span></span><span class="line"><span class="ln">57</span><span class="cl">  Systemwide list of known host keys.  This file should be prepared
</span></span><span class="line"><span class="ln">58</span><span class="cl">  by the system administrator to contain the public host keys of
</span></span><span class="line"><span class="ln">59</span><span class="cl">  all machines in the organization.  It should be world-readable.
</span></span><span class="line"><span class="ln">60</span><span class="cl">  See sshd(8) for further details of the format of this file.
</span></span><span class="line"><span class="ln">61</span><span class="cl">
</span></span><span class="line"><span class="ln">62</span><span class="cl">/etc/ssh/sshrc
</span></span><span class="line"><span class="ln">63</span><span class="cl">  Commands in this file are executed by ssh when the user logs in,
</span></span><span class="line"><span class="ln">64</span><span class="cl">  just before the user&#39;s shell (or command) is started.  See the
</span></span><span class="line"><span class="ln">65</span><span class="cl">  sshd(8) manual page for more information.
</span></span></code></pre></div><p>资料参考：</p>
<ol>
<li>[Linux] man ssh</li>
<li><a href="http://www.openfsg.com/index.php/Advanced_SSH_usage">Advanced SSH usage</a></li>
</ol>
]]></content:encoded></item><item><title>Git 和 Pager 的那点事</title><link>https://icyleaf.com/2013/10/about-pager-on-git/</link><pubDate>Wed, 16 Oct 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/10/about-pager-on-git/</guid><description>tig 是一个代替 Git Pager 的好工具</description><content:encoded><![CDATA[<blockquote>
<p>Git 几乎所有命令都提供分页器，即当命令输出超过一页时，自动在每页输出后暂停，可以按空格继续显示，按 q 退出。</p>
</blockquote>
<p>默认 git 的 <code>pager = less -FRSX</code>，这个可以通过两种方式更改：</p>
<p>命令：</p>
<pre tabindex="0"><code>$ git config --global core.pager &#34;less -FRSX&#34;
</code></pre><p>配置文件：</p>
<pre tabindex="0"><code>$ vim ~/.gitconfig
</code></pre><p>了不起了通过设置自动匹配的色彩来增强可读性</p>
<pre tabindex="0"><code>$ git config --global color.ui on
</code></pre><p>随着 <a href="http://jonas.nitro.dk/tig">tig</a> 的出现，给 git 的增加了一个强大武装武器。（不明观众看这里先对它有个感官概念：<a href="http://gitready.com/advanced/2009/07/31/tig-the-ncurses-front-end-to-git.html">tig, the ncurses front-end to Git</a>）</p>
<p>可能大家不知道 tig 本身就可以也是一个 pager，因此我们可以在 git config 默认替换之：</p>
<pre tabindex="0"><code>$ git config --global core.pager tig
</code></pre><p>自从这样配置之后，让我幸福了好几年。直到&hellip;今天发现一个怪异的问题，使用任何需要显示 tig pager 的地方设置的配色是以代码形式显示，而不是解析成了终端显示的颜色。最近忍不住升级到了 10.9 并更新了一些命令，因此也没搞清楚到底是哪里出了问题。只能先把 git 自带的 color 渲染给关闭才解决了这个问题</p>
<pre tabindex="0"><code>$ git config --global color.ui off
</code></pre><p>我的个人 <code>.gitconfig</code> 等配置文件：https://gist.github.com/icyleaf/868866</p>
]]></content:encoded></item><item><title>如何在 CentOS 上安装 Gitlab</title><link>https://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/</link><pubDate>Tue, 17 Sep 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/</guid><description>Barl Metal 安装服务依赖还是很痛苦的，CentOS 上是痛苦面具</description><content:encoded><![CDATA[<p>2013 年 08 月的 OpenParty &ldquo;<a href="http://www.beijing-open-party.org/event/25">花事如期</a>&rdquo; 活动上，<a href="https://github.com/vecio">晓东</a>在他的机器上演示了自建 Gitlab 的项目，看到 Gitlab 目前已经比较成熟，而不像早期寒碜的界面，这个时候看安装一下也是不错的事情，不过他们的项目文档只提供了 Ubuntu 系统的<a href="https://github.com/gitlabhq/gitlabhq#installation">安装文档</a>，对于 CentOS 没有提到，非官方的文档有比较老久，凭着之前熟悉 Ubuntu 和学习 CentOS，那就开始安装吧：</p>
<p>以下教程在 <code>CentOS 6 x86_64</code> 版本下操作。</p>
<h2 id="首先安装-epel-和编译依赖库">首先安装 EPEL 和编译依赖库</h2>
<pre tabindex="0"><code>$ rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</code></pre><blockquote>
<p>如果你是非 64 位，去上面的网址找到适合你发行版的最新版本的 epel rpm</p>
</blockquote>
<pre tabindex="0"><code>$ yum -y update
$ yum -y install gcc gcc-c++ make autoconf libyaml-devel gdbm-devel ncurses-devel openssl-devel zlib-devel readline-devel curl-devel expat-devel gettext-devel  tk-devel libxml2-devel libffi-devel libxslt-devel libicu-devel sendmail patch libyaml* pcre-devel sqlite-devel vim
</code></pre><h2 id="安装-python-27">安装 Python 2.7+</h2>
<p>Gitlab 要求 Python 2.5.5+ 以及 Ruby 1.9+</p>
<p>系统 Python 默认是 2.6.x，如果你想把 Python 升级到目前比较流行的 2.7.x 就参照下面步骤，否则直接跳过。（Gitlab 目前不支持 Python 3.0）</p>
<pre tabindex="0"><code>$ mkdir /tmp/gitlab &amp;&amp; cd /tmp/gitlab
$ curl --progress http://python.org/ftp/python/2.7.5/Python-2.7.5.tgz | tar xvf
$ cd Python-2.7.5
$ ./configure --prefix=/usr/local
$ make &amp;&amp; make altinstall
</code></pre><p>安装好之后，需要做两件事情，替换默认 python 的版本至最新版本，</p>
<pre tabindex="0"><code>$ sudo ln -s /usr/local/bin/python2.7 /usr/local/bin/python
</code></pre><blockquote>
<p>因为系统默认 <code>PATH</code> 的寻址路径是 <code>/usr/local/bin</code></p>
</blockquote>
<p>最后看下 Python 版本是否是刚刚安装的版本：</p>
<pre tabindex="0"><code>$ python --version
</code></pre><blockquote>
<p>由于 <code>yum</code> 是 python 的一个 module，所以这块修改可能会引起无法调用 yum 脚本，所以需要修改这个文件 <code>/usr/bin/yum</code> 的第一行为 <code>!#/usr/bin/python2.6</code></p>
</blockquote>
<h2 id="安装-ruby-20">安装 Ruby 2.0</h2>
<p>Ruby 1.9 和 2.0 的特性差别不大，索性升级至最新 2.0 版本即可</p>
<pre tabindex="0"><code>$ cd /tmp/gitlab
$ curl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p247.tar.gz | tar xz
$ cd ruby-2.0.0-p247
$ ./configure
$ make
$ make install
</code></pre><p>ruby 2.0 已经内置 gem (v2.0.3)，只需要安装 bundler</p>
<pre tabindex="0"><code>$ gem install bundler
</code></pre><blockquote>
<p>若在执行 <code>sudo ruby</code> 或 <code>sudo gem</code> 找不到命令，因为编译的路径配置到了 <code>/usr/local/bin</code>，我们只需要做下软链接到 root 用户可以找到的 <code>$PATH</code> 路径：</p>
</blockquote>
<pre tabindex="0"><code>$ ln -s /usr/local/bin/ruby /usr/bin/ruby
$ ln -s /usr/local/bin/gem /usr/bin/gem
$ ln -s /usr/local/bin/bundle /usr/bin/bundle
</code></pre><h2 id="安装-git-和-gitolite">安装 Git 和 Gitolite</h2>
<pre tabindex="0"><code>$ yum -y install git-all gitolite
</code></pre><h2 id="安装-nginx">安装 Nginx</h2>
<pre tabindex="0"><code>$ yum -y install nginx
$ service nginx start
</code></pre><blockquote>
<p>nginx 需要从 EPEL 中安装，默认系统没有 nginx 包。</p>
</blockquote>
<h2 id="安装-mysql-和-redis">安装 Mysql 和 Redis</h2>
<p>Gitlab 要求强制安装 redis 处理一些数据，另外支持 MySQL 和 PostgreSQL，这里主要以 MySQL 为例</p>
<pre tabindex="0"><code>$ yum -y install mysql mysql-devel mysql-server redis
</code></pre><p>配置 Mysql 和 gitlab 需要的用户和数据库</p>
<pre tabindex="0"><code>$ service mysqld start
$ mysql -u root
$ mysql&gt; CREATE USER &#39;gitlab&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;gitlab&#39;;
$ mysql&gt; CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
$ mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO &#39;gitlab&#39;@&#39;localhost&#39;;
$ mysql&gt; \q
</code></pre><p>Redis 使用默认配置即可，直接启动</p>
<pre tabindex="0"><code>$ service redis start
</code></pre><h2 id="添加-gitlab-用户">添加 Gitlab 用户</h2>
<pre tabindex="0"><code>$ useradd -c &#39;GitLab&#39; git
</code></pre><p>CentOS 的命令没有办法直接禁止用户的访问的参数，需要用下面命令：</p>
<pre tabindex="0"><code>$ passwd -l git
</code></pre><h2 id="安装-gitlab-shell">安装 Gitlab-shell</h2>
<p>使用 root 账户切换到 git 账户下操作，可以比官方教程省去一些麻烦的输入</p>
<pre tabindex="0"><code>$ su git &amp;&amp; cd /home/git
$ git clone https://github.com/gitlabhq/gitlab-shell.git
$ cd gitlab-shell
</code></pre><p>通过 <code>git tag</code> 查看最新版本并切换之</p>
<pre tabindex="0"><code>$ git checkout v1.7.1
</code></pre><p>编辑配置文件修改你要设定的域名（domain），比如 <code>http://gitlab.dev/</code></p>
<pre tabindex="0"><code>$ vim config.yml
</code></pre><p>完成之后执行安装脚本</p>
<pre tabindex="0"><code>$ ./bin/install
</code></pre><h2 id="安装-gitlab">安装 Gitlab</h2>
<pre tabindex="0"><code>$ cd /home/git
$ git clone https://github.com/gitlabhq/gitlabhq.git gitlab
$ cd /home/git/gitlab
</code></pre><p>通过 <code>git tag</code> 查看最新版本并切换之</p>
<pre tabindex="0"><code>$ git checkout 6.0.1
</code></pre><p>这里需要配置的东西多一些，这里参考<a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md#configure-it">官方的文档</a>，也可以安装我下面的步骤来：</p>
<pre tabindex="0"><code>$ cd /home/git/gitlab
</code></pre><p>复制配置文件，修改 host 相关的配置项，主要是 domain 要和上面的 <code>http://gitlab.dev</code></p>
<pre tabindex="0"><code>$ cp config.yml{.example,}
$ vim config/gitlab.yml
</code></pre><p>确认 gitlab 以下目录的权限是否正确</p>
<pre tabindex="0"><code>$ mkdir tmp/pids/
$ mkdir tmp/sockets/
$ chown -R git log/
$ chown -R git tmp/
$ chmod -R u+rwX log/
$ chmod -R u+rwX tmp/
$ chmod -R u+rwX tmp/pids/
$ chmod -R u+rwX tmp/sockets/
</code></pre><p>创建 satellites 目录，这个目录是保存各个用户的仓库</p>
<pre tabindex="0"><code>$ mkdir /home/git/gitlab-satellites
</code></pre><p>创建 uploads 目录（为什么 gitlab 不在项目中创建呢= =！）</p>
<pre tabindex="0"><code>$ mkdir public/uploads
$ chmod -R u+rwX  public/uploads
</code></pre><p>复制 unicorn 配置文件</p>
<pre tabindex="0"><code>$ cp config/unicorn.rb{.example,}
</code></pre><p>设置 ruby web 容器的参数，比如 2GB RAM 服务器可以设置 3 个 worker。</p>
<blockquote>
<p>如果系统其他服务占用了 unicorn 的端口，记得改名。</p>
</blockquote>
<pre tabindex="0"><code>$ vim config/unicorn.rb
</code></pre><p>设置一些 git 全局参数</p>
<pre tabindex="0"><code>$ git config --global user.name &#34;GitLab&#34;
$ git config --global user.email &#34;gitlab@localhost&#34;
$ git config --global core.autocrlf input
</code></pre><p>配置 gitlab 数据库设置</p>
<pre tabindex="0"><code>$ cp config/database.yml{.mysql,}
$ vim config/database.yml
$ chmod o-rwx config/database.yml
</code></pre><p>安装必需的 Ruby Gems</p>
<pre tabindex="0"><code>$ cd /home/git/gitlab
$ [sudo] gem install charlock_holmes --version &#39;0.6.9.4&#39;
$ bundle install --deployment --without development test postgres aws
</code></pre><p>初始化数据库数据（执行输入 <code>Yes</code> 继续创建）</p>
<pre tabindex="0"><code>$ bundle exec rake gitlab:setup RAILS_ENV=production
</code></pre><p>设置 init 脚本</p>
<pre tabindex="0"><code>$ sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab
$ sudo chmod +x /etc/init.d/gitlab
</code></pre><h2 id="检查-gitlab-状态">检查 Gitlab 状态</h2>
<pre tabindex="0"><code>$ bundle exec rake gitlab:env:info RAILS_ENV=production
</code></pre><p>启动 gitlab 服务</p>
<pre tabindex="0"><code>$ sudo service gitlab start
</code></pre><p>再起检查，保证所有项目都是绿色</p>
<pre tabindex="0"><code>$ bundle exec rake gitlab:check RAILS_ENV=production
</code></pre><h2 id="配置-nginx">配置 nginx</h2>
<p>根据 nginx 的安装路径适当修改下面的路径即可，我们先把 gitlab 提供的配置文件拷贝过去</p>
<pre tabindex="0"><code>$ sudo mkdir -p /etc/nginx/conf/sites/
$ sudo cp lib/support/nginx/gitlab /etc/nginx/conf/sites/gitlab.conf
</code></pre><blockquote>
<p>根据 nginx 版本和不同发行版的不同，配置结构可能不同根据你的实际情况加载 <code>gitlab.conf</code></p>
</blockquote>
<p>修改 <code>gitlab.conf</code> 的 <code>YOUR_SERVER_FQDN</code> 为上面设置的 domain。
最后修改 <code>nginx.conf</code> 或者 <code>default.conf</code> 加载 <code>/etc/nginx/conf/site</code> 下所有 conf 文件</p>
<pre tabindex="0"><code>http {

	include /etc/nginx/conf/site/*.conf;

	server {
		…
	}
}
</code></pre><p>保存后，重启各个服务</p>
<pre tabindex="0"><code>$ sudo service nginx reload
$ sudo service gitlab restart
</code></pre><h2 id="开始-gitlab-之旅">开始 Gitlab 之旅</h2>
<p>配置好 hosts 即可访问 <code>gitlab.dev</code></p>
<pre tabindex="0"><code>$ echo &#34;127.0.0.1 gitlab.dev&#34; &gt;&gt; /etc/hosts
</code></pre><p>默认的用户名密码：</p>
<pre tabindex="0"><code>admin@local.host
5iveL!fe
</code></pre><h2 id="各种坑">各种坑</h2>
<h3 id="1-错误日志报权限错误">1. 错误日志报权限错误</h3>
<pre tabindex="0"><code>2013/11/07 00:42:21 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/favicon.ico.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:21 [crit] 15875#0: *2 connect() to unix:/home/git/gitlab/tmp/sockets/gitlab.socket failed (13: Permission denied) while connecting to upstream, client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, upstream: &#34;http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket:/favicon.ico&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET / HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public//index.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET / HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET / HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 connect() to unix:/home/git/gitlab/tmp/sockets/gitlab.socket failed (13: Permission denied) while connecting to upstream, client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET / HTTP/1.1&#34;, upstream: &#34;http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket:/&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/favicon.ico&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/favicon.ico/index.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 stat() &#34;/home/git/gitlab/public/favicon.ico.html&#34; failed (13: Permission denied), client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, host: &#34;gitlab.web.lo&#34;
2013/11/07 00:42:31 [crit] 15875#0: *2 connect() to unix:/home/git/gitlab/tmp/sockets/gitlab.socket failed (13: Permission denied) while connecting to upstream, client: 33.33.33.1, server: gitlab.web.lo, request: &#34;GET /favicon.ico HTTP/1.1&#34;, upstream: &#34;http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket:/favicon.ico&#34;, host: &#34;gitlab.web.lo&#34;
</code></pre><p>解决方案:</p>
<pre tabindex="0"><code>$ (sudo) chmod o+x /home/git
</code></pre><h3 id="2-8080-端口被占用">2. 8080 端口被占用</h3>
<p>这样主要是因为 nginx 的配置是做 unicorn 的代理转发，实际上 gitlab 是由 unicorn 容器驱动，而在配置里默认绑定的是 <code>8080</code> 端口</p>
<pre tabindex="0"><code>$ vim /home/git/gitlab/config/unicorn.rb
</code></pre><p>找到 <code>listen &quot;127.0.0.1:8080&quot;, :tcp_nopush =&gt; true</code> 修改成其他未占用的端口号即可。</p>
]]></content:encoded></item><item><title>配置 CentOS 的网络联网设置</title><link>https://icyleaf.com/2013/09/network-configuration-in-centos/</link><pubDate>Thu, 05 Sep 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/09/network-configuration-in-centos/</guid><description>一篇很基础的配网知识点</description><content:encoded><![CDATA[<p>安装完毕 CentOS 6 Server 开始配置网络设置，网上有很多的教程，用的方法要么不全，要么操作方式比较早期，花点时间整理了下方法：</p>
<h2 id="dhcp-设定">DHCP 设定</h2>
<p>CentOS 默认使用了 <code>dhcp</code> 但是可恨的是没有开启。首先我们先看看本机的网卡信息</p>
<pre tabindex="0"><code>$ ip a
</code></pre><p>返回结果：</p>
<pre tabindex="0"><code>1: lo:  mtu 16436 qdisc noqueue state UNKNOWN
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth0:  mtu 1500 qdisc mq state UP qlen 1000
link/ether 00:22:19:09:4d:3c brd ff:ff:ff:ff:ff:ff
</code></pre><p>其中 <code>lo</code> 是回路路由，咱们不必管它，这里 <code>eth0</code> 大家会很熟悉吧，这表示第一块网卡。好了，我们需要改改它的配置文件(CentOS 默认没有安装 <code>vim</code>):</p>
<pre tabindex="0"><code>$ vi /etc/sysconfig/network-scripts/ifcfg-eth0
</code></pre><p>如果你要改其他网卡，比如 <code>eth1</code> 那需要修改 <code>/etc/.../ifcfg-eth1</code></p>
<pre tabindex="0"><code>DEVICE=eth0
HWADDR=&#34;00:22:19:09:4D:3C&#34;
NM_CONTROLLED=yes
ONBOOT=yes      # 默认是 no，我们要改成 yes
BOOTPROTO=dhcp  # 如果不是这个值也要修改
</code></pre><p>最后重启 network service 即可：</p>
<pre tabindex="0"><code>$ service network restart
# 或者比较原始的方法
$ /etc/init.d/network restart
</code></pre><p>如果你看到它在重启并配置 DHCP 服务，那就说明没有问题了</p>
<pre tabindex="0"><code>Bringing up loopback interface:                [  OK  ]
Bringing up interface eth0:
Determining IP information for eth0... done.   [  OK  ]
</code></pre><p>测试一下</p>
<pre tabindex="0"><code>$ ping google.com
$ ifconfig
</code></pre><h2 id="手动设定">手动设定</h2>
<p>大部分操作和上面的一直，唯一不同的就是修改 <code>/etc/sysconfig/network-scripts/ifcfg-*</code> 文件：</p>
<pre tabindex="0"><code>DEVICE=eth0
HWADDR=&#34;00:22:19:09:4D:3C&#34;
NM_CONTROLLED=yes
ONBOOT=yes      		# 默认是 no，我们要改成 yes
BOOTPROTO=static  		# 改成静态模式
IPADDR=192.168.1.11 	# 设定 ip 地址
NETMASK=255.255.255.0 	# 设定子网掩码
GATEWAY=192.168.1.1 	# 设定网关 ip
</code></pre><p>修改 DNS 地址</p>
<pre tabindex="0"><code>$ vi /etc/resolve.conf

nameserver 8.8.8.8 # 主 DNS
nameserver 8.8.4.4 # 备选 DNS
</code></pre>]]></content:encoded></item><item><title>Linux 101 系列：chmod 文件权限工具</title><link>https://icyleaf.com/2013/08/linux-101-chmod/</link><pubDate>Wed, 28 Aug 2013 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2013/08/linux-101-chmod/</guid><description>640, 755, +X, -rw 这都是什么暗号</description><content:encoded><![CDATA[<blockquote>
<p>chmod 是用来管理文件访问权限的命令，大家是使用 *nix 系统的时候经常跟它打交道。</p>
</blockquote>
<h2 id="基本常识">基本常识</h2>
<h3 id="用户和用户组">用户和用户组</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>英文</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>Use</td>
<td>当前用户</td>
</tr>
<tr>
<td>g</td>
<td>Group</td>
<td>所属用户组</td>
</tr>
<tr>
<td>o</td>
<td>Others</td>
<td>其他人（其他用户及用户组，包含访客用户）</td>
</tr>
</tbody>
</table>
<h3 id="数字与参数">数字与参数</h3>
<table>
<thead>
<tr>
<th>数字</th>
<th>符号</th>
<th>说明</th>
<th>对文件</th>
<th>对目录</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>x</td>
<td>可执行权限</td>
<td>可被系统执行的权限</td>
<td>无</td>
</tr>
<tr>
<td>2</td>
<td>w</td>
<td>写权限</td>
<td>可以编辑或修改文件内容，但不含删除该文件</td>
<td>增删改该目录及目录下全部文件</td>
</tr>
<tr>
<td>4</td>
<td>r</td>
<td>读权限</td>
<td>可读取文件的内容</td>
<td>可读取目录结构</td>
</tr>
</tbody>
</table>
<blockquote>
<p>备注：<code>ls -l</code>对于文件权限是由 rwx 倒序组成。比如 <code>-rwxr--r--</code>，说明当前用户拥有全部权限，所属用户组和其他人只有读权限。</p>
</blockquote>
<h2 id="实例">实例</h2>
<h3 id="数字篇">数字篇</h3>
<h4 id="1-当前用户拥有所有权限其他只有读权限">1. 当前用户拥有所有权限，其他只有读权限</h4>
<table>
<thead>
<tr>
<th>u</th>
<th>g</th>
<th>o</th>
</tr>
</thead>
<tbody>
<tr>
<td>6</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>rw</td>
<td>r</td>
<td>r</td>
</tr>
</tbody>
</table>
<h4 id="2-所有用户及用户组添加全部权限-谨慎使用">2. 所有用户及用户组添加全部权限 （<strong>谨慎使用</strong>）</h4>
<table>
<thead>
<tr>
<th>u</th>
<th>g</th>
<th>o</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>rwx</td>
<td>rwx</td>
<td>rwx</td>
</tr>
</tbody>
</table>
<h3 id="符号篇">符号篇</h3>
<pre tabindex="0"><code>通用公式：[用户(组)] + [操作] + [符号]
</code></pre><p>其中<code>操作</code>是由如下表构成：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-</td>
<td>移除权限</td>
</tr>
<tr>
<td>+</td>
<td>增加权限</td>
</tr>
<tr>
<td>=</td>
<td>设定权限</td>
</tr>
</tbody>
</table>
<h4 id="1-所有用户及用户组添加执行权限">1. 所有用户及用户组添加执行权限</h4>
<pre tabindex="0"><code>$ chmod +x [file]
</code></pre><h5 id="2-不允许其他人有写权限">2. 不允许其他人有写权限</h5>
<pre tabindex="0"><code>$ chmod o-w [file]
</code></pre><h4 id="3-增加用户组的读写权限">3. 增加用户组的读写权限</h4>
<pre tabindex="0"><code>$ chmod g+rw [file]
</code></pre><h4 id="4-除了当前用户都移除读写权限">4. 除了当前用户都移除读写权限</h4>
<pre tabindex="0"><code>$ chmod go-rw [file]
</code></pre><h4 id="5-设置当前用户所有权限所属用户组和其他人保留读权限">5. 设置当前用户所有权限，所属用户组和其他人保留读权限</h4>
<pre tabindex="0"><code>$ chmod u=rwx,g=r,o=r [file]
</code></pre>]]></content:encoded></item><item><title>OSX 下 Finer 和 Terminal 相互切换</title><link>https://icyleaf.com/2010/12/switer-between-finder-and-terminal-in-osx/</link><pubDate>Wed, 08 Dec 2010 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2010/12/switer-between-finder-and-terminal-in-osx/</guid><description>在 Finder 打开 Terminal 并切换到当前目录 安装一个开源的 Finder 辅助工具：cdto。功能只有一个就是实现在 Finder 打开 Terminal 并切换到当前 Finder 目录。找到你系统的版本的 app （支持当...</description><content:encoded><![CDATA[<p><strong>在 Finder 打开 Terminal 并切换到当前目录</strong></p>
<p>安装一个开源的 Finder 辅助工具：<a href="http://code.google.com/p/cdto/">cdto</a>。功能只有一个就是实现在 Finder 打开 Terminal 并切换到当前 Finder 目录。找到你系统的版本的 app （支持当前 OS X 10.4 以上版本）拷贝到 Applications 下并把它拖到 Finder 的工具栏上即可。</p>
<p><strong>从 Terminal 中用 Finder 打开当前路径的目录</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ open .
</span></span></code></pre></div><p>PS，如果是 Ubuntu 系统的话请安装 nautilus，然后在 Terminal 里面输入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ nautilus .
</span></span></code></pre></div>]]></content:encoded></item><item><title>Ubuntu 解决 public key is not available 问题</title><link>https://icyleaf.com/2010/11/apt-get-gpg-error-public-key-not-available/</link><pubDate>Wed, 03 Nov 2010 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2010/11/apt-get-gpg-error-public-key-not-available/</guid><description>自 Ubuntu 10.04 升级至 10.10 之后，系统就有些不注意的小毛病，包括系统的各个软件的配置文件可能有改动，加上常年累计尝试并添加很多 ppa 的源，自定义的软件源在升级...</description><content:encoded><![CDATA[<p>自 Ubuntu 10.04 升级至 10.10 之后，系统就有些不注意的小毛病，包括系统的各个软件的配置文件可能有改动，加上常年累计尝试并添加很多 ppa</p>
<p>的源，自定义的软件源在升级兼容的考虑下全部金禁用了导致原本软件源的注解名称也没有了，自己不知道各个软件源是干什么的&hellip;于是手动在软件源管理（a本放在了 Applications -&gt; Ubuntu Software Center 程序里面 Edit 菜单下面）清理。</p>
<p>第一开始是凭记忆清理了一部分不再使用的软件的源，退出后更新发现失败&hellip;再次清理 Authentication 里面的 Public key，发现还是有问题，最后下定狠心把所有的源和 public key 全部删除了再更新发现还是有错误 T_T 其实错误提示的是一种类型的：</p>
<blockquote>
<p>W: GPG error: <a href="http://ppa.launchpad.net">http://ppa.launchpad.net</a> jaunty Release: The following signatures couldn&rsquo;t be verified because the public key is not available: NO_PUBKEY 12DE1BCB04E5E17B5</p>
</blockquote>
<p>自己动手丰衣足食&hellip;Google 之发现有两种解决方案，第一个是在 launchpad keyserver 网站搜索 key 从而找到 public
key，详情请看[这里][]。第二种则相对于比较简单：命令行流。</p>
<p>​1. 复制报错的尾部 NO_PUBKEY 后面的串的后 8
位（以上面的为例：4E5E17B5），执行:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ gpg --keyserver keyserver.ubuntu.com --recv 4E5E17B5# 返回信息gpg: requesting key 4E5E17B5 from hkp server keyserver.ubuntu.comgpg: key 4E5E17B5: public key <span class="s2">&#34;Launchpad PPA for chromium-daily&#34;</span> importedgpg: no ultimately trusted keys foundgpg: Total number processed: 1gpg:               imported: <span class="m">1</span>  <span class="o">(</span>RSA: 1<span class="o">)</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ gpg --export --armor 4E5E17B5 <span class="p">|</span> sudo apt-key add -# 返回信息OK
</span></span></code></pre></div><p>解决！</p>
]]></content:encoded></item><item><title>如何使用VirtualBox安装Linux系统</title><link>https://icyleaf.com/2008/03/how-to-use-linux-systems-installed-virtualbox/</link><pubDate>Thu, 13 Mar 2008 12:34:56 +0800</pubDate><guid>https://icyleaf.com/2008/03/how-to-use-linux-systems-installed-virtualbox/</guid><description>VirtualBox也已经介绍过了， 昨天是实实在在的用VirtualBox体验了一下 Linux Mint 系统。 这篇日志我就大概的说下如何用VirtualBo...</description><content:encoded><![CDATA[<p><a href="http://www.icyleaf.cn/2008/03/12/virtualbox-free-cross-platform-open-source-virtual-machine/">VirtualBox</a>也已经介绍过了，
昨天是实实在在的用VirtualBox体验了一下 <a href="http://www.linuxmint.com/">Linux Mint</a> 系统。
这篇日志我就大概的说下如何用VirtualBox安装和汉化Linux Mint系统，大家先看一个经过简单设置有的效果图：</p>
<p>这个背景是系统自带的一个，呵呵(^___^)，在介绍 <a href="http://www.icyleaf.cn/2008/03/12/virtualbox-free-cross-platform-open-source-virtual-machine/">VirtualBox</a>
的文章里面的截图是系统默认的背景。那么如何使用 VirtualBox 安装 Linux 系统呢，其实很简单的，
VirtualBox 这个软件从官方网站下载的时候看似是英文的，其实他支持多国语言，安装之后它就会因系统的语言而变化，
Linux Mint 系统就从官方上面下载最新版本的镜像文件就可以了，当前最新版本是4.0。
这里我就不复述下载的过程~~</p>
<p>两者都下载并安装VirtualBox之后，打开它的界面，点菜单的“新建”，安装向导的指示下一步有序操作：先点“下一步”，在随后出来的窗口的名称填入你喜欢的名字，
如Linux Mint或者其他以便自己识别，在系统类型里面他并没有列出具体的Linux的发行版号，只能靠内核的版本确定，这里LinuxMint的内核是Linux2.6。接着是配置虚拟内存，
如果你机器的实际内存比较大如1G以上，可以配置虚拟内存到400M-512M。再下一步是设置虚拟硬盘，第一次使用是没有硬盘存在，需要”新建&quot;，如果你不是第一次添加，
则通过它的下拉菜单可选是那块虚拟硬盘。如果你是初级用户，在新建硬盘的时候，选择“动态扩展硬盘”即可，现在就完成了运行前的操作。</p>
<p>之后直接点击菜单的“启动”就可以了，恩，没错直接启动就可以。VirtualBox提供了一个人性化的设置，如果你使用的是一个新建的虚拟硬盘，在它首次允许之后会弹出一个“首次运行向导”让你选择引导方式。恩，这和VM有些差别，VM提供一个虚拟的BIOS程序，而VrtualBox没有，不过他提供了一个开机引导方式的快捷键<strong>F12</strong>，而且也支持LAN的方式，这点很强。</p>
<p>在“首次允许向导”的戒指位置选择上图的操作，并在下拉菜单选择今天我们要按照的LinuxMint硬盘就可以了。
从下图可以看出来，虽然LinuxMint系统是基于Ubuntu系统开发的，但是它默认并不支持多国语言，仅仅只有英语：</p>
<p>我们选择“Start Linux Mint&quot;启动系统，这就是像LiveCD版的了，随后会进行系统加载并进入到界面，点击桌面的”Install“会出现一个和Ubuntu以及gOS一样的安装系统的窗体，如果你安装过gOS，也许你会在网上搜如何汉化，他们的汉化方式有些变态，其实也是正确的，在选择系统语言环境的时候在选择框的倒数第二个是简体中文，但是如果你选择了，整个的界面全部会变成乱码。这样不利于我们的操作，所以我采取使用默认的英文，在安装好系统之后再进行汉化，相比之下，英文肯定比看乱码舒服多了。呵呵(^___^)</p>
<p>Linux Mint安装就很简单了，我就不用说了吧，网上搜搜Ubuntu是如何安装的就知道了～嘿嘿，我就不多打字了～记得找LiveCD的安装教程，Ubuntu还提供了一个文本安装的方式：）</p>
<p>安装完成之后，在登录界面输入完成你在安装时设置的用户名和密码随后会弹出一个询问向导。主要是为了提示是否开启Root并设置密码以及设置终端在打开时是否随机显示一段英文短句（我没自己看写的是什么），对于root一定要开启并设置一个密码，因为Linux的安全机制问题，尤其涉及到后面的安装软件问题，非常重要哦！</p>
<p>登录界面之后，首先是要解决中文化的问题，首先确保你的机器已经连接到了互联网上面。连上网之后再进行操作：点击左下角的Mint图标，其实和Windows系统差不多，
选择里面的”Control Center“，在弹出的窗口寻找”Language Support“。随后Language Support窗口会扫描当然的语言文件，
已经提示是否下载，我们选择”Let me later&quot;，然后再Supported Language列表中寻找Chinese，并在它后面的方框点击选中，然后再点Apply（应用），程序会从网上下载系统的程序的中文语言文件。这个时候我们就等待吧，如果网速好的话差不多，一杯咖啡的时间：）</p>
<p>下载完成之后，点击“OK”并关闭Linux Mint系统，其实是要重启，为什么要先关闭呢，因为现在还是开机光盘引导，当然我们要去掉光盘引导。先选择你要启动的系统，
然后点击菜单的“设置”，在左侧的列表选择“光驱&quot;之后去掉右边的”加载光驱“，然后再保存。之后就可以启动系统了，启动到grub菜单，选择第一个正常启动。第二个是安全模式，不过我没进去过&hellip;菜单选择时间默认是4秒。</p>
<p>又到了登录界面，我们先不急于登录，而是选择登录界面的&quot;Language&quot;，在选择语言窗口选择”Chinese（China Mainland）“，
在点”Change Language“。系统立即弹出一个窗口，询问是否在以后登录也使用改变后的语言，我们当然是选择是了，之后我们看到我们熟悉的中国字了！尽情享受吧。</p>
<p>不过他的中文化也不是非常的完美的，不过还有些地方并没有得到汉化，对于日常的使用并没有什么影响的。
昨天我在Linux Mint下面安装了不少的东西：SciTE，komodo edit，甚至VirtualBox，本来想在Linux下虚拟一个XP，
无奈的是不想再下一个600多M的镜像了&hellip;不过我还是特别想看到XP虚拟跑Linux,再在虚拟的Linux在虚拟XP，这个场面肯定很壮观，哈哈 o(∩_∩)o&hellip;</p>
<p>同时也希望我这简单的教程对大家会有所帮助：）</p>
]]></content:encoded></item></channel></rss>