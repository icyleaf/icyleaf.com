<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Docker on icyleaf</title><link>https://icyleaf.com/tags/docker/</link><description>Recent content in Docker on icyleaf</description><language>zh</language><lastBuildDate>Sat, 12 Feb 2022 20:00:00 +0800</lastBuildDate><atom:link href="https://icyleaf.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>如何搭建家用 homelab: 先导篇</title><link>https://icyleaf.com/2022/02/how-to-homelab-part-0/</link><pubDate>Sat, 12 Feb 2022 20:00:00 +0800</pubDate><guid>https://icyleaf.com/2022/02/how-to-homelab-part-0/</guid><description>
系列文章会涉及家庭网络、路由器、Linux、数据储存、NAS、服务化</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>这将会是一个持续系列的主题文章，你将会从最基础的家庭 homelab 搭建开始循序渐进到一些进阶的系统、网络、服务层面的学习。我尽可能以新人的角色描述简单易懂的语言，系列文章会涉及家庭网络、路由器、Linux、数据储存、NAS、服务化等等，如果你在过程中又遇到任何问题，欢迎给我留言。</p>













  
  <figure><img src="/tutorials/how-to-homelab/part-0/diagram.png"
      alt="图片来源"/><figcaption><p class="source">图片来源<a href="https://twitter.com/icyleaf/status/1472036769742745603">icyleaf</a>
    </p>

    <h4>镇楼用的网络拓扑图</h4><div style="clear: both"></div>
  </figcaption></figure>

<h2 id="搭建-homelab-起因">搭建 homelab 起因</h2>
<blockquote>
<p>homelab: a laboratory of (usually slightly outdated) awesome in the domicile</p>
</blockquote>
<p>从语言直译来看可以说是家庭 homelab，把这个事情延展到网络及服务上面那就可以干很多有意思的事情，比如：</p>
<ul>
<li>NAS 存储：资源下载、存放任何的数据（照片、小姐姐、学习资料、代码等）</li>
<li>影视库：从最简单的网络共享文件夹到可以托管影视管理、播放、转码为一体的 Jellyfin、Plex 服务</li>
<li>网络管理：设备限流、流量审计、防火墙策略</li>
<li>应用开发：做一些 side projects 需要开发环境、缓存、数据存储等</li>
<li>DevOps：ansible、salt、k8s 来操作维护多个服务器、VM 或者是 lxc</li>
</ul>
<p>如果您恰好是一名软件应用开发者，homelab 是最佳的扩展你的技能的很好的实验田，学习网络拓扑、Linux 系统、安全管理等。
对于大部分人来说或许多多少少都会听说过 NAS 服务器，其实他也是 homelab 的实践应用之一。</p>
<p>不要被它的名字吓到，本质上它就是在一个操作系统上面跑一堆上面提到和没提到的服务而已。</p>
<h2 id="自建考虑的点">自建考虑的点</h2>
<p>无论上面提到的点有多么吸引你想要组件自己的家庭 homelab，您还要慎重考虑是否真的需要，毕竟真的整一套也会投入很大的精力和一些资金，千万不要没有需求创造需求。</p>
<blockquote>
<p>本系列的内容会优先考虑使用开源、免费的解决方案，如果真的无法满足会分享一些商业的解决方案。</p>
</blockquote>
<h2 id="商业成品方案">商业成品方案</h2>
<p>商业成品主要是售卖软件服务来提供类网络管理、数据存储等的解决方案，市面上主流的主要是：</p>
<ul>
<li><a href="https://www.synology.com/">群晖</a>: 搭配硬件售卖，各方面都非常令人满意的软件系统，对小白非常友好</li>
<li><a href="https://www.qnap.com/">威联通</a>: 搭配硬件售卖的软件，价格比群晖有优势，软件系统相对群晖要逊色不少</li>
<li><a href="https://unraid.net/">UnRaid</a>: 一款商业的 NAS 系统，但提供快速扩容、Docker 和 VM 管理</li>
<li><a href="https://store.ui.com/collections/unifi-network-unifi-os-consoles">UniFi OS</a>: 主要是 Dream Machine 搭载的系统，整体下来价格非常昂贵</li>
</ul>
<p>通常情况下商业成品是一站式的解决方案，采购的话费用也会比自建要投入更多的资金，这个就不再 homelab 的考虑范围，这里就一笔带过。</p>
<h2 id="开源免费方案">开源&amp;免费方案</h2>
<p>自建 homelab 必然会从硬件、软件下手，准备好了再决定网络拓扑结构。</p>
<h2 id="硬件筛选">硬件筛选</h2>
<p>国内和国外的硬件环境有非常大的不同，国内有很多的洋垃圾、魔改硬件的讨论，比如您可能听说过的 E3/E5 神教、垃圾佬之类的名词。
若你是这个领域的行家恭喜你会省不少钱；若你不是也不用沮丧踏踏实实的花钱买数据安全，切记也不要盲目入手垃圾佬的硬件，捡垃圾有风险，有些硬件会被超的很高这样的性价比也会很低而不值得入手。</p>
<p>最关键的几个部分：CPU、内存、主板、网络和硬盘。</p>
<ul>
<li>CPU 和内存很好理解，CPU 核心数量、内存容量越多越能造，如果对于影视播放有要求就需要 CPU 有好的核心支持。</li>
<li>主板对网口数量、扩展槽会有依赖，网口数量和硬盘数量支持不多就要靠扩展槽来凑。</li>
<li>网络状况至关重要，WiFi 6 传输速度还是不如千兆有线，评估下自己家里猫和路由器最低要求千兆网络，有线也尽量是 CAT5e/CAT6 规格</li>
<li>NAS 应用场景对硬盘容量和规格要求比较高，SSD 不是强需求，如果不差钱全上 SSD 也不是不行。</li>
</ul>
<p>这里每一个展开聊都是非常大的话题，我可能会整理一些外部资源供您去补充这方面的知识。市面上也有一些成品硬件的解决方案，您也可以考虑：</p>
<ul>
<li>英特尔 NUC：小巧的机型并不代表他的性能很弱，最新 12 代的 NUC 从各方面都是很好的选择</li>
<li>联想 ThinkCentre 系列：比 NUC 稍微大点，这个系列体系非常的庞大且悠久，也有不少价格合适的二手和改装件，但会折腾一些</li>
<li>惠普 MicroServer Gen 系列：Gen8/Gen10 都是目前主流的 homelab 解决方案，正统服务器规格和特性。（我有一台 Gen 8 正在服役）</li>
<li>各种开发板：比如树莓派从 3B 开始它也能做一些 homelab 的应用场景，国内外资料丰富，配件众多。唯一的缺点受新冠影响它的价格在国内居高不下，可以考虑一些其他成熟的开发板。</li>
<li>各种矿渣主机：区块链盛行的挖矿行业充斥着很多挖矿主机，比如星际蜗牛、绿盘、蜜獾超存等，有些硬件参数还不错到手之后需要调节或改下静音风扇就可用。</li>
</ul>
<p>最简单的版本就是可以找一个可以长期运行的不再使用的笔记本电脑、台式电脑就能起步（功耗太高的话就真的算了）</p>
<h2 id="软件部署方案">软件部署方案</h2>
<p>硬件准备完备之后，我们来考虑搭配哪种软件部署方案，通常会被划分为三大类：</p>
<ul>
<li>传统部署（Traditional Deployment）</li>
<li>虚拟化部署（Virutalization Deployment）</li>
<li>容器化部署（Containerd Deployment）</li>
</ul>












<figure><a href="/tutorials/how-to-homelab/part-0/container-evolution.svg" class="gallery-item" target="_blank" data-pswp-width="1800" data-pswp-height="650"><img src="/tutorials/how-to-homelab/part-0/container-evolution.svg"
      alt="图片来源"/></a><figcaption><p class="source">图片来源<a href="https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/">Kubernetes 是什么？</a>
    </p>

    <h4>部署方式的演变</h4><div style="clear: both"></div>
  </figcaption></figure>

<p>通常在硬件性能还算不错情况下都不会采用传统部署的方案，单主机的优先级：容器化 &gt; 虚拟化 &gt; 传统部署，机器性能不错且有技术兴趣度的优先级：虚拟化 &gt; 容器化 &gt; 传统部署。</p>
<h3 id="传统部署">传统部署</h3>
<p>传统部署通常是在 Bare-metal 机器上面进行的，因此我把它俩划为等号，它使用硬件主机安装操作系统如 Window、macOS 和 *nix (Unix/Linux) 后直接安装和部署服务，听起来没什么特别的，
市面上也会有很多的运维工具用于解决安装系统、配置环境、后期维护、数据备份的工作，比如 Salt、Ansible、Puppet 等有一定的学习成本，没法做到开箱即用， 100% 发挥硬件机能也会是一个问题。</p>













  
  <figure><img src="/tutorials/how-to-homelab/part-0/bare-metal.jpg"
      alt="图片来源"/><figcaption><p class="source">图片来源<a href="https://thecloudgirl.dev/BareMetal.html">The Cloud Girl</a>
    </p>

    <h4>Bare metal 方案</h4><div style="clear: both"></div>
  </figcaption></figure>

<h3 id="虚拟化部署">虚拟化部署</h3>
<ul>
<li><a href="https://www.vmware.com/products/esxi-and-esx.html">ESXi</a>: VMware 公司开发的硬件虚拟化解决方案，界面简单易用，自身功能较强，付费使用</li>
<li><a href="https://www.proxmox.com">Proxomx</a>: 基于 Debian 开发企业级虚拟化系统，支持硬件直通，可扩展集群，上手难度略高，简称 PVE</li>
</ul>
<p>基于开源解决方案实在没有太多可选性，PVE 是市面上最成熟、社区活跃也很高的方案，
就算遇到奇奇怪怪的问题善用搜索引擎代替上都可以解决。</p>
<h3 id="容器化部署">容器化部署</h3>
<ul>
<li><a href="https://www.docker.com/">Docker</a>: 现代容器化的开山鼻祖，自己比较作引发了大叛逃就有了下面两个解决方案</li>
<li><a href="https://containerd.io/">Containerd</a>: 始于 Docker 母公司，壮大在 CNCF 基金会，提供 nerdctl 代替 docker CLI</li>
<li><a href="https://podman.io/">Podman</a>: Red Hat 公司领导的兼容 Docker 的解决方案</li>
</ul>
<p>一句话总结没看懂就用 docker 就行。</p>
<h2 id="基础系统">基础系统</h2>
<p>如果选择传统部署随便用一个你熟悉且满足你需求的操作系统即可</p>
<h2 id="应用服务">应用服务</h2>
<p>定好软硬件的基础后您需要面对非常庞大的应用服务来扩展和丰富 homelab</p>
<h3 id="初阶方案">初阶方案</h3>
<h4 id="软路由">软路由</h4>
<ul>
<li><a href="https://github.com/openwrt/openwrt">openwrt</a>: 国内最近今年非常主流的解决方案，国内有个 <a href="https://github.com/immortalwrt/immortalwrt">immortalwrt</a> 分支版本</li>
<li><a href="https://www.asuswrt-merlin.net/">梅林</a>: 华硕开源的路由器固件，同样国内有个 <a href="https://www.koolcenter.com/">koolcenter</a> 改版</li>
<li><a href="https://dd-wrt.com/">dd-wrt</a>: 在流行刷路由器初期的懵懂的固件，受限于硬件支持度和更新频率渐行渐远，当时支持多 wan 的 tomato</li>
</ul>
<h4 id="网关">网关</h4>
<ul>
<li><a href="https://www.nginx.com/">nginx</a>: 老牌传统网关，用于托管或反向代理网站服务</li>
<li><a href="https://caddyserver.com/">caddy v2</a>: 现代化设计的 HTTP/2 且支持 <a href="https://letsencrypt.org/">Let’s encrypt</a> 的网关</li>
</ul>
<h4 id="dns">DNS</h4>
<ul>
<li><a href="https://dnsmasq.org/">dnsmasq</a>: 一切的基础，用于配置 DNS 和 DHCP 服务</li>
<li><a href="https://pi-hole.net/">pi-hole</a>: 主打保护隐私和过滤广告的路由系统，常用海外用户</li>
<li><a href="https://adguard.com/zh_cn/adguard-home/overview.html">adguard home</a>: 专注保护隐私和过滤广告全网广告拦截的服务，提供用户友善的 UI 界面</li>
<li><a href="https://github.com/pymumu/smartdns">smartDNS</a>: 加速 DNS 解析分流的 DNS 服务</li>
<li><a href="https://github.com/IrineSistiana/mosdns">mosdns</a>: 集 smartDNS 和 adguard home 优点并存的 DNS 服务但配置麻烦</li>
</ul>
<h4 id="防火墙">防火墙</h4>
<ul>
<li><a href="https://www.netfilter.org/projects/iptables/index.html">iptables</a>: Linux 常见的内置防火墙</li>
<li><a href="https://www.netfilter.org/projects/nftables/index.html">nftables</a>: iptables 的官方增强版，未来的趋势都会慢慢迁移过来</li>
<li><a href="https://www.pfsense.org/">pfSense</a>: 国外普遍使用的一款开源防火墙</li>
</ul>
<h4 id="nas">NAS</h4>
<ul>
<li><a href="">OpenMediaValut</a>: 硬件依赖低门槛的综合性 NAS 系统</li>
</ul>
<h4 id="服务部署">服务部署</h4>
<ul>
<li><a href="https://www.portainer.io/">portainer</a>: 简单容易上手的容器化部署解决方案</li>
</ul>
<h4 id="影音">影音</h4>
<ul>
<li><a href="https://jellyfin.org/">Jellyfin</a>: 影视剧、电影等媒体播放服务，支持片源资料搜刮和看过数据同步服务</li>
</ul>
<h4 id="应用">应用</h4>
<ul>
<li><a href="https://bitwarden.com/">Bitwarden</a>: 开源且完全可代替 1 Password 的全平台密码生成管理服务，推荐使用开发者用 Rust 重写的 <a href="https://github.com/dani-garcia/vaultwarden">vaultwarden</a></li>
<li><a href="https://zoneminder.com/">ZoneMinder</a>: 开源多路摄像头&amp;录像管理服务</li>
</ul>
<p>更多的应用可以关注我的<a href="https://github.com/stars/icyleaf/lists/self-host-services">自建服务集合</a></p>
<h3 id="高级进阶">高级进阶</h3>
<p>下面介绍的也仅限于我个人能力范围内目前想到的点，能力有限也请手下留情。</p>
<h4 id="网关-1">网关</h4>
<ul>
<li><a href="https://traefik.io/traefik/">traefik</a>: 一款开源的反向代理与负载均衡综合性工具</li>
</ul>
<h4 id="nas-1">NAS</h4>
<ul>
<li><a href="https://www.truenas.com/">TrueNAS</a>: 国外做数据存储的首选，基于 ZFS 文件系统内存大小决定磁盘容量的上限，前身叫 FreeNAS</li>
</ul>
<h4 id="服务部署-1">服务部署</h4>
<ul>
<li><a href="https://kubernetes.io/">Kubernetes</a>: 现代容器化编排系统，所谓的云 YAML 工程师终极工具 😆</li>
</ul>
<h2 id="小结">小结</h2>
<p>homelab 玩法的可能性是无限的，不要把想象力局限在这几年国内流行的所谓 AIO Boom：
使用 pve 部署一切，更甚者用 openwrt + docker 部署各自服务出现问题先不说，
真遇到服务器宕机一波全带走。</p>
<p>另外不要太过于计较服务器的功耗情况，只要不是电耗子 35W 还是 65W 没省多少电费，
下面是一个正面例子，虽然用的是 X99-T8D + E5 2696V3*2 + 金河田 6100 双路电源
但开发者主要用于适合自己场景的使用，那就不是浪费。</p>
<blockquote class="twitter-tweet"><p lang="zh" dir="ltr">太牛逼了！今天把 <a href="https://twitter.com/wey_gu?ref_src=twsrc%5Etfw">@wey_gu</a> 哥哥送给我的 NUMA Server 弄好了，这是我人生中第一次拥有 NUMA，看到配置的时候直接惊住了，大半夜微信骚扰 Wey 哥哥表达自己的震惊和感谢，心想我何德何能可以拥有这么豪华的配置！在上面起了几个 VM 组了个 k8s 集群，终于不用紧张兮兮地在我的 MBP 上起 k8s 了！开心！ <a href="https://t.co/B9uwSiQXxK">pic.twitter.com/B9uwSiQXxK</a></p>&mdash; yetone (@yetone) <a href="https://twitter.com/yetone/status/1540235004495921152?ref_src=twsrc%5Etfw">June 24, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>下面这个图中的例子是一个反面教材，要么哗众取宠要么非蠢即坏。</p>
<blockquote class="twitter-tweet"><p lang="zh" dir="ltr">待机 100W 的低性能 NAS，这是图什么😂 <a href="https://t.co/WgphSsjobb">pic.twitter.com/WgphSsjobb</a></p>&mdash; taresky (@taresky) <a href="https://twitter.com/taresky/status/1555752846334705666?ref_src=twsrc%5Etfw">August 6, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>最后的忠告，国内各自信息咨询站的 OpenWrt，NAS 文章看看就行，别太认真。
有那时间不如多看看官方文档，官方社区讨论 :D</p>
]]></content:encoded></item><item><title>ḫpr</title><link>https://icyleaf.com/2018/04/intro-hpr/</link><pubDate>Fri, 27 Apr 2018 18:12:23 +0800</pubDate><guid>https://icyleaf.com/2018/04/intro-hpr/</guid><description>
最好用的 git 仓库镜像同步工具</description><content:encoded><![CDATA[<p><img src="https://github.com/icyleaf/hpr/raw/master/docs/_media/icon.png"
  
  
  alt="icon"></img>
</p>
<p><a href="https://icyleaf.github.io/hpr/">ḫpr</a> 是一个把任意 git 仓库的镜像到 gitlab 服务的同步工具，还支持定期同步的功能。</p>
<p>特性:</p>
<ul>
<li>支持 Web API 接口，可用于远程控制不仅限于终端使用</li>
<li>支持终端命令控制，方便临时使用</li>
<li>定时更新镜像的仓库，时间可调，告别不靠谱的 crontab</li>
<li>几乎支持所有的 git 托管的仓库</li>
<li>使用可独立部署的 Gitlab 作为镜像平台</li>
</ul>
<p>本工具可以用到的地方:</p>
<ul>
<li>任意 git 仓库源码的定期同步</li>
<li>Cocoapods 的境内加速和同步</li>
</ul>
<h2 id="契子">契子</h2>
<p>如果关注我博客的用户或者曾经看到过另外一篇文章<a href="http://icyleaf.com/2015/01/speed-up-cocoapods/">极速化 CocoaPods</a>的话且实践的用户会明白为什么会有它的产生。
在我发布那篇文章的时候那套体系已经在我们公司的服务器上运行且截至目前已经持续运行了 3 年多！</p>
<p>那个方案并不完美，除了调用必须通过脚本的蹩脚的方案外出问题最多的主要是 gitlab-mirrors
只能使用 crontab 做定时任务这样会因多个镜像在同步未完成的情况下重复开启新的同步任务，一个任务不明显一旦积攒多了起来还会慢慢的蚕食内存因此又不得不 ssh 到服务器
开始杀进程相当于重置。</p>
<p><del>当时想重新做一个的想法其实 2017 年就产生了用 ruby 写了个头当时项目命名为 nightwing 但 ruby 的问题在部署上面有比较麻烦需要各种依赖环境，
当时也考虑过 Go 但由于在断断续续学习没有持续，这个时候就开始将注意力转移到了类 Ruby 语法的 Crystal 语言，通过业余时间慢慢的了解和确定其性能后虽然和
Go 来比打包还没有那么高的集成度但完成核心功能已经完全足够，也就开始了封装 <a href="https://github.com/icyleaf/gitlab.cr">gitlab</a>、
<a href="https://github.com/icyleaf/halite">halite</a> 网络库直到最近基本完成了核心功能。</del></p>
<p><code>ḫpr</code> 就这样诞生了。项目名和 Logo 出处来源于<a href="https://zh.wikipedia.org/wiki/%E8%81%96%E7%94%B2%E8%9F%B2">圣甲虫</a>。</p>




<div class="updated">
  <header class="updated-header">
    <h4 class="updated-title">更新</h4>
    
    <p class="updated-meta">4月 18, 2022</p>
    
  </header>
  <article class="updated-body">
    第一版确实用的 Crystal 语言发布了 hpr 后续<a href="https://github.com/icyleaf/hpr/issues/11">因为 Crystal 太多轮子和问题需要解决</a>不得已用 Ruby 重写了。
  </article>
</div>


<h2 id="快速上手">快速上手</h2>
<p>鉴于 Docker 的便利性，目前教程只提供此种方法进行安装部署，首先克隆本项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ git clone https://github.com/icyleaf/hpr.git
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ <span class="nb">cd</span> hpr
</span></span></code></pre></div><p>复制 <a href="config/hpr.json.example">config/hpr.json.example</a> 并改名 <code>config/config.json</code> 后可修改</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="nt">&#34;schedule_in&#34;</span><span class="p">:</span> <span class="s2">&#34;1.day&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="nt">&#34;basic_auth&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nt">&#34;enable&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nt">&#34;user&#34;</span><span class="p">:</span> <span class="s2">&#34;hpr&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nt">&#34;password&#34;</span><span class="p">:</span> <span class="s2">&#34;p@ssw0rd&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="nt">&#34;gitlab&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nt">&#34;ssh_port&#34;</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nt">&#34;endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;http://gitlab.example.com/api/v3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nt">&#34;private_token&#34;</span><span class="p">:</span> <span class="s2">&#34;abc&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nt">&#34;group_name&#34;</span><span class="p">:</span> <span class="s2">&#34;mirrors&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nt">&#34;project_public&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="nt">&#34;project_issue&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="nt">&#34;project_wiki&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="nt">&#34;project_merge_request&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="nt">&#34;project_snippet&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>核心需要修改的参数有如下四项：</p>
<ul>
<li><code>endpoint</code>: Gitlab API 的地址，<strong>无需修改后面部分</strong></li>
<li><code>private_token</code>: 在个人设置的 Account 页面获得</li>
<li><code>group_name</code>: 项目镜像的项目都会归属到这个组内，<strong>务必确保你的账户拥有创建组的权限</strong> (如果是管理员请忽略加粗字样)</li>
<li><code>ssh_port</code>: 如果 SSH 不是 22 端口的话需要根据你的实际情况修改</li>
</ul>
<p>配置文件修改保存后还需要在 <code>docker-compose.yml</code> 文件中配置下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="w">  </span><span class="nt">hpr</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">icyleafcn/hpr</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="w">      </span>- <span class="m">8848</span><span class="p">:</span><span class="m">8848</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="w">      </span>- <span class="l">./config:/app/config</span><span class="w">
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="w">      </span>- <span class="l">./repositories:/app/repositories</span><span class="w">
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="w">      </span><span class="nt">REDIS_URL</span><span class="p">:</span><span class="w"> </span><span class="l">tcp://redis:6379</span><span class="w">
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="w">      </span><span class="nt">REDIS_PROVIDER</span><span class="p">:</span><span class="w"> </span><span class="l">REDIS_URL</span><span class="w">
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="w">      </span><span class="nt">HPR_SSH_HOST</span><span class="p">:</span><span class="w"> </span><span class="l">git.example.com</span><span class="w">
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="w">      </span><span class="nt">HPR_SSH_PORT</span><span class="p">:</span><span class="w"> </span><span class="m">22</span><span class="w">
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="w">      </span>- <span class="l">redis</span><span class="w">
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="w">  </span><span class="nt">redis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">redis:alpine</span><span class="w">
</span></span></span></code></pre></div><p>其中 <code>HPR_SSH_HOST</code> 和 <code>HPR_SSH_PORT</code> 变量用于设置 Docker 实例中的 SSH 配置。如果 SSH 端口是 22 的可忽略设置这俩参数。</p>
<p>编辑完成后运行下面命令快完成了！</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">$ docker-compose up
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">...
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">hpr_1      <span class="p">|</span> Generating public/private rsa key pair ...
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">hpr_1      <span class="p">|</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">hpr_1      <span class="p">|</span> GENERATED SSH PUBLIC KEY:
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">hpr_1      <span class="p">|</span> <span class="c1">##################################################################</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">hpr_1      <span class="p">|</span> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDq8O3HbLn9x8Uy8RUotlpOnxdakrmCyDpZrGBeLARmEbd6BOIBQ+UWm8NUKthQ7UOavmlsq4j8lY4kyFW2eFX2qWcbvI+s2gI+05MXax+mAukSszaNSnpAoTyJCRipilSkqiOV99V8JIJhrHPtTO0o/Ui
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">9WiyyWsUM4M9lEKHpZ486lDGk3IM2XQW+pxAoMKb0TYzqCsrduHUtjzy0M0BqgMPe9EtVQqCbnTMzDLXmRONoTYyTV51NQ12mMwEQcDaLQ28e5gqouQJKS81JaoRpQWa7pHsOCki6Fk9TB+EQFrGz5nOrmYYM+O1MKnFkzmVHv7Fh50Sz7d2nYzzOKAkR hpr@docker
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">hpr_1      <span class="p">|</span> <span class="c1">##################################################################</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">hpr_1      <span class="p">|</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">hpr_1      <span class="p">|</span> Configuring ssh config ...
</span></span><span class="line"><span class="ln">12</span><span class="cl">hpr_1      <span class="p">|</span> Starting hpr server ...
</span></span><span class="line"><span class="ln">13</span><span class="cl">hpr_1      <span class="p">|</span>   _
</span></span><span class="line"><span class="ln">14</span><span class="cl">hpr_1      <span class="p">|</span>  <span class="p">|</span> <span class="p">|</span>__  _ __  _ __
</span></span><span class="line"><span class="ln">15</span><span class="cl">hpr_1      <span class="p">|</span>  <span class="p">|</span> <span class="s1">&#39;_ \| &#39;</span>_ <span class="se">\|</span> <span class="err">&#39;</span>__<span class="p">|</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">hpr_1      <span class="p">|</span>  <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>_<span class="o">)</span> <span class="p">|</span> <span class="p">|</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">hpr_1      <span class="p">|</span>  <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> .__/<span class="p">|</span>_<span class="p">|</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">hpr_1      <span class="p">|</span>        <span class="p">|</span>_<span class="p">|</span>
</span></span></code></pre></div><p>最后从执行命令的输出找到生成的 SSH PUBLIC KEY（两个井号中间的部分，以 <code>ssh-rsa</code> 开头，<code>hpr@docker</code> 结尾），
复制添加到 gitlab 的账户 SSH Keys 页面中。</p>
<h2 id="更多资源">更多资源</h2>
<p>再多的内容我已经整理到文档中，欢迎移步浏览：https://icyleaf.github.io/hpr/</p>
]]></content:encoded></item><item><title>如何使用 Docker 管理 Jenkins</title><link>https://icyleaf.com/2018/04/how-to-manage-jenkins-with-docker/</link><pubDate>Wed, 18 Apr 2018 14:44:32 +0800</pubDate><guid>https://icyleaf.com/2018/04/how-to-manage-jenkins-with-docker/</guid><description>
让人几多愁的 Jenkins 该如何管理才能省心</description><content:encoded><![CDATA[<p>官方的 <a href="https://hub.docker.com/_/jenkins">jenkins</a> 镜像已经不再维护管理而是由 Jenkins Community 进行更新，鉴于 Jenkins 的更新频率特别快社区版本会提供两个版本：</p>
<ul>
<li><code>lts</code> 长期稳定版本，但还是会有新版提醒</li>
<li><code>latest</code> 每周更新版本</li>
</ul>
<p>都是基于 alpine 系统封装因此镜像的体积会大大减小很多。如果你是内网使用可以不用在意更新问题长期使用一个版本也没太大问题。</p>
<h2 id="安装">安装</h2>
<p>创建镜像时需要注意几个地方：</p>
<ol>
<li>关联本地 volumes</li>
<li>设置时区（默认是 UTC 时间）</li>
<li>映射 50000 端口（这个是 master 和 slave 的通讯端口）和 8000 端口（Web）</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">docker run -d --restart<span class="o">=</span>always
</span></span><span class="line"><span class="ln">2</span><span class="cl">    -p 8000:8080 -p 50000:50000
</span></span><span class="line"><span class="ln">3</span><span class="cl">    -v /var/lib/docker/jenkins:/var/jenkins_home
</span></span><span class="line"><span class="ln">4</span><span class="cl">    -e <span class="nv">JAVA_OPTS</span><span class="o">=</span>-Duser.timezone<span class="o">=</span>Asia/Shanghai
</span></span><span class="line"><span class="ln">5</span><span class="cl">    jenkins/jenkins:lts
</span></span></code></pre></div><p>对于进行设置 JAVA 的参数可以参考：https://github.com/jenkinsci/docker/issues/45</p>
<h2 id="配置-jenkins-的插件源">配置 Jenkins 的插件源</h2>
<p>使用过它的人都知道管理和安装插件是一个奇慢无比的事情，虽然提供了代理服务器但我这还有一个更好的方案。</p>
<p>我在翻阅国内镜像源网站的时候发现清华大学开源软件镜像站其实提供了国内 Jenkins 插件的镜像源但一直很低调的没有公布，通过进入<code>管理插件 -&gt; 高级</code>页面拉到最底部有个升级站点的自定义框，填入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json
</span></span></code></pre></div><p>安装插件的时候系统默认会测试网络就是 ping 下 Google 的网站，它会提示失败但不用担心它会继续尝试下载和安装插件。</p>
<h2 id="升级">升级</h2>
<p>此方法适用于所有的容器的升级步骤。</p>
<p>首先需要找到容器的名字，这里我想会有不少人会问为什么你在创建一个容器的时候不指定一个名字，
那是因为后面还需要创建一个新版本的容器而名字不能一样，因此我现在创建都让 docker 随机分配。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker ps
</span></span><span class="line"><span class="ln">2</span><span class="cl">CONTAINER ID  ...   NAMES
</span></span><span class="line"><span class="ln">3</span><span class="cl">8f48718fdd07  ...   naughty_pasteur
</span></span></code></pre></div><p>拿到之后先停止运行后，创建一个数据备份容器再进行拉取最新版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker stop naughty_pasteur
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ docker docker create --volumes-from naughty_pasteur --name jenkins-data jenkins/jenkins:lts
</span></span></code></pre></div><p>拉取最新版本后恢复数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker pull jenkins/jenkins:lts
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ docker run -d --restart<span class="o">=</span>always
</span></span><span class="line"><span class="ln">3</span><span class="cl">    --volumes-from jenkins-data
</span></span><span class="line"><span class="ln">4</span><span class="cl">    -p 8000:8080 -p 50000:50000
</span></span><span class="line"><span class="ln">5</span><span class="cl">    -v /var/lib/docker/jenkins:/var/jenkins_home
</span></span><span class="line"><span class="ln">6</span><span class="cl">    -e <span class="nv">JAVA_OPTS</span><span class="o">=</span>-Duser.timezone<span class="o">=</span>Asia/Shanghai
</span></span><span class="line"><span class="ln">7</span><span class="cl">    jenkins/jenkins:lts
</span></span></code></pre></div><p>确保通过 web 访问和 build 正常后删除老的和数据备份的容器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker rm naughty_pasteur
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ docker rm jenkins-data
</span></span></code></pre></div><h2 id="疑惑解答">疑惑解答</h2>
<h3 id="1-我忘记设置时区但我进实例修改了时区在-jenkins-里不生效">1. 我忘记设置时区但我进实例修改了时区在 Jenkins 里不生效</h3>
<p>在 Jenkins 的系统设置页面找到脚本命令行运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="err">&#39;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">commons</span><span class="o">.</span><span class="na">jelly</span><span class="o">.</span><span class="na">tags</span><span class="o">.</span><span class="na">fmt</span><span class="o">.</span><span class="na">timeZone</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">Asia</span><span class="o">/</span><span class="n">Shanghai</span><span class="err">&#39;</span><span class="o">)</span>
</span></span></code></pre></div><p>执行后即时生效无需重启，方法来自<a href="https://wiki.jenkins.io/display/JENKINS/Change+time+zone">官方文档</a></p>
<h2 id="官方文档">官方文档</h2>
<p><a href="https://github.com/jenkinsci/docker/blob/master/README.md">https://github.com/jenkinsci/docker/blob/master/README.md</a></p>
]]></content:encoded></item><item><title>Docker 摸爬滚打对抗 CentOS 6</title><link>https://icyleaf.com/2016/12/docker-with-centos/</link><pubDate>Fri, 30 Dec 2016 17:52:30 +0800</pubDate><guid>https://icyleaf.com/2016/12/docker-with-centos/</guid><description>
能不用 CentOS 就别了吧，啊不行？那就点进来看看吧</description><content:encoded><![CDATA[



<div class="updated">
  <header class="updated-header">
    <h4 class="updated-title">更新</h4>
    
    <p class="updated-meta">10月 9, 2018</p>
    
  </header>
  <article class="updated-body">
    国庆期间恰巧服务器硬盘故障且运维并没有做 raid 备份，给更换了一台新内部服务器，索性升级到了 CentOS 7，因此针对 CentOS 6 安装 Docker 的答疑不再更新。
  </article>
</div>


<h2 id="前言">前言</h2>
<p>前不久终于把我们移动团队内部服务器从 CentOS 5.x 升级到了 6.8。本来是拜托让升级至 7.0 版本起码能用上 docker 1.12 版本还是靠谱的事情。
事情往往难以预料的被告知其他团队在安装 7.0 之后造成内部服务器群的网卡失灵的诡异故障只能作罢，想想起码还有个早期 docker 版本可安装也就先这么着吧。</p>
<p>这个是在 <a href="http://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/">如何在CentOS 上安装Gitlab</a> 之后有一个无奈的使用指南，
因为运维也有他的考虑方面，参见知乎讨论：<a href="https://www.zhihu.com/question/29191794">如何说服运维选择 Debian/Ubuntu 而不是 CentOS</a></p>
<h2 id="安装-docker">安装 Docker</h2>
<h3 id="171">1.7.1</h3>
<p>Docker 最后一个支持 CentOS 6 的版本是 1.7.1 还必须安装 epel 源之后就<a href="https://github.com/docker/docker/issues/14365">被大家欢天喜地的抛弃了 6 的支持</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo yum -y remove docker
</span></span><span class="line"><span class="ln">3</span><span class="cl">sudo yum install libselinux-python docker-io
</span></span></code></pre></div><blockquote>
<p>由于 yum 内 docker 已经被其他使用，不用安装错误了。</p>
</blockquote>
<h3 id="171-以上版本">1.7.1 以上版本</h3>
<p><strong>请果断放弃这种想法</strong>，虽然你可能在网上搜索有个别的文章说把内核升级到 3.10 后可以安装 docker 1.9 版本，经过我个人反复测试根本不可行！</p>
<p>当然如果你还是坚持想尝试，请参考如下链接：</p>
<ul>
<li><a href="http://www.pangxie.space/docker/364">http://www.pangxie.space/docker/364</a></li>
<li><a href="http://www.cnblogs.com/dongdongwq/p/5381752.html">http://www.cnblogs.com/dongdongwq/p/5381752.html</a></li>
<li><a href="http://0evin.com/2016/06/17/%5B%E5%8E%9F%E5%88%9B%5DCentOS6.5%E5%AE%89%E8%A3%85Docker1.11.X%E7%89%88%E6%9C%AC/">http://0evin.com/2016/06/17/%5B%E5%8E%9F%E5%88%9B%5DCentOS6.5%E5%AE%89%E8%A3%85Docker1.11.X%E7%89%88%E6%9C%AC/</a></li>
</ul>
<h2 id="配置-docker">配置 Docker</h2>
<p>安装成功后先不要配置开机自启动和启动服务，docker 的官方镜像在国内众所周知的慢的一塌糊涂，如果你是在国内服务器使用请参考如下配置。</p>
<p>我这里把我个人私藏已久的好用的镜像告诉大家，大家可不要以为我用的是阿里云或者 DaoCloud 这类有很多限制的玩意：</p>
<ul>
<li>中国科技大学镜像：https://docker.mirrors.ustc.edu.cn</li>
<li>网易蜂巢镜像：http://hub-mirror.c.163.com</li>
</ul>
<p>同样需要注意的是 1.7.1 版本的 docker 配置文件是在 <code>/etc/sysconfig/docker</code> 而不是网上和官方说的 <code>/etc/default/docker</code> 打开此文件在 other_args 配置对于的源即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1"># /etc/sysconfig/docker</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"># Other arguments to pass to the docker daemon process</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"># These will be parsed by the sysv initscript and appended</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"># to the arguments list passed to docker -d</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1">#other_args=</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">#other_args=&#34;--registry-mirror=http://hub-mirror.c.163.com&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="nv">other_args</span><span class="o">=</span><span class="s2">&#34;--registry-mirror=https://docker.mirrors.ustc.edu.cn&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="nv">DOCKER_CERT_PATH</span><span class="o">=</span>/etc/docker
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="c1"># Resolves: rhbz#1176302 (docker issue #407)</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nv">DOCKER_NOWARN_KERNEL_VERSION</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"># Location used for temporary files, such as those created by</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"># # docker load and build operations. Default is /var/lib/docker/tmp</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="c1"># # Can be overriden by setting the following environment variable.</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="c1"># # DOCKER_TMPDIR=/var/tmp</span>
</span></span></code></pre></div><p>后面就没什么好说的了，启动服务和设置开机自启动就完事了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo chkconfig docker on
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo service docker start
</span></span></code></pre></div><p>验证下启动的服务是否已经配置了国内镜像源</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ ps aux <span class="p">|</span> grep <span class="s2">&#34;docker -d&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl">root     <span class="m">16992</span>  0.1  0.1 <span class="m">1239860</span> <span class="m">32276</span> ?       Sl   Dec29   2:02 /usr/bin/docker -d --registry-mirror<span class="o">=</span>https://docker.mirrors.ustc.edu.cn
</span></span><span class="line"><span class="ln">4</span><span class="cl">root     <span class="m">26873</span>  0.0  0.0 <span class="m">103332</span>   <span class="m">876</span> pts/2    S+   18:16   0:00 grep docker -d
</span></span></code></pre></div><h2 id="疑难杂症">疑难杂症</h2>
<h4 id="1-使用国内镜像源-pull-镜像偶尔会失败反复几次就可以解决">1. 使用国内镜像源 pull 镜像偶尔会失败，反复几次就可以解决</h4>
<p>频次不高原因未知，因此还未重视。</p>
<h4 id="2-docker-web-管理工具">2. Docker Web 管理工具</h4>
<p>推荐使用 <a href="https://github.com/portainer/portainer">portainer</a> ，兼容 1.7 的部分功能可能会发生部分功能和参数无法显示但不影响使用。之前我有推荐 rancher（可参考前篇文章：<a href="http://icyleaf.com/2016/08/how-to-install-rancher-on-osx/">如何在 OS X 上安装 Rancher
</a>），但 rancher 官方要求 docker 最低版本是 1.9+。</p>
<h4 id="3-docker-进程挂了重启后无法恢复之前的-containers">3. Docker 进程挂了重启后无法恢复之前的 containers</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker start c39206003c7a
</span></span><span class="line"><span class="ln">2</span><span class="cl">Error: Cannot start container c39206003c7a: Error getting container c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5 from driver devicemapper: Error mounting <span class="s1">&#39;/dev/mapper/docker-253:0-267081-c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5&#39;</span> on <span class="s1">&#39;/var/lib/docker/devicemapper/mnt/c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5&#39;</span>: device or resource busy
</span></span><span class="line"><span class="ln">3</span><span class="cl">2014/05/08 19:14:57 Error: failed to start one or more containers
</span></span></code></pre></div><p>这种一般是因为意外终止进程造成上次的 volume 没有正常 unmount，只需手动操作下即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">unmount /var/lib/docker/devicemapper/mnt/d640aea67108b04c6a5ba14645966b092db1f807f3e3f41dca7a1470f76b68fb
</span></span></code></pre></div><blockquote>
<p><code>d640aea67108b04c6a5ba14645966b092db1f807f3e3f41dca7a1470f76b68fb</code> 是根据不同 container 生成的，请根据实际情况复制和执行。</p>
</blockquote>
<p>这个真没办法，只能在 Dockerfile 或者进实例里面进行修改时区，这个我就不过多赘述了。</p>
<h4 id="4-升级运行的-container-版本">4. 升级运行的 container 版本</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker stop xxxx
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ docker create --volumes-from &lt;container_name_of_original_server&gt; <span class="se">\ </span>--name xxx-data image/name:&lt;tag_of_previous_rancher_server&gt;
</span></span><span class="line"><span class="ln">3</span><span class="cl">$ docker pull image/name:latest
</span></span><span class="line"><span class="ln">4</span><span class="cl">$ docker run -d --volumes-from xxx-data --restart<span class="o">=</span>unless-stopped <span class="se">\ </span>-p 8080:8080 image/namel.:latest
</span></span></code></pre></div><h4 id="5-非-root-用户执行-docker">5. 非 root 用户执行 docker</h4>
<p>创建 docker 用户组并重启 docker 服务，之后把你想要的用户加到 docker 用户组即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ groupadd docker
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ service docker restart
</span></span><span class="line"><span class="ln">3</span><span class="cl">$ usermod -a -G docker icyleaf
</span></span></code></pre></div><h4 id="6-宿主机-cst-时间会造成-docker-实例时间不准">6. 宿主机 CST 时间会造成 docker 实例时间不准</h4>
<p>这个真没办法，只能在 Dockerfile 或者进实例里面进行修改时区，这个我就不过多赘述了。</p>
]]></content:encoded></item><item><title>如何在 OS X 上安装 Rancher</title><link>https://icyleaf.com/2016/08/how-to-install-rancher-on-osx/</link><pubDate>Fri, 05 Aug 2016 17:21:08 +0800</pubDate><guid>https://icyleaf.com/2016/08/how-to-install-rancher-on-osx/</guid><description>
Rancher 0.x 版本部署指南</description><content:encoded><![CDATA[



<div class="updated">
  <header class="updated-header">
    <h4 class="updated-title">更新</h4>
    
    <p class="updated-meta">2月 22, 2022</p>
    
  </header>
  <article class="updated-body">
    以下内容写于 Rancker 0.x 版本，后续版本变更比较大本文不再有没有参考。
  </article>
</div>


<p>Rancher 是 Docker 编排解决方案的一种，好处在于可以做容器编排，网络，存储，负载均衡，还能够支持云服务器（比如 Amazon EC2/Azure/DigitalOcean）也能够兼容 Docker Swarm/Mesos/Kubernetes 等其他的解决方案。自它还没有发布 <a href="http://rancher.com/announcing-rancher-1-0-ga/">1.0</a> 版本之前也有持续的关注。它自身还有个 <a href="http://www.infoq.com/cn/news/2015/03/rancheros-docker-linux">RancherOS</a> 对于 CoreOS 也是一个不小的威胁。</p>
<p>由于它提供非常优化的后台管理界面，同时也提供 REST API，日常开发使用中异常的方便。如果非要说出一点不好的，那可能就是它对内存有点小要求：<strong>最小 1GB 内存</strong>，因此如果想放在自己 VPS 上的童鞋需要评估下了。</p>
<h2 id="mac-安装">Mac 安装</h2>
<p>这块也趁着 <a href="https://docs.docker.com/docker-for-mac/">Docker for Mac</a> 的好处，终于摆脱的 <code>docker-machine</code> 的折磨，不用在依赖 VirtualBox，也不在每次装载 machine 的变量和查找虚拟机的 IP。映射的端口端口都通过 <code>localhost</code> 访问。</p>
<p>Rancher 通过 Docker 来安装本来说是非常简单的，它分为服务端和客户端。本教程以 <a href="http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/">Single Node</a> 来讲解，不考虑 <a href="http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/multi-nodes/">Multi Node</a>。</p>
<p>这块网上一直没有太好的解决方案，我看很多国外给出的<a href="https://gist.github.com/axnux/09dc375d71398cbbee44ebd23ba35a08">解决方案</a>也比较麻烦，主要是由于 Docker for mac 使用的是 xhyve 作为轻量化的虚拟化方案，而 rancher 安装 server 端没有任何问题，在添加主机的时候需要通过 HTTP 来连接 server 端而失败。下面我来带大家用最简单的方案来拆解。无需任何第三方的辅助。</p>
<h3 id="服务端">服务端</h3>
<blockquote>
<p>如果网速连接 docker hub 过慢可考虑使用代理设置或者国内的镜像服务，我这里分享一个 <code>https://docker.mirrors.ustc.edu.cn</code>，可在 Docker -&gt; Preferences&hellip; -&gt; Advanced -&gt; Registry Mirror 添加。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker run -d --name rancher-server --restart<span class="o">=</span>always -p 8080:8080 rancher/server
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ docker logs -f rancher-server
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2016-08-05T16:48:52Z&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Creating schema machine, roles [service]&#34;</span> <span class="nv">id</span><span class="o">=</span>1ds17
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2016-08-05T16:48:53Z&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Creating schema machine, roles [project member owner]&#34;</span> <span class="nv">id</span><span class="o">=</span>1ds18
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2016-08-05T16:48:53Z&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Creating schema machine, roles [admin user readAdmin]&#34;</span> <span class="nv">id</span><span class="o">=</span>1ds19
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2016-08-05T16:48:53Z&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Creating schema machine, roles [readonly]&#34;</span> <span class="nv">id</span><span class="o">=</span>1ds20
</span></span></code></pre></div><p>看到如上类似的日志说明服务已经初始化完毕，通过浏览器访问 <code>http://localhost:8080</code> 就可以看到后台管理界面。</p>
<h3 id="客户端">客户端</h3>
<p>先不着急继续页面操作，回到终端上执行如下命令获取 rancher-server 容器的 IP 地址备用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker inspect --format <span class="s1">&#39;{{ .NetworkSettings.IPAddress }}&#39;</span> rancher-server
</span></span><span class="line"><span class="ln">2</span><span class="cl">172.17.0.2
</span></span></code></pre></div><p>接着上面的步骤，在打开页面能看到 Add Host 按钮并点击对于弹出 “Host Registration URL” 选择 “Something else:” 在后面的输入框填入上面的 IP 和端口号 <code>http://172.17.0.2:8080</code> 并保存。</p>
<p>之后就是给你一个客户端（部署主机）的选项，由于我们只添加本机作为部署主机使用，因此这里选择 Custom，其他不用任何设置，直接滑倒最底部找到一个执行 docker 命令的区域：</p>
<p><img src="http://ww2.sinaimg.cn/large/006tNbRwjw1f6jdkffiqhj31ee150k0c.jpg"
  
  
  alt="add rancher host"></img>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker run -d --privileged -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/rancher:/var/lib/rancher rancher/agent:v1.0.2 http://172.17.0.2:8080/v1/scripts/676576FFEC2212A68391:1470416400000:tfqxfdglHL6Qw8dpLVtbOesYY4
</span></span></code></pre></div><p>你会发现执行可能会报错：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">docker: Error response from daemon: Mounts denied:
</span></span><span class="line"><span class="ln">2</span><span class="cl">The path /var/lib/rancher
</span></span><span class="line"><span class="ln">3</span><span class="cl">is not shared from OS X and is not known to Docker.
</span></span><span class="line"><span class="ln">4</span><span class="cl">You can configure shared paths from Docker -&gt; Preferences... -&gt; File Sharing.
</span></span><span class="line"><span class="ln">5</span><span class="cl">See https://docs.docker.com/docker-for-mac/osxfs/#namespaces <span class="k">for</span> more info.
</span></span></code></pre></div><p>目前有可能是一个 Docker 的 Bug，因为 <code>/var/lib/rancher</code> 是挂载到已经默认添加 <code>/private</code> 文件共享，但是它还是报错，如果你在 Docker 设置的 File Sharing 添加的话它也不会让你添加，因此我们需要做一点小修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ docker run -d --privileged -v /var/run/docker.sock:/var/run/docker.sock -v <span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/docker/rancher/var/lib/rancher:/var/lib/rancher rancher/agent:v1.0.2 http://172.17.0.2:8080/v1/scripts/676576FFEC2212A68391:1470416400000:tfqxfdglHL6Qw8dpLVtbOesYY4
</span></span><span class="line"><span class="ln">2</span><span class="cl">5cf22a10cf28b4182b6e205fa631146e86d67c3c9d86901ff8cf7ab087319a29
</span></span></code></pre></div><p>最后点击页面的 Close 后会跳转到 Host 的列表，你就能惊喜的发现添加成功了！</p>
<p><img src="http://ww2.sinaimg.cn/large/006tNbRwjw1f6jdidcojkj315y0m4dik.jpg"
  
  
  alt="rancher host"></img>
</p>
<h2 id="结尾">结尾</h2>
<p>本篇只先解决这一个问题，更多使用的资料请看<a href="http://rancher.hidocker.io/">Rancher 实战红宝书</a>。</p>
]]></content:encoded></item></channel></rss>