<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on icyleaf</title>
    <link>https://icyleaf.com/tags/docker/index.xml</link>
    <description>Recent content in Docker on icyleaf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>All rights reserved - 2019</copyright>
    <atom:link href="https://icyleaf.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ḫpr - 最好用的 git 仓库镜像同步工具</title>
      <link>https://icyleaf.com/2018/04/intro-hpr</link>
      <pubDate>Fri, 27 Apr 2018 18:12:23 +0800</pubDate>
      
      <guid>https://icyleaf.com/2018/04/intro-hpr</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://github.com/icyleaf/hpr/raw/master/docs/_media/icon.png&#34; alt=&#34;icon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://icyleaf.github.io/hpr/&#34;&gt;ḫpr&lt;/a&gt; 是一个把任意 git 仓库的镜像到 gitlab 服务的同步工具，还支持定期同步的功能。&lt;/p&gt;

&lt;p&gt;特性:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持 Web API 接口，可用于远程控制不仅限于终端使用&lt;/li&gt;
&lt;li&gt;支持终端命令控制，方便临时使用&lt;/li&gt;
&lt;li&gt;定时更新镜像的仓库，时间可调，告别不靠谱的 crontab&lt;/li&gt;
&lt;li&gt;几乎支持所有的 git 托管的仓库&lt;/li&gt;
&lt;li&gt;使用可独立部署的 Gitlab 作为镜像平台&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本工具可以用到的地方:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;任意 git 仓库源码的定期同步&lt;/li&gt;
&lt;li&gt;Cocoapods 的境内加速和同步&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;契子&#34;&gt;契子&lt;/h2&gt;

&lt;p&gt;如果关注我博客的用户或者曾经看到过另外一篇文章&lt;a href=&#34;http://icyleaf.com/2015/01/speed-up-cocoapods/&#34;&gt;极速化 CocoaPods&lt;/a&gt;的话且实践的用户会明白为什么会有它的产生。
在我发布那篇文章的时候那套体系已经在我们公司的服务器上运行且截至目前已经持续运行了 3 年多！&lt;/p&gt;

&lt;p&gt;那个方案并不完美，除了调用必须通过脚本的蹩脚的方案外出问题最多的主要是 gitlab-mirrors
只能使用 crontab 做定时任务这样会因多个镜像在同步未完成的情况下重复开启新的同步任务，一个任务不明显一旦积攒多了起来还会慢慢的蚕食内存因此又不得不 ssh 到服务器
开始杀进程相当于重置。&lt;/p&gt;

&lt;p&gt;当时想重新做一个的想法其实 2017 年就产生了用 ruby 写了个头当时项目命名为 nightwing 但 ruby 的问题在部署上面有比较麻烦需要各种依赖环境，
当时也考虑过 Go 但由于在断断续续学习没有持续，这个时候就开始将注意力转移到了类 Ruby 语法的 Crystal 语言，通过业余时间慢慢的了解和确定其性能后虽然和
 Go 来比打包还没有那么高的集成度但完成核心功能已经完全足够，也就开始了封装 &lt;a href=&#34;https://github.com/icyleaf/gitlab.cr&#34;&gt;gitlab&lt;/a&gt;、
&lt;a href=&#34;https://github.com/icyleaf/halite&#34;&gt;halite&lt;/a&gt; 网络库直到最近基本完成了核心功能。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ḫpr&lt;/code&gt; 就这样诞生了。项目名和 Logo 出处来源于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%81%96%E7%94%B2%E8%9F%B2&#34;&gt;圣甲虫&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;

&lt;p&gt;鉴于 Docker 的便利性，目前教程只提供此种方法进行安装部署，首先克隆本项目：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/icyleaf/hpr.git
$ cd hpr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;复制 &lt;a href=&#34;config/hpr.json.example&#34;&gt;config/hpr.json.example&lt;/a&gt; 并改名 &lt;code&gt;config/config.json&lt;/code&gt; 后可修改&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;schedule_in&amp;quot;: &amp;quot;1.day&amp;quot;,
  &amp;quot;basic_auth&amp;quot;: {
    &amp;quot;enable&amp;quot;: false,
    &amp;quot;user&amp;quot;: &amp;quot;hpr&amp;quot;,
    &amp;quot;password&amp;quot;: &amp;quot;p@ssw0rd&amp;quot;
  },
  &amp;quot;gitlab&amp;quot;: {
    &amp;quot;ssh_port&amp;quot;: 22,
    &amp;quot;endpoint&amp;quot;: &amp;quot;http://gitlab.example.com/api/v3&amp;quot;,
    &amp;quot;private_token&amp;quot;: &amp;quot;abc&amp;quot;,

    &amp;quot;group_name&amp;quot;: &amp;quot;mirrors&amp;quot;,

    &amp;quot;project_public&amp;quot;: false,
    &amp;quot;project_issue&amp;quot;: false,
    &amp;quot;project_wiki&amp;quot;: false,
    &amp;quot;project_merge_request&amp;quot;: false,
    &amp;quot;project_snippet&amp;quot;: false
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;核心需要修改的参数有如下四项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;: Gitlab API 的地址，&lt;strong&gt;无需修改后面部分&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private_token&lt;/code&gt;: 在个人设置的 Account 页面获得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_name&lt;/code&gt;: 项目镜像的项目都会归属到这个组内，&lt;strong&gt;务必确保你的账户拥有创建组的权限&lt;/strong&gt; (如果是管理员请忽略加粗字样)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh_port&lt;/code&gt;: 如果 SSH 不是 22 端口的话需要根据你的实际情况修改&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;配置文件修改保存后还需要在 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件中配置下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;

services:
  hpr:
    image: icyleafcn/hpr
    ports:
      - 8848:8848
    volumes:
      - ./config:/app/config
      - ./repositories:/app/repositories
    environment:
      REDIS_URL: tcp://redis:6379
      REDIS_PROVIDER: REDIS_URL

      HPR_SSH_HOST: git.example.com
      HPR_SSH_PORT: 22
    depends_on:
      - redis
  redis:
    image: redis:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;HPR_SSH_HOST&lt;/code&gt; 和 &lt;code&gt;HPR_SSH_PORT&lt;/code&gt; 变量用于设置 Docker 实例中的 SSH 配置。如果 SSH 端口是 22 的可忽略设置这俩参数。&lt;/p&gt;

&lt;p&gt;编辑完成后运行下面命令快完成了！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up
...
hpr_1      | Generating public/private rsa key pair ...
hpr_1      |
hpr_1      | GENERATED SSH PUBLIC KEY:
hpr_1      | ##################################################################
hpr_1      | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDq8O3HbLn9x8Uy8RUotlpOnxdakrmCyDpZrGBeLARmEbd6BOIBQ+UWm8NUKthQ7UOavmlsq4j8lY4kyFW2eFX2qWcbvI+s2gI+05MXax+mAukSszaNSnpAoTyJCRipilSkqiOV99V8JIJhrHPtTO0o/Ui
9WiyyWsUM4M9lEKHpZ486lDGk3IM2XQW+pxAoMKb0TYzqCsrduHUtjzy0M0BqgMPe9EtVQqCbnTMzDLXmRONoTYyTV51NQ12mMwEQcDaLQ28e5gqouQJKS81JaoRpQWa7pHsOCki6Fk9TB+EQFrGz5nOrmYYM+O1MKnFkzmVHv7Fh50Sz7d2nYzzOKAkR hpr@docker
hpr_1      | ##################################################################
hpr_1      |
hpr_1      | Configuring ssh config ...
hpr_1      | Starting hpr server ...
hpr_1      |   _
hpr_1      |  | |__  _ __  _ __
hpr_1      |  | &#39;_ \| &#39;_ \| &#39;__|
hpr_1      |  | | | | |_) | |
hpr_1      |  |_| |_| .__/|_|
hpr_1      |        |_|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后从执行命令的输出找到生成的 SSH PUBLIC KEY（两个井号中间的部分，以 &lt;code&gt;ssh-rsa&lt;/code&gt; 开头，&lt;code&gt;hpr@docker&lt;/code&gt; 结尾），
复制添加到 gitlab 的账户 SSH Keys 页面中。&lt;/p&gt;

&lt;h2 id=&#34;更多资源&#34;&gt;更多资源&lt;/h2&gt;

&lt;p&gt;再多的内容我已经整理到文档中，欢迎移步浏览：&lt;a href=&#34;https://icyleaf.github.io/hpr/&#34;&gt;https://icyleaf.github.io/hpr/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何使用 Docker 管理 Jenkins</title>
      <link>https://icyleaf.com/2018/04/how-to-manage-jenkins-with-docker</link>
      <pubDate>Wed, 18 Apr 2018 14:44:32 +0800</pubDate>
      
      <guid>https://icyleaf.com/2018/04/how-to-manage-jenkins-with-docker</guid>
      <description>

&lt;p&gt;官方的 &lt;a href=&#34;https://hub.docker.com/_/jenkins&#34;&gt;jenkins&lt;/a&gt; 镜像已经不再维护管理而是由 Jenkins Community 进行更新，鉴于 Jenkins 的更新频率特别快社区版本会提供两个版本：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lts&lt;/code&gt; 长期稳定版本，但还是会有新版提醒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latest&lt;/code&gt; 每周更新版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;都是基于 alpine 系统封装因此镜像的体积会大大减小很多。如果你是内网使用可以不用在意更新问题长期使用一个版本也没太大问题。&lt;/p&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;创建镜像时需要注意几个地方：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关联本地 volumes&lt;/li&gt;
&lt;li&gt;设置时区（默认是 UTC 时间）&lt;/li&gt;
&lt;li&gt;映射 50000 端口（这个是 master 和 slave 的通讯端口）和 8000 端口（Web）&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --restart=always
    -p 8000:8080 -p 50000:50000
    -v /var/lib/docker/jenkins:/var/jenkins_home
    -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai
    jenkins/jenkins:lts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于进行设置 JAVA 的参数可以参考：&lt;a href=&#34;https://github.com/jenkinsci/docker/issues/45&#34;&gt;https://github.com/jenkinsci/docker/issues/45&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;配置-jenkins-的插件源&#34;&gt;配置 Jenkins 的插件源&lt;/h2&gt;

&lt;p&gt;使用过它的人都知道管理和安装插件是一个奇慢无比的事情，虽然提供了代理服务器但我这还有一个更好的方案。&lt;/p&gt;

&lt;p&gt;我在翻阅国内镜像源网站的时候发现清华大学开源软件镜像站其实提供了国内 Jenkins 插件的镜像源但一直很低调的没有公布，通过进入&lt;code&gt;管理插件 -&amp;gt; 高级&lt;/code&gt;页面拉到最底部有个升级站点的自定义框，填入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装插件的时候系统默认会测试网络就是 ping 下 Google 的网站，它会提示失败但不用担心它会继续尝试下载和安装插件。&lt;/p&gt;

&lt;h2 id=&#34;升级&#34;&gt;升级&lt;/h2&gt;

&lt;p&gt;此方法适用于所有的容器的升级步骤。&lt;/p&gt;

&lt;p&gt;首先需要找到容器的名字，这里我想会有不少人会问为什么你在创建一个容器的时候不指定一个名字，
那是因为后面还需要创建一个新版本的容器而名字不能一样，因此我现在创建都让 docker 随机分配。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps
CONTAINER ID  ...   NAMES
8f48718fdd07  ...   naughty_pasteur
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拿到之后先停止运行后，创建一个数据备份容器再进行拉取最新版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker stop naughty_pasteur
$ docker docker create --volumes-from naughty_pasteur --name jenkins-data jenkins/jenkins:lts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拉取最新版本后恢复数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull jenkins/jenkins:lts
$ docker run -d --restart=always
    --volumes-from jenkins-data
    -p 8000:8080 -p 50000:50000
    -v /var/lib/docker/jenkins:/var/jenkins_home
    -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai
    jenkins/jenkins:lts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;确保通过 web 访问和 build 正常后删除老的和数据备份的容器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker rm naughty_pasteur
$ docker rm jenkins-data
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;疑惑解答&#34;&gt;疑惑解答&lt;/h2&gt;

&lt;h3 id=&#34;1-我忘记设置时区但我进实例修改了时区在-jenkins-里不生效&#34;&gt;1. 我忘记设置时区但我进实例修改了时区在 Jenkins 里不生效&lt;/h3&gt;

&lt;p&gt;在 Jenkins 的系统设置页面找到脚本命令行运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.setProperty(&#39;org.apache.commons.jelly.tags.fmt.timeZone&#39;, &#39;Asia/Shanghai&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行后即时生效无需重启，方法来自&lt;a href=&#34;https://wiki.jenkins.io/display/JENKINS/Change+time+zone&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;官方文档&#34;&gt;官方文档&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkinsci/docker/blob/master/README.md&#34;&gt;https://github.com/jenkinsci/docker/blob/master/README.md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker 摸爬滚打对抗 CentOS 6</title>
      <link>https://icyleaf.com/2016/12/docker-with-centos</link>
      <pubDate>Fri, 30 Dec 2016 17:52:30 +0800</pubDate>
      
      <guid>https://icyleaf.com/2016/12/docker-with-centos</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;2018年10月18日更新：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;国庆期间恰巧服务器硬盘故障且运维并没有做 raid 备份，给更换了一台新内部服务器，索性升级到了 CentOS 7，因此针对 CentOS 6 安装 Docker 的答疑不再更新。&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;前不久终于把我们移动团队内部服务器从 CentOS 5.x 升级到了 6.8。本来是拜托让升级至 7.0 版本起码能用上 docker 1.12 版本还是靠谱的事情。
事情往往难以预料的被告知其他团队在安装 7.0 之后造成内部服务器群的网卡失灵的诡异故障只能作罢，想想起码还有个早期 docker 版本可安装也就先这么着吧。&lt;/p&gt;

&lt;p&gt;这个是在 &lt;a href=&#34;http://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/&#34;&gt;如何在CentOS 上安装Gitlab&lt;/a&gt; 之后有一个无奈的使用指南，
因为运维也有他的考虑方面，参见知乎讨论：&lt;a href=&#34;https://www.zhihu.com/question/29191794&#34;&gt;如何说服运维选择 Debian/Ubuntu 而不是 CentOS&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装-docker&#34;&gt;安装 Docker&lt;/h2&gt;

&lt;h3 id=&#34;1-7-1&#34;&gt;1.7.1&lt;/h3&gt;

&lt;p&gt;Docker 最后一个支持 CentOS 6 的版本是 1.7.1 还必须安装 epel 源之后就&lt;a href=&#34;https://github.com/docker/docker/issues/14365&#34;&gt;被大家欢天喜地的抛弃了 6 的支持&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
sudo yum -y remove docker
sudo yum install libselinux-python docker-io
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;由于 yum 内 docker 已经被其他使用，不用安装错误了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;1-7-1-以上版本&#34;&gt;1.7.1 以上版本&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;请果断放弃这种想法&lt;/strong&gt;，虽然你可能在网上搜索有个别的文章说把内核升级到 3.10 后可以安装 docker 1.9 版本，经过我个人反复测试根本不可行！&lt;/p&gt;

&lt;p&gt;当然如果你还是坚持想尝试，请参考如下链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pangxie.space/docker/364&#34;&gt;http://www.pangxie.space/docker/364&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/dongdongwq/p/5381752.html&#34;&gt;http://www.cnblogs.com/dongdongwq/p/5381752.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://0evin.com/2016/06/17/%5B%E5%8E%9F%E5%88%9B%5DCentOS6.5%E5%AE%89%E8%A3%85Docker1.11.X%E7%89%88%E6%9C%AC/&#34;&gt;http://0evin.com/2016/06/17/%5B%E5%8E%9F%E5%88%9B%5DCentOS6.5%E5%AE%89%E8%A3%85Docker1.11.X%E7%89%88%E6%9C%AC/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;配置-docker&#34;&gt;配置 Docker&lt;/h2&gt;

&lt;p&gt;安装成功后先不要配置开机自启动和启动服务，docker 的官方镜像在国内众所周知的慢的一塌糊涂，如果你是在国内服务器使用请参考如下配置。&lt;/p&gt;

&lt;p&gt;我这里把我个人私藏已久的好用的镜像告诉大家，大家可不要以为我用的是阿里云或者 DaoCloud 这类有很多限制的玩意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;中国科技大学镜像：&lt;a href=&#34;https://docker.mirrors.ustc.edu.cn&#34;&gt;https://docker.mirrors.ustc.edu.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;网易蜂巢镜像：&lt;a href=&#34;http://hub-mirror.c.163.com&#34;&gt;http://hub-mirror.c.163.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同样需要注意的是 1.7.1 版本的 docker 配置文件是在 &lt;code&gt;/etc/sysconfig/docker&lt;/code&gt; 而不是网上和官方说的 &lt;code&gt;/etc/default/docker&lt;/code&gt; 打开此文件在 other_args 配置对于的源即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /etc/sysconfig/docker
#
# Other arguments to pass to the docker daemon process
# These will be parsed by the sysv initscript and appended
# to the arguments list passed to docker -d

#other_args=
#other_args=&amp;quot;--registry-mirror=http://hub-mirror.c.163.com&amp;quot;
other_args=&amp;quot;--registry-mirror=https://docker.mirrors.ustc.edu.cn&amp;quot;

DOCKER_CERT_PATH=/etc/docker

# Resolves: rhbz#1176302 (docker issue #407)
DOCKER_NOWARN_KERNEL_VERSION=1

# Location used for temporary files, such as those created by
# # docker load and build operations. Default is /var/lib/docker/tmp
# # Can be overriden by setting the following environment variable.
# # DOCKER_TMPDIR=/var/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后面就没什么好说的了，启动服务和设置开机自启动就完事了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig docker on
sudo service docker start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;验证下启动的服务是否已经配置了国内镜像源&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ps aux | grep &amp;quot;docker -d&amp;quot;

root     16992  0.1  0.1 1239860 32276 ?       Sl   Dec29   2:02 /usr/bin/docker -d --registry-mirror=https://docker.mirrors.ustc.edu.cn
root     26873  0.0  0.0 103332   876 pts/2    S+   18:16   0:00 grep docker -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;疑难杂症&#34;&gt;疑难杂症&lt;/h2&gt;

&lt;h4 id=&#34;1-使用国内镜像源-pull-镜像偶尔会失败-反复几次就可以解决&#34;&gt;1. 使用国内镜像源 pull 镜像偶尔会失败，反复几次就可以解决&lt;/h4&gt;

&lt;p&gt;频次不高原因未知，因此还未重视。&lt;/p&gt;

&lt;h4 id=&#34;2-docker-web-管理工具&#34;&gt;2. Docker Web 管理工具&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;2018年10月更新：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;推荐使用 &lt;a href=&#34;https://github.com/portainer/portainer&#34;&gt;portainer&lt;/a&gt; ，兼容 1.7 的部分功能可能会发生部分功能和参数无法显示但不影响使用。之前我有推荐 rancher（可参考前篇文章：&lt;a href=&#34;http://icyleaf.com/2016/08/how-to-install-rancher-on-osx/&#34;&gt;如何在 OS X 上安装 Rancher
&lt;/a&gt;），但 rancher 官方要求 docker 最低版本是 1.9+。&lt;/p&gt;

&lt;h4 id=&#34;3-docker-进程挂了重启后无法恢复之前的-containers&#34;&gt;3. Docker 进程挂了重启后无法恢复之前的 containers&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker start c39206003c7a
Error: Cannot start container c39206003c7a: Error getting container c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5 from driver devicemapper: Error mounting &#39;/dev/mapper/docker-253:0-267081-c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5&#39; on &#39;/var/lib/docker/devicemapper/mnt/c39206003c7ae8992a554a9ac2ea130327fc4af1b2c389656c34baf9a56c84b5&#39;: device or resource busy
2014/05/08 19:14:57 Error: failed to start one or more containers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种一般是因为意外终止进程造成上次的 volume 没有正常 unmount，只需手动操作下即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unmount /var/lib/docker/devicemapper/mnt/d640aea67108b04c6a5ba14645966b092db1f807f3e3f41dca7a1470f76b68fb
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;d640aea67108b04c6a5ba14645966b092db1f807f3e3f41dca7a1470f76b68fb&lt;/code&gt; 是根据不同 container 生成的，请根据实际情况复制和执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个真没办法，只能在 Dockerfile 或者进实例里面进行修改时区，这个我就不过多赘述了。&lt;/p&gt;

&lt;h4 id=&#34;4-升级运行的-container-版本&#34;&gt;4. 升级运行的 container 版本&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker stop xxxx
$ docker create --volumes-from &amp;lt;container_name_of_original_server&amp;gt; \ --name xxx-data image/name:&amp;lt;tag_of_previous_rancher_server&amp;gt;
$ docker pull image/name:latest
$ docker run -d --volumes-from xxx-data --restart=unless-stopped \ -p 8080:8080 image/namel.:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-非-root-用户执行-docker&#34;&gt;5. 非 root 用户执行 docker&lt;/h4&gt;

&lt;p&gt;创建 docker 用户组并重启 docker 服务，之后把你想要的用户加到 docker 用户组即可。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ groupadd docker
$ service docker restart
$ usermod -a -G docker icyleaf
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;6-宿主机-cst-时间会造成-docker-实例时间不准&#34;&gt;6. 宿主机 CST 时间会造成 docker 实例时间不准&lt;/h4&gt;

&lt;p&gt;这个真没办法，只能在 Dockerfile 或者进实例里面进行修改时区，这个我就不过多赘述了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何在 OS X 上安装 Rancher</title>
      <link>https://icyleaf.com/2016/08/how-to-install-rancher-on-osx</link>
      <pubDate>Fri, 05 Aug 2016 17:21:08 +0800</pubDate>
      
      <guid>https://icyleaf.com/2016/08/how-to-install-rancher-on-osx</guid>
      <description>

&lt;p&gt;Rancher 是 Docker 编排解决方案的一种，好处在于可以做容器编排，网络，存储，负载均衡，还能够支持云服务器（比如 Amazon EC2/Azure/DigitalOcean）也能够兼容 Docker Swarm/Mesos/Kubernetes 等其他的解决方案。自它还没有发布 &lt;a href=&#34;http://rancher.com/announcing-rancher-1-0-ga/&#34;&gt;1.0&lt;/a&gt; 版本之前也有持续的关注。它自身还有个 &lt;a href=&#34;http://www.infoq.com/cn/news/2015/03/rancheros-docker-linux&#34;&gt;RancherOS&lt;/a&gt; 对于 CoreOS 也是一个不小的威胁。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://docs.rancher.com/img/rancher/rancher_overview_2.png&#34; alt=&#34;rancher-intro&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由于它提供非常优化的后台管理界面，同时也提供 REST API，日常开发使用中异常的方便。如果非要说出一点不好的，那可能就是它对内存有点小要求：&lt;strong&gt;最小 1GB 内存&lt;/strong&gt;，因此如果想放在自己 VPS 上的童鞋需要评估下了。&lt;/p&gt;

&lt;h2 id=&#34;mac-安装&#34;&gt;Mac 安装&lt;/h2&gt;

&lt;p&gt;这块也趁着 &lt;a href=&#34;https://docs.docker.com/docker-for-mac/&#34;&gt;Docker for Mac&lt;/a&gt; 的好处，终于摆脱的 &lt;code&gt;docker-machine&lt;/code&gt; 的折磨，不用在依赖 VirtualBox，也不在每次装载 machine 的变量和查找虚拟机的 IP。映射的端口端口都通过 &lt;code&gt;localhost&lt;/code&gt; 访问。&lt;/p&gt;

&lt;p&gt;Rancher 通过 Docker 来安装本来说是非常简单的，它分为服务端和客户端。本教程以 &lt;a href=&#34;http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/&#34;&gt;Single Node&lt;/a&gt; 来讲解，不考虑 &lt;a href=&#34;http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/multi-nodes/&#34;&gt;Multi Node&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这块网上一直没有太好的解决方案，我看很多国外给出的&lt;a href=&#34;https://gist.github.com/axnux/09dc375d71398cbbee44ebd23ba35a08&#34;&gt;解决方案&lt;/a&gt;也比较麻烦，主要是由于 Docker for mac 使用的是 xhyve 作为轻量化的虚拟化方案，而 rancher 安装 server 端没有任何问题，在添加主机的时候需要通过 HTTP 来连接 server 端而失败。下面我来带大家用最简单的方案来拆解。无需任何第三方的辅助。&lt;/p&gt;

&lt;h3 id=&#34;服务端&#34;&gt;服务端&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如果网速连接 docker hub 过慢可考虑使用代理设置或者国内的镜像服务，我这里分享一个 &lt;code&gt;https://docker.mirrors.ustc.edu.cn&lt;/code&gt;，可在 Docker -&amp;gt; Preferences&amp;hellip; -&amp;gt; Advanced -&amp;gt; Registry Mirror 添加。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --name rancher-server --restart=always -p 8080:8080 rancher/server
$ docker logs -f rancher-server

time=&amp;quot;2016-08-05T16:48:52Z&amp;quot; level=info msg=&amp;quot;Creating schema machine, roles [service]&amp;quot; id=1ds17
time=&amp;quot;2016-08-05T16:48:53Z&amp;quot; level=info msg=&amp;quot;Creating schema machine, roles [project member owner]&amp;quot; id=1ds18
time=&amp;quot;2016-08-05T16:48:53Z&amp;quot; level=info msg=&amp;quot;Creating schema machine, roles [admin user readAdmin]&amp;quot; id=1ds19
time=&amp;quot;2016-08-05T16:48:53Z&amp;quot; level=info msg=&amp;quot;Creating schema machine, roles [readonly]&amp;quot; id=1ds20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到如上类似的日志说明服务已经初始化完毕，通过浏览器访问 &lt;code&gt;http://localhost:8080&lt;/code&gt; 就可以看到后台管理界面。&lt;/p&gt;

&lt;h3 id=&#34;客户端&#34;&gt;客户端&lt;/h3&gt;

&lt;p&gt;先不着急继续页面操作，回到终端上执行如下命令获取 rancher-server 容器的 IP 地址备用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect --format &#39;{{ .NetworkSettings.IPAddress }}&#39; rancher-server
172.17.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着上面的步骤，在打开页面能看到 Add Host 按钮并点击对于弹出 “Host Registration URL” 选择 “Something else:” 在后面的输入框填入上面的 IP 和端口号 &lt;code&gt;http://172.17.0.2:8080&lt;/code&gt; 并保存。&lt;/p&gt;

&lt;p&gt;之后就是给你一个客户端（部署主机）的选项，由于我们只添加本机作为部署主机使用，因此这里选择 Custom，其他不用任何设置，直接滑倒最底部找到一个执行 docker 命令的区域：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/large/006tNbRwjw1f6jdkffiqhj31ee150k0c.jpg&#34; alt=&#34;add rancher host&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --privileged -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/rancher:/var/lib/rancher rancher/agent:v1.0.2 http://172.17.0.2:8080/v1/scripts/676576FFEC2212A68391:1470416400000:tfqxfdglHL6Qw8dpLVtbOesYY4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你会发现执行可能会报错：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker: Error response from daemon: Mounts denied:
The path /var/lib/rancher
is not shared from OS X and is not known to Docker.
You can configure shared paths from Docker -&amp;gt; Preferences... -&amp;gt; File Sharing.
See https://docs.docker.com/docker-for-mac/osxfs/#namespaces for more info.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前有可能是一个 Docker 的 Bug，因为 &lt;code&gt;/var/lib/rancher&lt;/code&gt; 是挂载到已经默认添加 &lt;code&gt;/private&lt;/code&gt; 文件共享，但是它还是报错，如果你在 Docker 设置的 File Sharing 添加的话它也不会让你添加，因此我们需要做一点小修改：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --privileged -v /var/run/docker.sock:/var/run/docker.sock -v ${HOME}/docker/rancher/var/lib/rancher:/var/lib/rancher rancher/agent:v1.0.2 http://172.17.0.2:8080/v1/scripts/676576FFEC2212A68391:1470416400000:tfqxfdglHL6Qw8dpLVtbOesYY4
5cf22a10cf28b4182b6e205fa631146e86d67c3c9d86901ff8cf7ab087319a29
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后点击页面的 Close 后会跳转到 Host 的列表，你就能惊喜的发现添加成功了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/large/006tNbRwjw1f6jdidcojkj315y0m4dik.jpg&#34; alt=&#34;rancher host&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;结尾&#34;&gt;结尾&lt;/h2&gt;

&lt;p&gt;本篇只先解决这一个问题，更多使用的资料请看&lt;a href=&#34;http://rancher.hidocker.io/&#34;&gt;Rancher 实战红宝书&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>