<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode on icyleaf</title>
    <link>http://icyleaf.com/tags/xcode/</link>
    <description>Recent content in Xcode on icyleaf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2007</copyright>
    <lastBuildDate>Tue, 19 Feb 2013 12:34:56 +0800</lastBuildDate>
    <atom:link href="http://icyleaf.com/tags/xcode/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>针对 Universal 应用上线 App Store 的提示</title>
      <link>http://icyleaf.com/2013/02/app-store-review-tips-about-universal-app</link>
      <pubDate>Tue, 19 Feb 2013 12:34:56 +0800</pubDate>
      
      <guid>http://icyleaf.com/2013/02/app-store-review-tips-about-universal-app</guid>
      <description>

&lt;h2 id=&#34;官方禁止新版本支持的设备小余旧版本&#34;&gt;官方禁止新版本支持的设备小余旧版本&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/cn/app/le-ju-ji-suan-qi-zui-gei-li/id397735649?mt=8&#34;&gt;乐居计算器&lt;/a&gt;是我们的第一款 Universal 应用，这次做了重要变化，但仅限于 iPhone 的修改，本想改本次上线仅支持 iPhone 来赶 deadline，临到上线的时候却被 Xcode 报错：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;This bundle does not support one or more of the devices that were supported in the previous bundle for this app. Bundles must continue to support any devices previously supported.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;官方《&lt;a href=&#34;https://developer.apple.com/appstore/guidelines.html&#34;&gt;App Store Review Guidelines&lt;/a&gt;》却没有提到有这样的限制，最后在官方技术 Q&amp;amp;A 找到答疑，参见 &lt;a href=&#34;http://developer.apple.com/library/ios/#qa/qa1623/_index.html&#34;&gt;Why am I getting device support errors when uploading my app?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;iphone-和-ipad-的排名是分开统计的&#34;&gt;iPhone 和 iPad 的排名是分开统计的&lt;/h2&gt;

&lt;p&gt;不知道大家注意没有，其实就算你发布的 app 是 Universal，但 app store 针对它的排行榜确实分开计算的，因此在做排名统计的时候不要只顾着一个设备的数据。那这个下载的数据怎么计算呢？&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;什么设备下载就算那个设备的数据&lt;/li&gt;
&lt;li&gt;通过 itunes 下载的算 iphone 的数据（Ocz）&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;数据来源：&lt;a href=&#34;http://www.quora.com/How-does-being-a-universal-app-affect-App-Store-rankings&#34;&gt;How does being a universal app affect App Store rankings&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;iphone-ipad-新版本改为-universal-两者都算新品上线&#34;&gt;iPhone/iPad 新版本改为 Universal，两者都算新品上线&lt;/h2&gt;

&lt;p&gt;原理同上，不再细说&lt;/p&gt;

&lt;h2 id=&#34;iphone-ipad-还是一劳永逸的-universal&#34;&gt;iPhone/iPad 还是一劳永逸的 Universal&lt;/h2&gt;

&lt;p&gt;这是一个众说纷纭的话题，我的个人建议是，如果团队人较少且应用是免费发布，尽可能做成 Universal，减少不必要的维护成本和开发成本（虽然兼容平台会有一些牺牲）；如果是做付费且运营的人员可以支撑，可以最快最能抓住市场需求的点发布 iPhone 版本，通过市场反应去绝对是否开发 iPad 版本，等推广达到一个峰值（这个需要自己衡量）时，可以把 iPhone 或 iPad 的改成 Universal 版本，再次赚上一笔。&lt;/p&gt;

&lt;p&gt;当然也有从 Universal 版拆分为 iPhone 和 iPad 的策略，不过我个人对此营销手段感到反感。重要的事让用户失去了占便宜的特殊心理。&lt;/p&gt;

&lt;h3 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cocoanetics.com/2011/05/to-universal-or-not/&#34;&gt;To Universal or Not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.iteleportmobile.com/the-case-for-universal-apps&#34;&gt;The Case for Universal Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>友盟 iOS 发布渠道自动化脚本</title>
      <link>http://icyleaf.com/2012/05/ios-publish-channel-packger-for-umeng</link>
      <pubDate>Thu, 10 May 2012 12:34:56 +0800</pubDate>
      
      <guid>http://icyleaf.com/2012/05/ios-publish-channel-packger-for-umeng</guid>
      <description>&lt;p&gt;现在公司的大多数手机项目的统计服务都是用的&lt;a href=&#34;http:///www.umeng.com&#34;&gt;友盟&lt;/a&gt;，而自使用之初到现在都有一个渠道管理的功能，这个最后打包的时候实际上可能会产生一点点的麻烦，最早第一个 app 发布的时候，写了一个半自动的脚本，凑合用了很久，现在觉得需要完全自动化，于是借鉴之前 &lt;a href=&#34;http://icyleaf.com/2012/04/automating-script-to-testFlight-from-xcode/&#34;&gt;testflightapp 的自动化脚本&lt;/a&gt;，重新改造脚本。&lt;/p&gt;

&lt;p&gt;实现分两部分：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iOS 代码&lt;/li&gt;
&lt;li&gt;自动化脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实现原理很简单，我利用一个文本文件放置在项目当中（比如：&lt;code&gt;PublishChannel.txt&lt;/code&gt;），里面只需要存上发布渠道的名字，默认是 &lt;code&gt;App Store&lt;/code&gt;。在代码中只需要想友盟调用函数的时候，读取这个文件即可。只需要做这样简单的工作就结束了 iOS 代码部分的工作。&lt;/p&gt;

&lt;p&gt;主要的功能基本上都是由自动化脚本完成。因为它要去标记分发渠道，处理打包工作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打包需要一个符合官方发布要求的 Icon，即 512x512 px，PNG 格式且名字必须是 &lt;code&gt;iTunesArtwork&lt;/code&gt; （不能包含后缀，无比保证在终端检查）&lt;/li&gt;
&lt;li&gt;修改 PublishChannel.txt 的分发渠道&lt;/li&gt;
&lt;li&gt;同时需要把 .app 的文件放在 &lt;code&gt;Payload&lt;/code&gt; 并和 &lt;code&gt;iTunesArtwork&lt;/code&gt; 一起打成 ipa 包（实际上就是一个 zip，改成了 ipa）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样看起来其实工作也不复杂，只不过分发渠道多了就是有些浪费时间。同样还是采用了 Archive 的 Post-Action，这里面可以插入脚本以及外部的调用脚本（如果看不到下面的具体代码，请&lt;a href=&#34;https://gist.github.com/2650508&#34;&gt;点击这里&lt;/a&gt;：&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/2650508.js?file=package.sh&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>QuickLook 感悟</title>
      <link>http://icyleaf.com/2012/04/thinking-in-quicklook</link>
      <pubDate>Mon, 30 Apr 2012 12:34:56 +0800</pubDate>
      
      <guid>http://icyleaf.com/2012/04/thinking-in-quicklook</guid>
      <description>

&lt;p&gt;前段时间对 OS X 系统的 &lt;a href=&#34;http://en.wikipedia.org/wiki/Quick_Look&#34;&gt;QuickLook&lt;/a&gt; 非常感兴趣，能够随着开发者的定制，针对不同的文件呈现符合用户需求的预览功能，然后认为它属于是万能的。随后可以琢磨利用它做些意思的事情。&lt;/p&gt;

&lt;h1 id=&#34;范例&#34;&gt;范例&lt;/h1&gt;

&lt;p&gt;为了大家对它有个直接的认识，我这里找了几个范例，看到图大家就非常明白了！&lt;/p&gt;

&lt;p&gt;默认系统很对 QuickTime 兼容格式的可以实现视频预览播放，如果安装了最新的 MPlayerX，同样也支持大多数格式（目前还不支持 mkv）
&lt;img src=&#34;https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/Quicklook_Programming_Guide/Art/preview_example2.jpg&#34; alt=&#34;video quicklook&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;预热&#34;&gt;预热&lt;/h1&gt;

&lt;p&gt;Xcode 已经内置了 QuickLook 的插件模块，一边阅读&lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/UserExperience/Conceptual/Quicklook_Programming_Guide/Introduction/Introduction.html&#34;&gt;官方文档&lt;/a&gt;，一边在 Github 上面搜索相关的&lt;a href=&#34;https://github.com/search?q=QuickLook&amp;amp;type=Repositories&#34;&gt;开源项目&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;QuickLook 是通过 &lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE&#34;&gt;UTIs&lt;/a&gt; 的资源类型来对文件进行预览。&lt;/p&gt;

&lt;h1 id=&#34;有意思的事情&#34;&gt;有意思的事情&lt;/h1&gt;

&lt;p&gt;不知从何开始，硬盘收集的电影越来越多，有时候也从朋友那边资源交换来了不少。其实这里有一个很大的问题，交换过来的资源并不一定符合每个人的口味，但面对一个个电影名字的众多视频而且可能还没有仔细的分类（包括我也是没有归类），其实在选择看哪个的时候有些头胀。之前也整理了一些 &lt;a href=&#34;http://icyleaf.com/2012/03/pngcrush-usage-with-ios-apps/&#34;&gt;pngcrush&lt;/a&gt; 的资源。脑门一亮，在想能不能利用 QuickLook 去*准确显示*电影的信息。&lt;/p&gt;

&lt;p&gt;电影的信息来源不用愁，利用 &lt;a href=&#34;http://www.douban.com/service/apidoc/reference/subject&#34;&gt;豆瓣相关 API&lt;/a&gt; 可以搜索到电影的信息，但是这里还有几点难题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;视频文件的文件名是否好提取关键字（视频文件根据每个来源提供者，视频工作室，个人的维护不同导致很难）&lt;/li&gt;
&lt;li&gt;豆瓣 API 接口是否给力（根据 1 是否能够准确搜索到正确的结果呢）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;针对于上面的问题，第一我想测试下豆瓣 API 是否给力，于是找了几种不同方式的视频文件名进行测试，记过尚可，但是搜索结果一般都是多条，其结果显示可能会存在偏差（主要是存在于电脑重名），当然这样也无法避免。这里我想郑重的表扬 IMDB 的策略，&lt;a href=&#34;http://www.imdbapi.com/&#34;&gt;IMDB API&lt;/a&gt; 可以按照关键字和 imdb id 去搜索（豆瓣也满足），让我表扬的地方在于，它返回的结果永远只有一条，我曾测试利用不同语种（大语种，小语种不行）的名字去尝试搜索几乎 98% 的命中率， 而且在搜索的基础上，又提供一个 year 的参数。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这会 IMDB API 服务器总是 503 状态，哎&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基于种种的问题，我最终采用了在文件添加 imdb id 的方式以保证完美的命中率！（虽然前期准备工作可能辛苦点 &amp;gt;..&amp;lt;）&lt;/p&gt;

&lt;h1 id=&#34;干活&#34;&gt;干活！&lt;/h1&gt;

&lt;p&gt;说干就干，在通读了文档和一些开源代码之后，就准备练手。如果大家同样开始跟我新建工程编写代码的时候就会发现一个很坑爹的事情，官方的文档根本没有更新！用的还是 Xcode 3 做的指导。问题在于 3 升级到 4 之后，很多东西都已经改的面目全非。对于熟悉 3 的开发者就不必担心了。&lt;/p&gt;

&lt;p&gt;QuickLook 官方文档的前面内容都没有问题，主要是后面有个 Debug 和 Test 的章节，在 4 里面有了一些大的变化，比如需要把 &lt;code&gt;.qlgenerator&lt;/code&gt; 文件复制到 &lt;code&gt;/Library/QuickLook&lt;/code&gt; 或 &lt;code&gt;~/Library/QuickLook&lt;/code&gt; 目录下面，然后通过外部命令 &lt;code&gt;qlmanage&lt;/code&gt; 去做代码的实现预览。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果发现没有更新，尝试 &lt;code&gt;qlmanage -r&lt;/code&gt; 更新一下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 Xcode 4 是如下解决：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;复制 &lt;code&gt;.qlgenerator&lt;/code&gt; 文件到对应的目录下面&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在工程项目的 &lt;code&gt;Build Phases&lt;/code&gt; 找到 &lt;code&gt;Add BuildPhase&lt;/code&gt; 并选择 &lt;code&gt;Add Copy Files&lt;/code&gt;，在选项设置 &lt;code&gt;Destination&lt;/code&gt; 选择 &lt;code&gt;Absolute Path&lt;/code&gt;，在 &lt;code&gt;Subpath&lt;/code&gt; 填入 &lt;code&gt;~/Library/QuickLook&lt;/code&gt;，最后在下面的列表添加项目的 &lt;code&gt;.qlgenerator&lt;/code&gt; 文件&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;执行外部命令&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在工程中按快捷键 &lt;code&gt;Command + Shift + ,&lt;/code&gt;，打开 Scheme， 在 &lt;code&gt;Run&lt;/code&gt; 的 &lt;code&gt;Info&lt;/code&gt; 更换 &lt;code&gt;Executable&lt;/code&gt;，在 &lt;code&gt;/usr/bin&lt;/code&gt; 找到 &lt;code&gt;qlmanage&lt;/code&gt; 文件。再更换到 &lt;code&gt;Arguments&lt;/code&gt; 里面添加参数格式：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-p /your/path/to/quicklook/file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比如，我要预览的是 &lt;code&gt;/Users/icyleaf/sample.mkv&lt;/code&gt; 文件:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-p /Users/icyleaf/sample.mkv&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;备受打击&#34;&gt;备受打击&lt;/h1&gt;

&lt;p&gt;当一切都紧锣密鼓的完成下去的时候，遇到一个无法解决的问题，就是在使用 HTTP 请求的时候，总是返回 &amp;ldquo;&lt;em&gt;Operation not permitted&lt;/em&gt;&amp;rdquo; 的错误，最后没有办法开始 Google 求助，然后发现了&lt;a href=&#34;http://web.archiveorange.com/archive/v/SEb6aPoIYeg2zfU4v9Ee&#34;&gt;一个很残酷的现实&lt;/a&gt;。于是我有仔细的看了看官方文档，翻到了彻底让我失败的证据！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Important&lt;/em&gt; For security reasons, you cannot use Web Kit plug-ins in HTML passed back to Quick Look (so you cannot, for example, use Java applets or Flash animations).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当前我以为只是不能使用 Webkit 嵌套 HTML，但是看到很多例子（比如预览 Markdown，JSON，.strings 文件）都是通过 WebKit 达到预览格式化后的 HTML 实现的。我还特别高兴的认为官方文档净吓唬我&amp;hellip;&lt;/p&gt;

&lt;p&gt;原来官方是出于安全考虑，把所有应用放在一个安全的 sandbox 里面，任何有威胁可能的安全问题一律扼杀掉，最终导致我的想法难产了 T_______T&lt;/p&gt;

&lt;p&gt;BTW，假如你的 QuickLook 也需要使用到 Webkit，默认调试报 &amp;ldquo;WebKit Threading Violation - initial use of WebKit from a secondary thread.&amp;rdquo; 错误，系统不运行从其他线程访问资源，因此在 Info.plist 把 &lt;code&gt;QLNeedsToBeRunInMainThread&lt;/code&gt; 设置为 &lt;code&gt;YES&lt;/code&gt; 即可。&lt;/p&gt;

&lt;h1 id=&#34;漏网之鱼&#34;&gt;漏网之鱼?&lt;/h1&gt;

&lt;p&gt;为什么这么讲呢，因为我看到 QuickLook 可以利用第三方的命令甚至是脚本去实现一些功能:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davea/qlmarkdownpython&#34;&gt;qlmarkdownpython&lt;/a&gt; - 利用 py 脚本 + Python framework 实现 markdown 的格式化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johan/QuickJSON&#34;&gt;QuickJSON&lt;/a&gt; - 利用 node 脚本实现 JSON 的友好化显示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;假如可以利用外部的脚本及命令的话，那是不是可以利用他们完成网络的访问及后续的格式化工作，QuickLook 只是做统一的输出？&lt;/p&gt;

&lt;p&gt;To be contiue&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>自动化脚本上传应用至 testflightapp</title>
      <link>http://icyleaf.com/2012/04/automating-script-to-testflight-from-xcode</link>
      <pubDate>Fri, 06 Apr 2012 12:34:56 +0800</pubDate>
      
      <guid>http://icyleaf.com/2012/04/automating-script-to-testflight-from-xcode</guid>
      <description>&lt;p&gt;Testflightapp 是团队开发测试中起了重要的角色，尤其是到目前为止一直是免费，最近还推出的 Live 功能不仅可以统计本身的一些数据还可以把现有的一些其他的账户的数据（比如， itunesconnect，Apple iAd，admob 等）导入进一步扩大聚合。&lt;/p&gt;

&lt;p&gt;尤其是它真的重视开发着的核心需求，仅推出了唯一的一个公开 API，就是上传打包后的 ipa 文件，配合 Xcode 中 Archive 的 Post-action 可以轻松搞定自动化的操作。&lt;/p&gt;

&lt;p&gt;下面是网上搜集的脚本，算是我发现定制化比较强的&lt;a href=&#34;https://gist.github.com/1379127&#34;&gt;自动化脚本&lt;/a&gt;，而且注解也写的很详细。可以在配合我的打包脚本，可以把各个发布渠道的事情一起自动化。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：Xcode 默认的 run script 是 &lt;code&gt;/bin/sh&lt;/code&gt;，而上面的脚本是
&lt;code&gt;/bin/bash&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个 Post-action 不爽的地方在于所有的 &lt;code&gt;echo&lt;/code&gt; 没有办法直接输出到 Xcode 的 output 里面，所以脚本只能把 log 保持到了 &lt;code&gt;/tmp&lt;/code&gt;
目录下面，如果发现出现问题请仔细查看 log。&lt;/p&gt;

&lt;p&gt;BTW，Post-actions 添加的脚本对于忽略了 XCode 干扰文件的版本控制来说，它没有归入到版本控制之中，脚本是被转义后放在了一个 xcscheme 的 xml 文件中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(project).xcodeproj/xcuserdata/(username).xcuserdatad/xcschemes/(name).xcscheme
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>升级 xcode 4.3.1</title>
      <link>http://icyleaf.com/2012/03/upgrade-xcode-431</link>
      <pubDate>Fri, 09 Mar 2012 12:34:56 +0800</pubDate>
      
      <guid>http://icyleaf.com/2012/03/upgrade-xcode-431</guid>
      <description>&lt;p&gt;下载 XCode 目前有两种途径：&lt;/p&gt;

&lt;p&gt;​1. &lt;a href=&#34;http://itunes.apple.com/us/app/xcode/id497799835?mt=12&#34;&gt;Mac App Store&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​2. &lt;a href=&#34;https://developer.apple.com/downloads/index.action&#34;&gt;Apple Developer Download Page&lt;/a&gt;
(需要有开发者账号并登陆）&lt;/p&gt;

&lt;p&gt;对于前者好处在于免费下载但下载时间或许非常漫长；但后者如果条件都满足的话（apple developer id + &lt;a href=&#34;http://t.cn/zOcn4KN&#34;&gt;script&lt;/a&gt; + vps + axel）那就可以非常快速的下载到页面上面的所有资源。&lt;/p&gt;

&lt;p&gt;XCode 4.3 之后的版本采用核心和模块分离，现在主程序只有 1.8G 左右，其余的包括 Command line tools + dashcode + graphics tools（同样可以使用上面的脚本）需要单独按需下载。但这还不是变化最大的，最大的地方在于之前版本都是存放在 &lt;code&gt;/Developer&lt;/code&gt; 路径下面，4.3 之后的版本统一改放在了 &lt;code&gt;/Applications&lt;/code&gt;下面，下载 dmg 打开后直接把 Xcode 拖入 &lt;code&gt;/Applications&lt;/code&gt; 即可。&lt;/p&gt;

&lt;p&gt;安装完毕后首次启动，会有一个提示，这点需要非常注意，新版的会要求你把 &lt;code&gt;/Developer&lt;/code&gt; 以及 &lt;code&gt;/Applications/Install Xcode&lt;/code&gt; 一并移动至回收站，注意是整个目录完全移动。假如你的机器安装了其他的开发工具放置在了&lt;code&gt;/Developer&lt;/code&gt; 了，这里就需要谨慎处理。&lt;/p&gt;

&lt;p&gt;初次之外，我参考 &lt;a href=&#34;http://useyourloaf.com/blog/2012/2/17/updating-to-xcode-43.html&#34;&gt;Use Your Loaf&lt;/a&gt;的博文，假如你的环境还需要依赖 Command line tools for xcode，除了下载和安装的过程，还需要在终端作下处理。比如上面提到博文所说的 &lt;code&gt;agvtools&lt;/code&gt; 管理 App 版本自动化的工具。在升级 4.3+ 版本可能就会出现下面的错误&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ agvtools
Error: No developer directory found at /Developer.
Run /usr/bin/xcode-select to update the developer directory path.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use Your Loaf 博文提到需要使用 &lt;code&gt;xcode-select&lt;/code&gt; 重新选择 Xcode 的安装路径，来保证终端工具可以正常运行，但是在 4.3.1 中我尝试还是失败。提示如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /usr/bin/xcode-select -switch /Applications/Xcode.app
$ agvtool
Error: Can&#39;t run /Applications/Xcode.app/usr/bin/agvtool (no such file).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经常检查发现，实际上 Command line tools 安装后存放在 &lt;code&gt;/Applications/Xcode.app/Contents/Developer/usr&lt;/code&gt; 路径下面，尝试更正操作:&lt;/p&gt;

&lt;p&gt;```
$ sudo /usr/bin/xcode-select -switch /Applications/Xcode.app/Contents/Developer/&lt;/p&gt;

&lt;p&gt;搞定！&lt;/p&gt;

&lt;p&gt;&amp;mdash;&amp;mdash;&amp;mdash;华丽丽的分割线&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instruments 哪里去了？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;哼哼，尝试在 Xcode 图标右键 &amp;ldquo;Open Developer Tool&amp;rdquo;，看到了吧，还有一些其他的工具 :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>