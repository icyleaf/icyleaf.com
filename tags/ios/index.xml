<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on icyleaf</title>
    <link>https://icyleaf.com/tags/ios/index.xml</link>
    <description>Recent content in Ios on icyleaf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>All rights reserved - 2019</copyright>
    <atom:link href="https://icyleaf.com/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cocoapods 新增 CDN 支持的源码解读</title>
      <link>https://icyleaf.com/2019/11/cocoapods-cdn-source-code-reading</link>
      <pubDate>Fri, 15 Nov 2019 19:10:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2019/11/cocoapods-cdn-source-code-reading</guid>
      <description>

&lt;p&gt;Cocoapods &lt;a href=&#34;https://blog.cocoapods.org/CocoaPods-1.7.2/&#34;&gt;1.7.2&lt;/a&gt; 版本开始增加 CDN 支持但默认没有启用，&lt;a href=&#34;http://blog.cocoapods.org/CocoaPods-1.8.0-beta/&#34;&gt;1.8&lt;/a&gt; 版本的发布舍弃了原始完整克隆的 Specs 仓库改用 CDN 服务。CDN 利用的是免费且强大的 &lt;a href=&#34;https://www.jsdelivr.com/&#34;&gt;jsDelivr&lt;/a&gt; CDN 服务，该 CDN 网络在国内是有备案因此速度和稳定性都会有很好的保证。该提案其实在去年已经有人使用 Cocoapods Plugin 的方式实现并向社区&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/issues/8268&#34;&gt;贡献 PR&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;那么 CDN 支持相比之前的机制有啥优势呢？难道是把 Pods 的仓库和源码都托管到 CDN 网络了吗，其实并不是的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;友情提醒：本文只重点分析 Pods 下载的机制，不展开其他方面，以下只是 &lt;code&gt;pod install&lt;/code&gt; 执行顺序中的一部分，如果你想了解 Cocoapods 都干了什么可以前往&lt;a href=&#34;https://www.jianshu.com/p/84936d9344ff&#34;&gt;这篇文章&lt;/a&gt;查阅。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;老的机制&#34;&gt;老的机制&lt;/h3&gt;

&lt;p&gt;第一步先检查本地 &lt;code&gt;~/.cocoapods/repo/master&lt;/code&gt; 目录是否存在，没有直接克隆 &lt;code&gt;https://github.com/Cocoapods/Specs.git&lt;/code&gt; 仓库，这步在国内来说特别费时间正常下载下来目录应该是 2G+，如果有其他 source 源（比如私有源）会重复刚才的操作。&lt;/p&gt;

&lt;p&gt;第二步安装 Podfile 每个 Pod 去在各个源中寻找对应的版本，从版本的 .podspec 文件解析获取组件的地址，这个可能是 http、git、svn、hg 中的&lt;a href=&#34;https://guides.cocoapods.org/syntax/podspec.html#source&#34;&gt;任意一个&lt;/a&gt;，获取到之后开始下载（默认是在 &lt;code&gt;~/Library/Caches/CocoaPods&lt;/code&gt; 做缓存目录）&lt;/p&gt;

&lt;h3 id=&#34;新的机制&#34;&gt;新的机制&lt;/h3&gt;

&lt;p&gt;第一步分析 Podfile 里面的 source ，如果没有走默认 Cocoapods 的配置（1.8 以上是 &lt;a href=&#34;https://cdn.cocoapods.org&#34;&gt;https://cdn.cocoapods.org&lt;/a&gt; ，之前的还是 Cocoapods/Spec），
如果本地不存在官方 cdn 的 repo 名字是 trunk 的保留字，自己无法创建。如果有自定义的 source 会追加上去 sources 列表。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ http HEAD https://cdn.cocoapods.org/all_pods.txt
HTTP/1.1 200 OK
Accept-Ranges: bytes
Age: 0
Cache-Control: public, max-age=0, must-revalidate
Connection: keep-alive
Content-Length: 924280
Content-Type: text/plain; charset=UTF-8
Date: Sat, 09 Nov 2019 07:06:15 GMT
Etag: &amp;quot;acf0d284f3a8e82e0d66ba1a91cd30b9-ssl&amp;quot;
Server: Netlify
Strict-Transport-Security: max-age=31536000
X-NF-Request-ID: 50b466cd-ce9e-4326-b5bb-0d29a193ae4b-7809449
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二步检查或下载每个 source，每个 source 会检查是否是 cdn 类型（使用 HEAD 请求检查是否包含 /all_pods.txt）文件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cdn 类型，下面详细解释&lt;/li&gt;
&lt;li&gt;其他类型，走原来的老的逻辑，不再赘述&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第三步，下载 &lt;code&gt;Cocoapods-version.yml&lt;/code&gt; 并缓存 etag，下载 &lt;code&gt;/Cocoapods-version.yml&lt;/code&gt; 并取 headers 的第一个 etag 的值存为 &lt;code&gt;/Cocoapods-version.yml.etag&lt;/code&gt;，如果存在 etag 会比对一样就不需要下载， 链接支持根目录和其他目录，支持 301 跳转。&lt;/p&gt;

&lt;p&gt;Cocoapods-version.yml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
min: 1.0.0
last: 1.8.4
prefix_lengths:
- 1
- 1
- 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第四步，分析 Pod 并获取 pod 的版本信息，比如 Podfile 我增加了一个 &lt;code&gt;pod &amp;quot;AFNetworking&amp;quot;&lt;/code&gt;，把 pod 名字做 MD5 后的值取 Cocoapods-version.yml 的 prefiex_length 数组长度的值单字母拆分用下划线分割按照规则拼成文件名 &lt;code&gt;all_pods_versions(_{fragment}).txt&lt;/code&gt; (如果prefix_length 为 0 则只会去下载 &lt;code&gt;/all_pods_versions.txt&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;比如：prefix_lengths 数组大小为 3，AFNetworking MD5 后 &lt;code&gt;a75d452377f396bdc4b623a5df25820&lt;/code&gt; 则匹配前三位 a75 拆分后 a_7_5
后查找 cdn url 路径的 &lt;code&gt;/all_pods_versions_a_7_5.txt&lt;/code&gt; 下载下来后的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fuse/0.1.0/0.2.0/1.0.0/1.1.0/1.2.0
GXFlowView/1.0.0
JFCountryPicker/0.0.1/0.0.2
JVEmptyElement/0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第五步，下载 pod 的所有版本的 .podspec 文件，从上面的文件按照每行寻找第一段的名字，把后面的所有版本按照上面获取到的 prefix_lengths 的值（例如 AFNetworking 是 a, 7 , 5） &lt;code&gt;/Specs/a/7/5/AFNetworking/{version}/AFNetworking.podspec.json&lt;/code&gt; 一次下载，并保存 etag 为 &lt;code&gt;/Specs/a/7/5/AFNetworking/{version}/AFNetworking.podspec.json.etag&lt;/code&gt;，这个 etag 作用上面已经讲过，如果没有找到的话就会直接报错。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Adding spec repo `trunk` with CDN `https://cdn.cocoapods.org/`
  CDN: trunk Relative path downloaded: CocoaPods-version.yml, save ETag: &amp;quot;031c25b97a0aca21900087e355dcf663-ssl&amp;quot;
  CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local because checking is only perfomed in repo update
  CDN: trunk Relative path downloaded: all_pods_versions_a_7_5.txt, save ETag: &amp;quot;5b32718ecbe82b0ae71ab3c77120213f-ssl&amp;quot;
  CDN: trunk Redirecting from https://cdn.cocoapods.org/Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json to https://raw.githubusercontent.com/CocoaPods/Specs/master/Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json
  CDN: trunk Relative path downloaded: Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json, save ETag: W/&amp;quot;a5f00eb1fdfdcab00b89e96bb81d48c110f09220063fdcf0b269290bffc18cf5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cocoapods trunk 源的目录结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.cocoapods
  repo
    trunk
      .url   #=&amp;gt; https://cdn.cocoapods.org/
      Cocoapods-version.yml  # =&amp;gt; 从 https://cdn.cocoapods.org/CocoaPods-version.yml 下载的文件
      Cocoapods-version.yml.etag  # 上一个请求的第一个 etag 值存下来
      all_pods_versions_a_7_5.txt  # 参考上面的备注
      all_pods_versions_a_7_5.txt.etag # 上一个请求的第一个 etag 值存下来
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第六步和老的机制第二步一样同样最终还是会寻找 podspec 里面下载地址去下载，
也就是说&lt;strong&gt;真正 CDN 缓存加速的只有原有 Specs 必要的 podspec 文件，而不会加速 Pod 真正源地址&lt;/strong&gt;，改机制只是减轻了本地更新官方 Specs 源的麻烦以及维护一个巨大的本地文件存储，这也是中心化机制的一个心结。&lt;/p&gt;

&lt;h3 id=&#34;结语&#34;&gt;结语&lt;/h3&gt;

&lt;p&gt;这个机制大大减少了本地需要占一个较大存储的问题，尤其是初次 &lt;code&gt;pod install&lt;/code&gt; 时间长的情况，但 Pod 库本身还是各自的
地址本质上无法解决安装 Pod 消耗时间过长的问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>你虐我千百遍，我待你如初恋，直到我遇到 match</title>
      <link>https://icyleaf.com/2017/03/fastlane-match-in-action</link>
      <pubDate>Tue, 28 Mar 2017 20:12:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2017/03/fastlane-match-in-action</guid>
      <description>

&lt;h2 id=&#34;系列目录&#34;&gt;系列目录&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/&#34;&gt;Fastlane - iOS 和 Android 的自动化构建工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://icyleaf.com/2016/07/fastlane-in-action/&#34;&gt;深入浅出 Fastlane 一看你就懂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2017/03/fastlane-match-in-action/&#34;&gt;你虐我千百遍，我待你如初恋，直到我遇到 match&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;通过前两篇的文章大家已经对 fastlane 的概念和基本使用已经有了初步的掌握，在第二篇中也有提到 fastlane 实现的各种功能其实都是基于独立封装设计的各个工具实现。它们即可以单独成为一个体系同时也会被吸纳到 fastlane 的 action 系统之中。&lt;code&gt;match&lt;/code&gt; 是在 iOS 开发和持续测试和构建中最重中之重的环节，它维护和管理着 iOS 的各种证书和 profile 的创建、更新工作。想必很多用户听到 iOS 证书和 profile 都会头大脑涨，恨不得要手撕鬼子的技能点来对付他们（如图）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://codesigning.guide/assets/img/cs-the-problem.png&#34; alt=&#34;code-signing-problem&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图来源于作者专门整理的网站 &lt;a href=&#34;https://codesigning.guide/，对于&#34;&gt;https://codesigning.guide/，对于&lt;/a&gt; iOS App 签名原理感兴趣的可以参见 JSPatch 作者的分析：&lt;a href=&#34;http://blog.cnbang.net/tech/3386/&#34;&gt;http://blog.cnbang.net/tech/3386/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;功能特性&#34;&gt;功能特性&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;主动/被动创建、更新、Xcode 所需的各种证书和打包所需的 Profiles&lt;/li&gt;
&lt;li&gt;托管 Xcode 所需的各种证书和打包所需的 Profiles&lt;/li&gt;
&lt;li&gt;统一并共享团队成员统一使用&lt;/li&gt;
&lt;li&gt;证书具有密码加密保护（openssl）&lt;/li&gt;
&lt;li&gt;支持多团队（账户）&lt;/li&gt;
&lt;li&gt;支持单 App 多 Target(identifier)&lt;/li&gt;
&lt;li&gt;内测支持企业账户（v0.11.0 还在测试可用，并没有正式支持）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;

&lt;p&gt;match 其实是在 fastlane 基础包 cert、sign、spaceship、credentials_manager 之上把 iOS 开发者证书流程化的工具。为了实现团队内共享项目的开发者证书，它使用 git 仓库对证书进行托管，首先需要进行初始化，配置 git 仓库、项目的 iDP 信息之后，下载 Development、AppStore、AdHoc 的开发者证书和项目的 Profile files，并通过 openssl 的方式进行安全加密后提交并推送到 git 仓库，其他成员（或自动化构建系统）使用时需要输入密钥后才能把证书解密并导入到 keychain 和 Profiles 目录。&lt;/p&gt;

&lt;p&gt;如果对于证书加密策略感兴趣的可以在本文底部资料参考的第一个链接查看详情。&lt;/p&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最新 fastlane 已经包含了所有的子模块，独立的 match 不在更新，请直接安装 fastlane，使用 fastlane match 代替 match 命令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安装就很简单通过 &lt;code&gt;gem install fastlane&lt;/code&gt; 会把它的全家桶一并下载安装，首先可以看下帮助：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane match --help

  match

  Easily sync your certificates and profiles across your team using git

  Commands:
    adhoc             Run match for a adhoc provisioning profile
    appstore          Run match for a appstore provisioning profile
    change_password   Re-encrypt all files with a different password
    decrypt           Decrypts the repository and keeps it on the filesystem
    development       Run match for a development provisioning profile
    help              Display global or [command] help documentation
    init              Create the Matchfile for you
    nuke              Delete all certificates and provisioning profiles from the Apple Dev Portal
    nuke development  Delete all certificates and provisioning profiles from the Apple Dev Portal of the type development
    nuke distribution Delete all certificates and provisioning profiles from the Apple Dev Portal of the type distribution
    run               Easily sync your certificates and profiles across your team using git

  Global Options:
    --verbose
    -r, --git_url STRING URL to the git repo containing all the certificates (MATCH_GIT_URL)
    --git_branch STRING  Specific git branch to use (MATCH_GIT_BRANCH)
    -y, --type STRING    Create a development certificate instead of a distribution one (MATCH_TYPE)
    -a, --app_identifier [VALUE] The bundle identifier(s) of your app (comma-separated) (MATCH_APP_IDENTIFIER)
    -u, --username STRING Your Apple ID Username (MATCH_USERNAME)
    -s, --keychain_name STRING Keychain the items should be imported to (MATCH_KEYCHAIN_NAME)
    -p, --keychain_password STRING This might be required the first time you access certificates on a new mac. For the login/default keychain this is your account password (MATCH_KEYCHAIN_PASSWORD)
    --readonly [VALUE]   Only fetch existing certificates and profiles, don&#39;t generate new ones (MATCH_READONLY)
    -b, --team_id STRING The ID of your Developer Portal team if you&#39;re in multiple teams (FASTLANE_TEAM_ID)
    -l, --team_name STRING The name of your Developer Portal team if you&#39;re in multiple teams (FASTLANE_TEAM_NAME)
    --verbose [VALUE]    Print out extra information and all commands (MATCH_VERBOSE)
    --force [VALUE]      Renew the provisioning profiles every time you run match (MATCH_FORCE)
    --skip_confirmation [VALUE] Disables confirmation prompts during nuke, answering them with yes (MATCH_SKIP_CONFIRMATION)
    --shallow_clone [VALUE] Make a shallow clone of the repository (truncate the history to 1 revision) (MATCH_SHALLOW_CLONE)
    --force_for_new_devices [VALUE] Renew the provisioning profiles if the device count on the developer portal has changed (MATCH_FORCE_FOR_NEW_DEVICES)
    --skip_docs [VALUE]  Skip generation of a README.md for the created git repository (MATCH_SKIP_DOCS)
    -h, --help           Display help documentation
    -v, --version        Display version information
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议大家在项目中创建并配置 &lt;code&gt;fastlane/Matchfile&lt;/code&gt; 文件可以把命令需要的参数省略：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane match init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置好 git_url(git 仓库地址）、type（默认同步证书类型）、app_identifier、username（iDP 的账户名）即可。&lt;/p&gt;

&lt;h2 id=&#34;生成和同步证书&#34;&gt;生成和同步证书&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 开发环境证书
$ fastlane match development
# 产品环境证书
$ fastlane match appstore
# 内测环境证书
$ fastlane match adhoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初次使用的时候会提示需要输入 iDP 的账户密码，校验成功后可以保存到 keychain 中后续可以不在重复输入（好贴心）密码（也可通过设置变量 FASTLANE_PASSWORD），该密码就是上面提到的证书加密的密钥，请妥善保存。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提示：如果担心密码泄露可设置 FASTLANE_DONT_STORE_PASSWORD = true 不进行密码保存至 keychain，在 keychain 可通过关键词 &amp;ldquo;deliver.&amp;rdquo; 检索。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有的童鞋说我们有 299 的企业证书，为什么不做支持呢？起初作者并没有打算进行支持是担心滥用以及代码结构需要较大的变更，随着开发者呼声太高，其实还是做了支持，只不过并没有正式的纳入，需要通过配置环境变量支持：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 企业环境证书
$ ENV[&#39;MATCH_FORCE_ENTERPRISE&#39;] = &#39;1&#39; &amp;amp;&amp;amp; fastlane match enterprise
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;修改密钥&#34;&gt;修改密钥&lt;/h2&gt;

&lt;p&gt;建议密码定期更换或再人员发生变更之后进行密码变更：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane match change_password
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重新生成&#34;&gt;重新生成&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;慎用&lt;/strong&gt;：match 提供一个命令允许把当前的证书撤销后并全新的重新生成一份，这个事项是会把证书和 Profiles 全部包含在内，如果单纯的想只重设 Profles 并同步是不支持的。我想这也是为什么该命名叫做 &lt;code&gt;nuke&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我这里可给大家提供一种只同步 profile 的方法：首先在 git 仓库中找到你要重设的 profile 文件，并把它从仓库中删除提交，然后在执行该类型的命令即可，命令发现没有 profile 会自动再生成一个 profile 并下载同步至 git 仓库。&lt;/p&gt;

&lt;h2 id=&#34;资料参考&#34;&gt;资料参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://macoscope.com/blog/simplify-your-life-with-fastlane-match/&#34;&gt;http://macoscope.com/blog/simplify-your-life-with-fastlane-match/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fastlane/fastlane/issues/2007&#34;&gt;https://github.com/fastlane/fastlane/issues/2007&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>深入浅出 Fastlane 一看你就懂</title>
      <link>https://icyleaf.com/2016/07/fastlane-in-action</link>
      <pubDate>Tue, 19 Jul 2016 20:12:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2016/07/fastlane-in-action</guid>
      <description>

&lt;p&gt;这是《 &lt;a href=&#34;https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/&#34;&gt;Fastlane - iOS 和 Android 的自动化构建工具&lt;/a&gt;》系列的第二篇。&lt;/p&gt;

&lt;p&gt;本篇我想着重介绍 &lt;code&gt;fastlane&lt;/code&gt; 本身的基本使用，这里使用 fastlane v1.98.0 作为演示版本。&lt;/p&gt;

&lt;h3 id=&#34;系列索引&#34;&gt;系列索引&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/&#34;&gt;Fastlane - iOS 和 Android 的自动化构建工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2016/07/fastlane-in-action/&#34;&gt;深入浅出 Fastlane 一看你就懂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2017/03/fastlane-match-in-action/&#34;&gt;你虐我千百遍，我待你如初恋，直到我遇到 match&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;命令行工具&#34;&gt;命令行工具&lt;/h2&gt;

&lt;p&gt;安装之后默认会安装一个命令行工具 &lt;code&gt;fastlane&lt;/code&gt;，利用它可以初始化、执行任务、查看任务定义、查看可用的动作和动作的详细定义，甚至可以用它来创建自定义的动作、插件以及一些辅助功能。想了解的话可以先看看它的帮助：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane --help

  fastlane

  CLI for &#39;fastlane&#39; - The easiest way to automate building and releasing your iOS and Android apps

        Run using `fastlane [platform] [lane_name]`
        To pass values to the lanes use `fastlane [platform] [lane_name] key:value key2:value2`

  Commands:
    action                  Shows more information for a specific command
    actions                 Lists all available fastlane actions
    add_plugin              Add a new plugin to your fastlane setup
    disable_crash_reporting Deprecated: fastlane doesn&#39;t use a crash reporter any more
    docs                    Generate a markdown based documentation based on the Fastfile
    enable_auto_complete    Enable tab auto completion
    enable_crash_reporting  Deprecated: fastlane doesn&#39;t use a crash reporter any more
    help                    Display global or [command] help documentation
    init                    Helps you with your initial fastlane setup
    install_plugins         Install all plugins for this project
    lanes                   Lists all available lanes and shows their description
    list                    Lists all available lanes without description
    new_action              Create a new custom action for fastlane.
    new_plugin              Create a new plugin that can be used with fastlane
    run                     Run a fastlane one-off action without a full lane
    search_plugins          Search for plugins, search query is optional
    trigger                 Run a sepcific lane. Pass the lane name and optionally the platform first.
    update_plugins          Update all plugin dependencies

  Global Options:
    --verbose
    -h, --help           Display help documentation
    -v, --version        Display version information

  Author:
    Felix Krause &amp;lt;fastlane@krausefx.com&amp;gt;

  Website:
    https://fastlane.tools

  GitHub:
    https://github.com/fastlane/fastlane
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我会随着下面每个概念的解释和展开来配合上面的命令一起讲解。&lt;/p&gt;

&lt;h2 id=&#34;生命周期&#34;&gt;生命周期&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;执行顺序&lt;/th&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;before_all&lt;/td&gt;
&lt;td&gt;在执行 lane 之前只执行一次&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;before_each&lt;/td&gt;
&lt;td&gt;每次执行 lane 之前都会执行一次&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;lane&lt;/td&gt;
&lt;td&gt;自定义的任务&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;after_each&lt;/td&gt;
&lt;td&gt;每次执行 lane 之后都会执行一次&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;after_all&lt;/td&gt;
&lt;td&gt;在执行 lane 成功结束之后执行一次&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;在执行上述情况任意环境报错都会中止并执行一次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以上的部分大家在上一篇已经见识过了，有些还没接触到，不用着急都会一一说明。&lt;/p&gt;

&lt;h2 id=&#34;任务-lane&#34;&gt;任务（lane）&lt;/h2&gt;

&lt;p&gt;正常情况下你可能只会是用到一种任务方法 &lt;code&gt;lane&lt;/code&gt; 但其实它会包含很多中高级用法。在文章的末尾会详细描述。&lt;/p&gt;

&lt;h3 id=&#34;任务定义&#34;&gt;任务定义&lt;/h3&gt;

&lt;p&gt;定义任务的方法类似于 rake 的 task，但使用上缺比前者要好用很多，见下表：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;desc&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;方法描述&lt;/td&gt;
&lt;td&gt;可多次使用打到换行的目的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;方法名&lt;/td&gt;
&lt;td&gt;符号化的方法名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;options&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;方法参数&lt;/td&gt;
&lt;td&gt;返回 Hash 类型&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;task&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;方法主体&lt;/td&gt;
&lt;td&gt;参考 ruby 的方法代码且支持 ruby 代码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &#39;定义一个 build 方法&#39;
desc &#39;参数 adhoc 判断是否为内测版本, 默认为 false&#39;
desc &#39;fastlane build&#39;
desc &#39;fastlane build adhoc:true&#39;
lane :build do |options|
  # task to do something
  adhoc = options[:adhoc] || false
  puts &amp;quot;adhoc: #{adhoc}&amp;quot;

  gym(type: adhoc ? &#39;adhoc&#39; : &#39;appstore&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;任务执行&#34;&gt;任务执行&lt;/h3&gt;

&lt;p&gt;一般情况下它需要配合定义好的 lane 才能使用，刚刚我们定义的一个 build 方法，我们这里就试着执行一下吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 默认执行
$ fastlane build
# 传递参数
$ fastlane build adhoc:true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;任务互调&#34;&gt;任务互调&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;lane&lt;/code&gt; 其实可以理解为 &lt;code&gt;def&lt;/code&gt; 的别名，因此多个 lane 的话实际上是可以相互调用的，这个其实特别实用，这样其实我就可以把 cocoapods 的执行放到单独的 lane 里面而不是 &lt;code&gt;before_all&lt;/code&gt;，这样执行非构建的任务就不会执行不相关的任务或动作，因此 fastlane 而产生了一个私有任务用内部使用 &lt;code&gt;private_lane&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
default_platform :ios

platform :ios do
  desc &#39;构建前的准备工作&#39;
  desc &#39;这是一个私有任务，仅供 Fastfile 内部 lane 调用使用&#39;
  lane :prepare do
    cocoapods
    match
  end

  desc &#39;通用的构建任务&#39;
  desc &#39;fastlane build&#39;
  desc &#39;fastlane build type:adhoc&#39;
  lane :build do |options|
    # 调用上面 prepare 私有任务
    prepare

    case options[:type]
    when &#39;adhoc&#39;
      # 调用 下面 adhoc 任务
      adhoc
    else
      # 调用下面 appstore 任务
      appstore
    end
  end

  desc &#39;构建 adhoc 任务&#39;
  desc &#39;fastlane adhoc&#39;
  lane :adhoc do
    gym(type: &#39;adhoc&#39;)
  end

  desc &#39;构建 appstore 任务&#39;
  desc &#39;fastlane appstore&#39;
  lane :appstore do
    gym(type: &#39;appstore&#39;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的任务中，&lt;code&gt;build&lt;/code&gt;/&lt;code&gt;adhoc&lt;/code&gt;/&lt;code&gt;appstore&lt;/code&gt; 都可以执行，只有 &lt;code&gt;prepare&lt;/code&gt; 是无法通过命令行外部执行，如果执行会直接报错：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane prepare
[19:17:42]: You can&#39;t call the private lane &#39;prepare&#39; directly
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;任务返回值&#34;&gt;任务返回值&lt;/h3&gt;

&lt;p&gt;和 ruby 的方法一致，每个 lane 最后一行会默认作为返回值（无需 &lt;a href=&#34;http://learnrubythehardway.org/book/ex21.html&#34;&gt;return&lt;/a&gt;）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
lane :sum do |options|
  options[:a] + optiona[:b]
end

lane :calculate do
  value = sum(a: 3, b: 5)
  puts value #=&amp;gt; 8
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;引入外部任务文件&#34;&gt;引入外部任务文件&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Fastfile&lt;/code&gt; 除了自身以外还能够引入外部其他的 &lt;code&gt;Fastfile&lt;/code&gt; 并调用任务，只需要导入外部文件并使用特殊的方法标识即可：&lt;/p&gt;

&lt;h4 id=&#34;1-import-导入本地文件&#34;&gt;1. import - 导入本地文件&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# 导入 lanes 目录的 AndroidFastfile
import &amp;quot;lanes/AndroidFastfile&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-import-from-git-导入-git-仓库文件&#34;&gt;2. import_from_git - 导入 git 仓库文件&lt;/h4&gt;

&lt;p&gt;可以直接引入 git 仓库的 Fastfile 文件是一个非常赞的功能，通过使用发现其实现原理是先把 git 仓库克隆下来后在引入相对于的文件，因此建议国内在没有网络加速（翻墙）的情况下尽量不用引入比较大的 git 仓库，否则使用会需要漫长的等待&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# 导入 mozilla/firefox-ios 项目下 fastlane 下面 Fastfile 文件
import_from_git(url: &#39;https://github.com/mozilla/firefox-ios&#39;)
# 或者
import_from_git(url: &#39;git@github.com:mozilla/firefox-ios.git&#39;,
               path: &#39;fastlane/Fastfile&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假若外部引入的 &lt;code&gt;Fastfile&lt;/code&gt; 有个方法是 &lt;strong&gt;build&lt;/strong&gt;，在命令行工具直接执行即可，如果外部和内部都有相同的任务名，执行会直接报错：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane ios build

[!] Lane &#39;gradle&#39; was defined multiple times!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果发生这样的事情且你希望在主体 &lt;code&gt;Fastfile&lt;/code&gt; 也调用的话需要使用特殊的方法定义：&lt;code&gt;override_lane&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：此方法只会覆盖外部的相同方法名的代码执行，目前暂时无法使用类似 ruby 的 &lt;code&gt;super&lt;/code&gt; 继承原由方法！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;override_lane :build do
  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;任务查看&#34;&gt;任务查看&lt;/h3&gt;

&lt;p&gt;只需执行下面这行命令就可以看到非私有任务的可用列表信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane lanes

--------- ios---------
----- fastlane ios build
通用的构建任务
fastlane build
fastlane build type:adhoc

----- fastlane ios adhoc
构建 adhoc 任务

----- fastlane ios appstore
构建 appstore 任务

Execute using `fastlane [lane_name]`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;扩展-action&#34;&gt;扩展（Action）&lt;/h2&gt;

&lt;p&gt;扩展是 fastlane 的杀手锏，重在集成了众多非常优秀好用的方法供 lane 内部使用，截至 fastlane v&lt;code&gt;1.98.0&lt;/code&gt; 版本以包含 175 个扩展，这个数量还在陆续增加中。扩展初期是由发起人一个人完成，后续的大部分都是社区共享，如果你发现没有你想要的扩展，可以先去 &lt;a href=&#34;https://github.com/fastlane/fastlane/issues?q=is%3Aopen+is%3Aissue+label%3Aaction&#34;&gt;issues&lt;/a&gt; 搜索下没有要么自己动手提交要么只有等待了.&lt;/p&gt;

&lt;h3 id=&#34;扩展列表&#34;&gt;扩展列表&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane actions
+--------------------+-------------------------------------------------------------+------------------+
|                                   Available fastlane actions                                        |
+--------------------+-------------------------------------------------------------+------------------+
| Action             | Description                                                 | Author           |
+--------------------+-------------------------------------------------------------+------------------+
| adb                | Run ADB Actions                                             | hjanuschka       |
| adb_devices        | Get an Array of Connected android device serials            | hjanuschka       |
| add_git_tag        | This will add an annotated git tag to the current branch    | Multiple         |
...
+--------------------+-------------------------------------------------------------+------------------+
  Total of 175 actions

Get more information for one specific action using `fastlane action [name]`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;扩展使用帮助&#34;&gt;扩展使用帮助&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 查看 adb 扩展的使用帮助
$ fastlane action adb
Loading documentation for adb:

+---------------------------------+
|               adb               |
+---------------------------------+
| Run ADB Actions                 |
|                                 |
| see adb --help for more details |
|                                 |
| Created by hjanuschka           |
+---------------------------------+

+----------+----------------------------------------------------------------------+-------------------+---------+
|                                                  adb Options                                                  |
+----------+----------------------------------------------------------------------+-------------------+---------+
| Key      | Description                                                          | Env Var           | Default |
+----------+----------------------------------------------------------------------+-------------------+---------+
| serial   | Android serial, which device should be used for this command         | FL_ANDROID_SERIAL |         |
| command  | All commands you want to pass to the adb command, e.g. `kill-server` | FL_ADB_COMMAND    |         |
| adb_path | The path to your `adb` binary                                        | FL_ADB_PATH       | adb     |
+----------+----------------------------------------------------------------------+-------------------+---------+

+-------------------------------+
|       adb Return Value        |
+-------------------------------+
| The output of the adb command |
+-------------------------------+

More information can be found on https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;创建自定义扩展&#34;&gt;创建自定义扩展&lt;/h3&gt;

&lt;p&gt;通过内置的命令创建你需要的扩展，扩展名必须是全部小写且只能使用下划线分割词组，生成好的扩展文件会在 &lt;code&gt;fastlane/actions&lt;/code&gt; 目录找到:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane new_action
Must be lower case, and use a &#39;_&#39; between words. Do not use &#39;.&#39;
examples: &#39;testflight&#39;, &#39;upload_to_s3&#39;
Name of your action: hello
[15:33:15]: Created new action file &#39;./fastlane/actions/hello.rb&#39;. Edit it to implement your custom action.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这块会占比较大的篇幅，尽情期待后续的展开。&lt;/p&gt;

&lt;h3 id=&#34;引入外部扩展&#34;&gt;引入外部扩展&lt;/h3&gt;

&lt;p&gt;这块其实也有两种方法可以引入，文件引入是官方教程提供的方法，第二种是我个人尝试出来的，第三种是最近版本才官方支持的。&lt;/p&gt;

&lt;h4 id=&#34;1-本地文件引入&#34;&gt;1. 本地文件引入&lt;/h4&gt;

&lt;p&gt;自定义的扩展其实也算是本地文件引入的一种形式，当然位于其他路径的通过指定方法也能做到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# 引入项目根目录 script/share_actions 路径
actions_path &#39;../script/share_actions&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-rubygem-引入&#34;&gt;2. rubygem 引入&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;不再建议使用本方法，请看第三种插件引入。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我在团队内部创建了一个自定义的扩展，仅限于团队内部使用而无法贡献社区，我只能采取封装成 ruby gem 包，通过 ruby 的 &lt;code&gt;require&lt;/code&gt; 方式引入，最终可以完美支持，目前已在项目中使用大半年之久。最重要的是我是开源的：&lt;a href=&#34;https://github.com/icyleaf/fastlane-qyer&#34;&gt;fastlane-qyer&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# 首先安装需要的 rubygem: gem install fastlane-qyer
require &#39;fastlane-qyer&#39;

lane :upload do
  qyer(api_key: &#39;[token]&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，使用 rubygem 引入的无法在 fastlane actions 中显示出来，也无法使用 fastlane action [name] 查看使用帮助。我猜想一是官方没有这样提供思路，二是就算你引入了 gem 也不是特别好判断里面的文件结构。&lt;/p&gt;

&lt;h4 id=&#34;3-插件引入&#34;&gt;3. 插件引入&lt;/h4&gt;

&lt;p&gt;我注意到 &lt;a href=&#34;https://github.com/fastlane/fastlane/releases/tag/1.93.0&#34;&gt;1.93.0&lt;/a&gt; 增加了插件机制，很好的解决第二种出现的一些问题。大概看了一下主要是采用 &lt;code&gt;Gemfile&lt;/code&gt; 的方式使用 &lt;code&gt;Pluginfile&lt;/code&gt; 维护了引入第三方插件列表。实现原理还是属于第二种方法。&lt;/p&gt;

&lt;p&gt;通过 &lt;code&gt;fastlane search_plugins&lt;/code&gt; 查看当前支持的插件，并使用 &lt;code&gt;fastlane add_plugins [name]&lt;/code&gt; 引入。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane search_plugins
[16:04:33]: Listing all available fastlane plugins

+--------------------------+---------------------------------------------------+-----------+
|                                Available fastlane plugins                                |
+--------------------------+---------------------------------------------------+-----------+
| Name                     | Description                                       | Downloads |
+--------------------------+---------------------------------------------------+-----------+
| ruby                     | Useful fastlane actions for Ruby projects         | 782       |
| versioning               | Allows to work set/get app version directly       | 758       |
|                          | to/from Info.plist                                |           |
| branding                 | Add some branding to your fastlane output         | 716       |
| instrumented_tests       | New action to run instrumented tests for android. | 590       |
|                          | This basically creates and boots an emulator      |           |
|                          | before running an gradle commands so that you can |           |
|                          | run instrumented tests against that emulator.     |           |
|                          | After the gradle command is executed, the avd     |           |
|                          | gets shut down and deleted. This is really        |           |
|                          | helpful on CI services, keeping them clean and    |           |
|                          | always having a fresh avd for testing.            |           |
| xamarin_build            | Build xamarin android\ios projects                | 582       |
| appicon                  | Generate required icon sizes and iconset from a   | 509       |
|                          | master application icon.                          |           |
...
| download_file            | This action downloads a file from an HTTP/HTTPS   | 171       |
|                          | url (e.g. ZIP file) and puts it in a destination  |           |
|                          | path                                              |           |
+--------------------------+---------------------------------------------------+-----------+

# 添加 sentry 插件
$ fastlane add_plugin sentry
[16:16:23]: Plugin &#39;fastlane-plugin-sentry&#39; was added to &#39;./fastlane/Pluginfile&#39;
[16:16:23]: It looks like fastlane plugins are not yet set up for this project.
[16:16:23]: fastlane will create a new Gemfile at path &#39;Gemfile&#39;
[16:16:23]: This change is neccessary for fastlane plugins to work
Should fastlane modify the Gemfile at path &#39;Gemfile&#39; for you? (y/n)
y
[16:16:29]: Successfully modified &#39;Gemfile&#39;
[16:16:29]: Make sure to commit your Gemfile, Gemfile.lock and Pluginfile to version control
Installing plugin dependencies...
Successfully installed plugins

$ cat fastlane/Pluginfile
# Autogenerated by fastlane
#
# Ensure this file is checked in to source control!

gem &#39;fastlane-plugin-sentry&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更详细的继续期待后续报道，我要挖坑无数。&lt;/p&gt;

&lt;h3 id=&#34;扩展的命令行调用&#34;&gt;扩展的命令行调用&lt;/h3&gt;

&lt;p&gt;社区的力量果然是很强大的，陆续添加了那么多功能，早期用户表示不开心！嗯，由于社区的呼声和贡献目前可以通过命令调用扩展：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 notification 扩展发送一个通知消息
$ fastlane run notification message:&amp;quot;Hi macOS&amp;quot; title:&amp;quot;Fastlane Notification&amp;quot;
[15:58:05]: --------------------------
[15:58:05]: --- Step: notification ---
[15:58:05]: --------------------------
[15:58:05]: Result: true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;辅助功能&#34;&gt;辅助功能&lt;/h2&gt;

&lt;h3 id=&#34;自动更新&#34;&gt;自动更新&lt;/h3&gt;

&lt;p&gt;fastlane 提供一个方法 &lt;code&gt;update_fastlane&lt;/code&gt; 用于对于自身的版本检查和更新，这个第一篇文章我也有提到过。它其实一个是一个扩展，使用 &lt;code&gt;fastlane action update_fastlane&lt;/code&gt; 能够看到使用帮助。它有一个参数是可以指定检查特定的 fastlane 工具并进行更新，但其实它是使用 rubygems 进行对 gem 的更新，因此这块其实可以传入任何需要检查并更新的 gem：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;update_fastlane(tools:&#39;fastlane,gym,match,cocoapods,rest-client&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;环境变量&#34;&gt;环境变量&lt;/h3&gt;

&lt;p&gt;从 fastlane 的设计体系上在各个地方都加入了环境变量的支持，每个扩展的参数、以及扩展需要共享给其他扩展和任务读取的数据都是通过环境变量获取，如下是我收集的比较常用的列表：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境变量&lt;/th&gt;
&lt;th&gt;来源&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FASTLANE_USER&lt;/td&gt;
&lt;td&gt;credentials_manager&lt;/td&gt;
&lt;td&gt;Apple 开发者账户名&lt;/td&gt;
&lt;td&gt;验证通过后会保存 Keychain&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FASTLANE_PASSWORD&lt;/td&gt;
&lt;td&gt;credentials_manager&lt;/td&gt;
&lt;td&gt;Apple 开发者账户密码&lt;/td&gt;
&lt;td&gt;验证通过后会保存 Keychain&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FASTLANE_TEAM_ID&lt;br /&gt;CERT_TEAM_ID&lt;/td&gt;
&lt;td&gt;produce&lt;br /&gt;sigh&lt;/td&gt;
&lt;td&gt;Apple 团队 ID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DELIVER_USER&lt;br \&gt;PRODUCE_USERNAME&lt;/td&gt;
&lt;td&gt;deliver&lt;br /&gt;produce&lt;/td&gt;
&lt;td&gt;iTunesConnect 账户名&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DELIVER_PASSWORD&lt;/td&gt;
&lt;td&gt;deliver&lt;/td&gt;
&lt;td&gt;iTunesConnect 账户密码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MATCH_PASSWORD&lt;/td&gt;
&lt;td&gt;match&lt;/td&gt;
&lt;td&gt;证书加/解密密码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FASTLANE_XCODE_LIST_TIMEOUT&lt;/td&gt;
&lt;td&gt;fastlane_core&lt;/td&gt;
&lt;td&gt;获取 iOS Scheme 的超时时间&lt;/td&gt;
&lt;td&gt;默认 10s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Fastlane - iOS 和 Android 的自动化构建工具</title>
      <link>https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android</link>
      <pubDate>Mon, 11 Jul 2016 12:36:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android</guid>
      <description>

&lt;h3 id=&#34;系列索引&#34;&gt;系列索引&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/&#34;&gt;Fastlane - iOS 和 Android 的自动化构建工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2016/07/fastlane-in-action/&#34;&gt;深入浅出 Fastlane 一看你就懂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2017/03/fastlane-match-in-action/&#34;&gt;你虐我千百遍，我待你如初恋，直到我遇到 match&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;这篇文章整理了很久，发现在一篇文章里无法一一讲述和全面的覆盖，初步打算是把这个做成一个系列，想到哪里就写到哪里，如果恰好有读者爱戴并有一些建议反馈，我也会根据大家的需要调整内容的方向和深度。论美剧的编剧的重要性(笑)。&lt;/p&gt;

&lt;h2 id=&#34;初次邂逅&#34;&gt;初次邂逅&lt;/h2&gt;

&lt;p&gt;初时 fastlane 的时候是去年的 11 月份，看到大就感觉遇到了神器一般的惊喜。它一个针对于 iOS 和 Android（后来才支持的）全方位自动化流程的工具，请看下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://fastlane.tools/assets/img/intro-fastlane-tree.png&#34; alt=&#34;fastlane-flow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;流程图中每个环节都是独立的工具，每个工具只干一件事情，分工非常的明确。以下是我在团队项目中用到的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/scan&#34;&gt;scan&lt;/a&gt; 自动化测试工具，很好的封装了 Unit Test&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/sigh&#34;&gt;sigh&lt;/a&gt; 针对于 iOS 项目开发证书和 Provision file 的下载工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/match&#34;&gt;match&lt;/a&gt; 同步团队每个人的证书和 Provision file 的超赞工具，规范&lt;a href=&#34;https://codesigning.guide/&#34;&gt;代码签名&lt;/a&gt;（虽然里面有些设定比较损）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/gym&#34;&gt;gym&lt;/a&gt; 针对于 iOS 打包和签名的自动化工具，完爆 &lt;code&gt;xctool&lt;/code&gt;，而 &lt;code&gt;shenzhen&lt;/code&gt; 也放弃维护&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icyleaf/fastlane-qyer&#34;&gt;qyer&lt;/a&gt; 团队定制的工具，用于检测包和上传到自己的内部分发平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fastlane/fastlane&#34;&gt;fastlane&lt;/a&gt; 简单理解就是控制整体流程和实现的框架容器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;利用目前支持的工具可以做所有包含自动化和可持续化构建的每个环节，比如单元测试、截图、分发渠道、上传元数据和 ipa 包提交审核等等。看到这这些是不是很兴奋？
反正我看到之后就像黑夜看到了光明，果断抛弃自己维护的脚本。&lt;/p&gt;

&lt;h2 id=&#34;基本构成&#34;&gt;基本构成&lt;/h2&gt;

&lt;p&gt;Fastlane 提供的流程的众多工具都是可以独立存在和使用（提供 cli 命令），也可以统一由 fastlane 来控制。它在使用中提出了两个概念：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Fastlane 的插件，截至当前内置 165 个至多，不过每个动作的颗粒度大小不一。&lt;a href=&#34;https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md&#34;&gt;查看详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lane&lt;/code&gt;: Fastlane 的任务（或者可以理解为命令），一个可以包含多个 lanes，通过 &lt;code&gt;fastlane&lt;/code&gt; cli 传入制定的 lane 来执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;光说不干假把式，看法宝：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lane :adhoc do
  # build version 自动加一
  increment_build_number
  # 执行 pod install
  cocoapods
  # 调用 facebook 的 xctool 进行单元测试
  xctool
  # 对模拟器运行的 App 进行截图
  snapshot
  # 安装团队证书和 profiles
  match
  # 上传 App 元数据和签名的 ipa 到 iTunes Conneects
  deliver
  # 把截图套进一个设备外壳
  frameit
  # 允许自定义的脚本文件
  sh &amp;quot;./customScript.sh&amp;quot;
  # 发消息到 slack
  slack
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;工具的起源本身是专门针对 iOS 项目，因此目前依赖于 macOS 10.9 以上系统，Ruby 是一个众所周知的轮子发明者，很多知名的工具都是它开发的，fastlane 也不例外。以下是依赖环境：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;macOS 10.9+&lt;/li&gt;
&lt;li&gt;Ruby 2.0+ (推荐 rvm 或 rbenv 安装)&lt;/li&gt;
&lt;li&gt;Xcode + command line tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上依赖配置好之后就可以通过 rubygem 进行安装：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ [sudo] gem install fastlane
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fastlane 默认会把核心工具都会进行安装，需要大家耐心等待一会&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;初始化&#34;&gt;初始化&lt;/h2&gt;

&lt;p&gt;有两种方法可以初始化，一种是通过命令，一种是自己创建指定的（至少包含一个）约束文件 &lt;code&gt;Fastfile&lt;/code&gt;。首先我先介绍大家使用命令初始化:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 切换只你开发的 iOS 项目根目录
$ cd to/your/ios/project
$ fastlane init
[11:46:34]: Detected iOS/Mac project in current directory...
[11:46:34]: This setup will help you get up and running in no time.
[11:46:34]: fastlane will check what tools you&#39;re already using and set up
[11:46:34]: the tool automatically for you. Have fun!
[11:46:34]: Created new folder &#39;./fastlane&#39;.
...
Your Apple ID (e.g. fastlane@krausefx.com): xxx@gmail.com
[11:46:59]: Verifying if app is available on the Apple Developer Portal and iTunes Connect...
[11:46:59]: Starting login with user &#39;xxx@gmail.com&#39;
Multiple teams found on the Developer Portal, please enter the number of the team you want to use:
1) XXXXXXXXXX &amp;quot;XXXXXXXXXX&amp;quot; (In-House)
2) YYYYYYYYYY &amp;quot;YYYYYYYYYY&amp;quot; (Company/Organization)
+----------------+----------------------------------------------------------------------------+
|                                       Detected Values                                       |
+----------------+----------------------------------------------------------------------------+
| Apple ID       | xxx@gmail.com                                                              |
| App Name       | Hello Fastlane                                                             |
| App Identifier | com.icyleaf.demo.HelloFastlane                                             |
| Workspace      | /Users/icyleaf/Development/iOS/HelloFastlane.xcworkspace                   |
+----------------+----------------------------------------------------------------------------+

[11:48:36]: This app identifier doesn&#39;t exist on iTunes Connect yet, it will be created for you
Please confirm the above values (y/n) n
App Identifier (com.krausefx.app): com.icyleaf.demo.HelloFastlane
[11:50:04]: Created new file &#39;./fastlane/Appfile&#39;. Edit it to manage your preferred app metadata information.
Optional: The scheme name of your app (If you don&#39;t need one, just hit Enter): AppDemo
[11:50:40]: &#39;snapshot&#39; not enabled.
[11:50:40]: &#39;cocoapods&#39; enabled.
[11:50:40]: &#39;carthage&#39; not enabled.
[11:50:40]: Created new file &#39;./fastlane/Fastfile&#39;. Edit it to manage your own deployment lanes.
[11:50:40]: fastlane will send the number of errors for each action to
[11:50:40]: https://github.com/fastlane/enhancer to detect integration issues
[11:50:40]: No sensitive/private information will be uploaded
[11:50:40]: Successfully finished setting up fastlane
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这部分会进行联网，并提示输入你的 Apple ID 来验证你的应用是否存在（没有也会帮你自动创建）并获取相应的关键信息，通过一系列的流程下来把获取的信息会创建一个 &lt;code&gt;fastlane&lt;/code&gt; 目录
并并写入相应的文件（如果某些信息没有填写会忽略某些文件的生成）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Fastfile&lt;/code&gt;: 核心文件，主要用于 cli 调用和处理具体的流程，&lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/fastlane/docs#fastfile&#34;&gt;了解详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Appfile&lt;/code&gt;: 从 Apple Developer Portal 获取和项目相关的信息，&lt;a href=&#34;https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md&#34;&gt;了解详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Deliverfile&lt;/code&gt;: 从 iTunes Connect 获取和项目相关的信息，&lt;a href=&#34;https://github.com/fastlane/fastlane/blob/master/deliver/Deliverfile.md&#34;&gt;了解详情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;抛开其他的几个文件先不说，大家先把注意力放到刚创建好的 &lt;code&gt;Fastfile&lt;/code&gt; 文件上面（可能有变化，仅作参考），如果大家对 Ruby 有了解的话，它定义的 DSL 语言非常类似 &lt;a href=&#34;https://github.com/ruby/rake&#34;&gt;rake&lt;/a&gt;，但流程上有参考的 &lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;rspec&lt;/a&gt;，一旦不满足需求还可以使用 Ruby 代码来实现。单凭 DSL 语言来说就算对于 Ruby 没有基础的也能很快掌握，大多都是比较简单易懂的语法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version &amp;quot;1.95.0&amp;quot;

default_platform :ios

platform :ios do
  # 执行所有命令前都会先执行这里
  before_all do
    # ENV[&amp;quot;SLACK_URL&amp;quot;] = &amp;quot;https://hooks.slack.com/services/...&amp;quot;
    cocoapods
  end

  desc &amp;quot;Runs all the tests&amp;quot;
  lane :test do
    scan
  end

  desc &amp;quot;Submit a new Beta Build to Apple TestFlight&amp;quot;
  desc &amp;quot;This will also make sure the profile is up to date&amp;quot;
  lane :beta do
    # match(type: &amp;quot;appstore&amp;quot;) # more information: https://codesigning.guide
    gym(scheme: &amp;quot;AppDemo&amp;quot;) # Build your app - more options available
    pilot

    # sh &amp;quot;your_script.sh&amp;quot;
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc &amp;quot;Deploy a new version to the App Store&amp;quot;
  lane :appstore do
    # match(type: &amp;quot;appstore&amp;quot;)
    # snapshot
    gym(scheme: &amp;quot;AppDemo&amp;quot;) # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # 你可以定义属于自己的 lane（任务）
  lane :hello do
    puts &amp;quot;hello world&amp;quot;
  end

  # 仅当上述流程全部执行成功后才会走这里。其实应该定义为 after_success
  after_all do |lane|
    # slack(
    #   message: &amp;quot;Successfully deployed new App Update.&amp;quot;
    # )
  end

  # 如果流程发生异常会走这里并终止
  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面的注解，我想大家对它已经有了初步的了解，那么定义完之后该如何执行呢？回到刚才的终端（关闭了？那再切换到刚才的 iOS 项目的根目录）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane ios hello
[11:56:24]: -------------------------------------------------
[11:56:24]: --- Step: Verifying required fastlane version ---
[11:56:24]: -------------------------------------------------
[11:56:24]: fastlane version valid
[11:56:24]: ------------------------------
[11:56:24]: --- Step: default_platform ---
[11:56:24]: ------------------------------
[11:56:24]: Driving the lane &#39;ios hello&#39; 🚀
[11:56:24]: -----------------------
[11:56:24]: --- Step: cocoapods ---
[11:56:24]: -----------------------
[11:56:24]: $ pod install
...
[11:56:28]: hello world

+------+-------------------------------------+-------------+
|                     fastlane summary                     |
+------+-------------------------------------+-------------+
| Step | Action                              | Time (in s) |
+------+-------------------------------------+-------------+
| 1    | Verifying required fastlane version | 0           |
| 2    | default_platform                    | 0           |
| 3    | cocoapods                           | 4           |
+------+-------------------------------------+-------------+

[11:56:28]: fastlane.tools finished successfully 🎉
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;哒哒！一个简单的任务执行完毕！&lt;/p&gt;

&lt;p&gt;如果大家注意观察上面的文件可能注意到一些小细节：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# 自动更新 fastlane 工具，需要 rubygems &amp;gt;= 2.1.0
update_fastlane

# 最低兼容版本，由于 fastlane 还是逐步健壮的阶段更新速度还是蛮快的，
# 为了防止新特性在旧版本的不支持会强制设置一个最低兼容版本
# 不过工具特别贴心的会在每次执行之后会检查是否有新版本，如果有会在最后末尾追加新版本提醒
fastlane_version &amp;quot;1.95.0&amp;quot;

# 默认使用平台是 ios，也就是说文件可以定义多个平台，
# 通过上述执行的命令也能看出来是执行的 ios 平台下面的 hello 任务。
# 这个的作用是可以在执行 fastlane 的时候省略 ios，不信你执行 fastlane hello 试试。
default_platform :ios
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;android-的支持&#34;&gt;Android 的支持&lt;/h2&gt;

&lt;p&gt;这个的支持我觉得关键是社区的呼声太大，加上贡献者的热情（我提交过许多 issues 和个别 PL，响应非常的迅速）很快就加上了其支持，
但具体的特性不是特别多，主要是对于 &lt;code&gt;gradle&lt;/code&gt; 的封装，我先不做展开介绍，大家可以先看看&lt;a href=&#34;https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Android.md&#34;&gt;官方文档&lt;/a&gt;，如果后续有特别不明白的地方我在做具体的讲解。&lt;/p&gt;

&lt;p&gt;今天就先写到这里后续我会继续整理更多的使用指南和实战范例共大家参考，最后给大家附赠官方给大家的一些&lt;a href=&#34;https://github.com/fastlane/examples&#34;&gt;范例&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>极速化 CocoaPods</title>
      <link>https://icyleaf.com/2015/01/speed-up-cocoapods</link>
      <pubDate>Tue, 20 Jan 2015 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2015/01/speed-up-cocoapods</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;Cocopods&lt;/a&gt; 本身是一个优秀的 iOS 开发的包管理工具，涵盖了 7k+ 的开源组件，包管理库是托管在 Github。
众所周知的原因它的速度日渐缓慢，有时会频繁报如下错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install

Cloning into &#39;/path/to/ios/project/Pods/xxx&#39;

error: RPC failed; result=52, HTTP code = 0

fatal: The remote end hung up unexpectedly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本文主要为解决该问题而诞生的，以下的加速方案不局限于目前已流传的优化方案，而是在此基础上&lt;strong&gt;彻底的加速&lt;/strong&gt;！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用淘宝 Ruby Gems 源（Cocoapods 使用 ruby 开发）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pod install&lt;/code&gt; 时不设置包的更新：&lt;a href=&#34;http://phatblat.com/blog/2014/07/30/pod-install/&#34;&gt;参考文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用国内 git 服务器镜像 Cocoapods Spec: &lt;a href=&#34;http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/&#34;&gt;参考文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你对 Cocoapods 有更深层次的理解，请参见：&lt;a href=&#34;http://www.objc.io/issue-6/cocoapods-under-the-hood.html&#34;&gt;objc.io: Cocoapods under the hood&lt;/a&gt; &lt;a href=&#34;http://objccn.io/issue-6-4/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今天早晨看到微博众多 iOS 开发者赞同转发《&lt;a href=&#34;http://weibo.com/p/1001603800875490492754&#34;&gt;CocoaPods最佳实践探讨&lt;/a&gt;》一文，
针对 &lt;code&gt;Pods&lt;/code&gt; 建议纳入版本控制也是无奈之举。之前公司项目中也是这样施行很长一段时间，不排除更新可能会造成很多无用信息&amp;rdquo;刷屏&amp;rdquo;，
偶尔还会因为版本冲突造成一些混乱状况需要处理。个人还是更倾向于精简原则，遵循&lt;a href=&#34;http://guides.cocoapods.org/using/using-cocoapods.html#should-i-ignore-the-pods-directory-in-source-control&#34;&gt;官方的建议&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;大家都是技术人员，其实这些小问题难道因为 github 倒下就没有解决方案了吗？！看我如何撕破这层纸老虎：&lt;/p&gt;

&lt;h3 id=&#34;技术概述&#34;&gt;技术概述&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cocopods v0.34.0+&lt;/li&gt;
&lt;li&gt;Gitlab: 自建私有 git 服务器&lt;/li&gt;
&lt;li&gt;gitlab-mirrors: 专用于 github 镜像至 gitlab 并保持定期更新&lt;/li&gt;
&lt;li&gt;rake: ruby 的代码构建工具（不懂 ruby 的可以把它理解为命令聚合工具）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;技术剖析&#34;&gt;技术剖析&lt;/h3&gt;

&lt;p&gt;Cocoapods 自身支持&lt;a href=&#34;http://guides.cocoapods.org/making/private-cocoapods.html&#34;&gt;私有仓库&lt;/a&gt;，
恰好的是就在前不久发布的 &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/blob/master/CHANGELOG.md#0340&#34;&gt;0.34.0&lt;/a&gt; 版本支持 &lt;code&gt;Podfile&lt;/code&gt;
添加多个的包源仓库，举个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/artsy/Specs.git&#39;
source &#39;https://github.com/CocoaPods/Specs.git&#39;

pod &#39;AFNetworking&#39;
pod &#39;Mantle&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个特性其实是为了扩充官方 Spec 的同时可以更好的让开发者管理私有的公共组件，那我同样是从这里下手：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;前提是自己以及搭建好 gitlab 服务器：&lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;官方教程 （Ubuntu）&lt;/a&gt; | &lt;a href=&#34;http://icyleaf.com/2013/09/how-to-install-gitlab-on-centos/&#34;&gt;本人教程 （CentOS）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;自力更生&#34;&gt;自力更生&lt;/h4&gt;

&lt;p&gt;首先我们需要创建一个自己的 Spec 仓库，目录结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.
├── CocoaPods-version.yml
├── Specs/
├── README.md
├── Rakefile
└── Gemfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置不做详细描述，这里比官方多了两个文件 &lt;code&gt;Rakefile&lt;/code&gt; 和 &lt;code&gt;Gemfile&lt;/code&gt; 都是 rake 所需的文件，这个后面会讲到。
再者就是配置 &lt;a href=&#34;https://github.com/samrocketman/gitlab-mirrors#three-easy-steps&#34;&gt;gitlab-mirrors&lt;/a&gt;，教程很详细不再重复。&lt;/p&gt;

&lt;h4 id=&#34;偷梁换柱&#34;&gt;偷梁换柱&lt;/h4&gt;

&lt;p&gt;利用私有 Spec 仓库特性，可以把官方 &lt;code&gt;Spec&lt;/code&gt; 目录下面的包按需或全部镜像过来，再次基础上&lt;strong&gt;把里面涉及 github 的地址替换成 gitlab 的地址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你没有看错，这是核心步骤，如果这步没有做那么和国内镜像的地址没有任何差别。核心代码如下：&lt;/p&gt;

&lt;h5 id=&#34;rakefile&#34;&gt;Rakefile&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;uri&#39;
require &#39;fileutils&#39;
require &#39;multi_json&#39;
require &#39;net/ssh&#39;

desc &#39;镜像一个 github 包至 gitlab 仓库&#39;
task :clone, [:name] do |t, p|
  name = p[:name]
  current_path = Dir.pwd

  specs = Dir[File.join(File.expand_path(&#39;~&#39;), &#39;.cocoapods/repos/master/Specs/*&#39;)]

  repo = specs.select { |s| File.basename(s) == name }.first

  if repo
    puts &amp;quot; * found repo, copy it here&amp;quot;
    repo_store_path = File.join(current_path, &#39;Specs&#39;)
    FileUtils.cp_r repo, repo_store_path

    puts &amp;quot; * updating repo url&amp;quot;
    Dir[&amp;quot;#{repo_store_path}/#{name}/*&amp;quot;].each do |f|
      pod_file = File.join(f, &amp;quot;#{name}.podspec.json&amp;quot;)
      json = File.read(pod_file)
      data = MultiJson.load json

      if data[&#39;source&#39;][&#39;git&#39;]
        puts &amp;quot; -&amp;gt; #{data[&#39;version&#39;]}: git&amp;quot;
        orginal_repo_url = data[&#39;source&#39;][&#39;git&#39;]
        coverted_repo_name =  URI.parse(orginal_repo_url).path[1..-1].gsub(&#39;/&#39;, &#39;-&#39;).downcase
        data[&#39;source&#39;][&#39;git&#39;] = &amp;quot;http://gitlab.dev/mirrors/#{coverted_repo_name}&amp;quot;

        File.write(pod_file, JSON.pretty_generate(data))
      else data[&#39;source&#39;][&#39;http&#39;]
        puts &amp;quot; -&amp;gt; #{data[&#39;version&#39;]}: http url, do you want speed up?&amp;quot;
      else data[&#39;source&#39;][&#39;svn&#39;]
        puts &amp;quot; -&amp;gt; #{data[&#39;version&#39;]}: svn repo, do you want speed up?&amp;quot;
      end
    end
  else
    puts &amp;quot;Not find spec named: #{name}&amp;quot;
  end
end

desc &#39;gitlab 服务器镜像 Cocoapod Spec&#39;
task :mirror, [:repo] do |t, p|
  host        = &#39;172..0.1&#39;
  user        = &#39;icyleaf&#39;
  options     = {:keys =&amp;gt; &#39;~/.ssh/keys/id_rsa.pub&#39;}

  puts &amp;quot;Connect gitlab server and mirror&amp;quot;
  Net::SSH.start(host, user, options) do |ssh|
    gitmirror_path = &#39;/home/gitmirror/gitlab-mirrors&#39;
    cmd = &amp;quot;sudo -u gitmirror -H rake \&amp;quot;add[#{p[:repo]}]\&amp;quot;&amp;quot;
    stdout = ssh.exec!(&amp;quot;echo &#39;cd #{gitmirror_path} &amp;amp;&amp;amp; #{cmd}&#39;&amp;quot;)
    puts stdout
    ssh.loop
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;gemfile&#34;&gt;Gemfile&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &amp;quot;https://ruby.taobao.org&amp;quot;

gem &#39;rest_client&#39;
gem &#39;multi_json&#39;
gem &#39;rake&#39;
gem &#39;net-ssh&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rake&lt;/code&gt; 里面有两个 task：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mirror: 镜像 iOS 开源组件&lt;/li&gt;
&lt;li&gt;clone: 负责把官方 spec 指定包（开源组件的版本控制）替换 gitlab 地址并加入到私有包仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;通过工具总有办法可以改进和提升开发者的效率和解决各种的问题，希望本文可以给大家带来更多的灵感！&lt;/p&gt;

&lt;h3 id=&#34;答疑解惑&#34;&gt;答疑解惑&lt;/h3&gt;

&lt;h5 id=&#34;f-这套理论靠谱吗&#34;&gt;F: 这套理论靠谱吗？&lt;/h5&gt;

&lt;p&gt;A: 目前我们团队已经采用并运行了很长一段时间，没有任何风险。最大的优势在于兼容官方的仓库，
就算无法链接自己的私有服务器，使用官方和国内镜像的都可以瞬间切换。&lt;/p&gt;

&lt;h5 id=&#34;f-如果没有服务器可以实现吗&#34;&gt;F: 如果没有服务器可以实现吗？&lt;/h5&gt;

&lt;p&gt;A: 醒醒吧孩子，就连单纯的镜像官方 Cocoapods Spec 还需要一个服务器执行定期同步脚本呢。&lt;/p&gt;

&lt;h5 id=&#34;f-国内-git-托管服务器能够支持吗&#34;&gt;F: 国内 git 托管服务器能够支持吗？&lt;/h5&gt;

&lt;p&gt;A: 据我所知国内大部分 git 托管服务器的解决方案都是基于 gitlab 二次开发的，理论上可行，
上面提到的 gitlab-mirror 本身依赖于 gitlab 的 api 在镜像的同时自动新建仓库。如果有成功的欢迎反馈。&lt;/p&gt;

&lt;h5 id=&#34;f-我从你代码发现服务器同样调用了一个-rake-脚本-你没有开源&#34;&gt;F: 我从你代码发现服务器同样调用了一个 rake 脚本，你没有开源！&lt;/h5&gt;

&lt;p&gt;A: 眼睛真够敏锐的，个人对 gitlab-mirror 再做镜像时做了一个约束，新建一个 &lt;code&gt;Rakefile&lt;/code&gt; 文件放到你的 gitlab-mirror 项目根目录即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;uri&#39;

desc &amp;quot;Adding repo to gitmirror&amp;quot;
task :add, [:repo] do |t, p|
  repo = p[:repo]

  begin
    name = URI.parse(repo).path[1..-1].gsub(&#39;/&#39;, &#39;-&#39;).gsub(&#39;.git&#39;, &#39;&#39;)
    if name
      `./add_mirror.sh -f --git --project-name #{name} --mirror #{repo}`
    end
  rescue Error =&amp;gt; e
    puts &#39;not url&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;f-我还有问题&#34;&gt;F: 我还有问题！&lt;/h5&gt;

&lt;p&gt;A: 麻烦请留言，谢谢！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>针对 Universal 应用上线 App Store 的提示</title>
      <link>https://icyleaf.com/2013/02/app-store-review-tips-about-universal-app</link>
      <pubDate>Tue, 19 Feb 2013 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2013/02/app-store-review-tips-about-universal-app</guid>
      <description>

&lt;h2 id=&#34;官方禁止新版本支持的设备小余旧版本&#34;&gt;官方禁止新版本支持的设备小余旧版本&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/cn/app/le-ju-ji-suan-qi-zui-gei-li/id397735649?mt=8&#34;&gt;乐居计算器&lt;/a&gt;是我们的第一款 Universal 应用，这次做了重要变化，但仅限于 iPhone 的修改，本想改本次上线仅支持 iPhone 来赶 deadline，临到上线的时候却被 Xcode 报错：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;This bundle does not support one or more of the devices that were supported in the previous bundle for this app. Bundles must continue to support any devices previously supported.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;官方《&lt;a href=&#34;https://developer.apple.com/appstore/guidelines.html&#34;&gt;App Store Review Guidelines&lt;/a&gt;》却没有提到有这样的限制，最后在官方技术 Q&amp;amp;A 找到答疑，参见 &lt;a href=&#34;http://developer.apple.com/library/ios/#qa/qa1623/_index.html&#34;&gt;Why am I getting device support errors when uploading my app?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;iphone-和-ipad-的排名是分开统计的&#34;&gt;iPhone 和 iPad 的排名是分开统计的&lt;/h2&gt;

&lt;p&gt;不知道大家注意没有，其实就算你发布的 app 是 Universal，但 app store 针对它的排行榜确实分开计算的，因此在做排名统计的时候不要只顾着一个设备的数据。那这个下载的数据怎么计算呢？&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;什么设备下载就算那个设备的数据&lt;/li&gt;
&lt;li&gt;通过 itunes 下载的算 iphone 的数据（Ocz）&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;数据来源：&lt;a href=&#34;http://www.quora.com/How-does-being-a-universal-app-affect-App-Store-rankings&#34;&gt;How does being a universal app affect App Store rankings&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;iphone-ipad-新版本改为-universal-两者都算新品上线&#34;&gt;iPhone/iPad 新版本改为 Universal，两者都算新品上线&lt;/h2&gt;

&lt;p&gt;原理同上，不再细说&lt;/p&gt;

&lt;h2 id=&#34;iphone-ipad-还是一劳永逸的-universal&#34;&gt;iPhone/iPad 还是一劳永逸的 Universal&lt;/h2&gt;

&lt;p&gt;这是一个众说纷纭的话题，我的个人建议是，如果团队人较少且应用是免费发布，尽可能做成 Universal，减少不必要的维护成本和开发成本（虽然兼容平台会有一些牺牲）；如果是做付费且运营的人员可以支撑，可以最快最能抓住市场需求的点发布 iPhone 版本，通过市场反应去绝对是否开发 iPad 版本，等推广达到一个峰值（这个需要自己衡量）时，可以把 iPhone 或 iPad 的改成 Universal 版本，再次赚上一笔。&lt;/p&gt;

&lt;p&gt;当然也有从 Universal 版拆分为 iPhone 和 iPad 的策略，不过我个人对此营销手段感到反感。重要的事让用户失去了占便宜的特殊心理。&lt;/p&gt;

&lt;h3 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cocoanetics.com/2011/05/to-universal-or-not/&#34;&gt;To Universal or Not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.iteleportmobile.com/the-case-for-universal-apps&#34;&gt;The Case for Universal Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>在 iOS 应用调用 App Store 显示指定应用的详情</title>
      <link>https://icyleaf.com/2012/10/how-to-preview-app-detail-buit-in-app-using-app-store-data</link>
      <pubDate>Thu, 25 Oct 2012 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2012/10/how-to-preview-app-detail-buit-in-app-using-app-store-data</guid>
      <description>&lt;p&gt;可能很多手机应用都使用了“应用推荐”的功能，实现方式各式各样，对于 iOS 来说最致命的缺点就是，如果用户喜欢给推荐的应用，当用户点击该应用的时候，系统会硬生生的从当前应用内退出并打开 App Store 查看应用的详情。如果站在用户体验的角度来看，这其实是一个非常差劲的体验。那么能不能有一种方式可以在应用内部打开呢？&lt;/p&gt;

&lt;p&gt;答案是肯定可以！！ iOS 6 其实包括了很多很好的特性，比如 Soical framework，丰富了分享面板，包括我最近刚刚更新的 ShareKit 也对新浪微博支持了这个特性(&lt;a href=&#34;https://github.com/icyleaf/ShareKit/issues/4&#34;&gt;ShareKit#4&lt;/a&gt;)。还有针对于 O2O 具有杀手锏作用的 Pass Kit framework 等等等等&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;喂喂喂，你说了半天没有讲到正题啊？！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;咳~咳~书归正题，如果你没做应用内付费，可能你就忽略了 iOS 6 对 In-App Purchase 的说明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Store Kit framework (StoreKit.framework) now supports the purchasing of iTunes content inside your app and provides support for having downloadable content hosted on Apple servers. With in-app content purchases, you present a view controller that lets users purchase apps, music, books, and other iTunes content directly from within your app. You identify the items you want to make available for purchase but the rest of the transaction is handled for you by Store Kit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说 StoreKit framework 支持了在应用下载其他应用的特性！！！兴奋吧，官方很慷慨的支持了这个功能！！如果查看手册，其实咱们用到的只有 SKStoreProductViewController 这个类和所述的 delegate 就够了。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SKStoreProductViewController *controller = [[SKStoreProductViewController alloc] init];
controller.delegate = self;
NSDictionary *params = [NSDictionary dictionaryWithObject:@&amp;quot;397735649&amp;quot; // App id
                                                   forKey:SKStoreProductParameterITunesItemIdentifier];

[controller loadProductWithParameters:params
                      completionBlock:^(BOOL result, NSError *error) {
                          if (result)
                              [self presentViewController:controller
                                                 animated:YES
                                               completion:nil];
                      }];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>如何针对 iOS 设备进行网络抓包分析</title>
      <link>https://icyleaf.com/2012/10/%E5%A6%82%E4%BD%95%E9%92%88%E5%AF%B9-ios-%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90</link>
      <pubDate>Mon, 15 Oct 2012 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2012/10/%E5%A6%82%E4%BD%95%E9%92%88%E5%AF%B9-ios-%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90</guid>
      <description>&lt;p&gt;Charles 目前是 OS X 上面最好的抓包分析软件，相比 WireShark 功能更加强大，并支持代理功能。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ravelrumba.com/blog/ipad-http-debugging/&#34;&gt;iPad HTTP Debugging with Charles&lt;/a&gt; - 教大家如何使用它进行代理抓包&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.skinkers.com/2012/06/12/testing-tethering-data-driven-mobile-apps-with-charles-and-osx-ipad-iphone-http-debugging/&#34;&gt;Testing / Tethering Data Driven Mobile Apps with Charles and OSX&lt;/a&gt; - 教大家如何进行 request remap，适合不改动代码的情况下修改域名切换环境&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不过 Charles 的确定就是共享软件，未注册版本可以使用全功能但是限制是只能允许使用 30 分钟，那么&amp;hellip;习惯用 Terminal 的还有一个方法：&lt;a href=&#34;http://useyourloaf.com/blog/2012/02/07/remote-packet-capture-for-ios-devices.html&#34;&gt;Remote Packet Capture for iOS Devices&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvictl -s &amp;lt;UDID&amp;gt;
$ rvictl -l
$ tcpdump -n -t -i rvi0 -q tcp
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>友盟 iOS 发布渠道自动化脚本</title>
      <link>https://icyleaf.com/2012/05/ios-publish-channel-packger-for-umeng</link>
      <pubDate>Thu, 10 May 2012 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2012/05/ios-publish-channel-packger-for-umeng</guid>
      <description>&lt;p&gt;现在公司的大多数手机项目的统计服务都是用的&lt;a href=&#34;http:///www.umeng.com&#34;&gt;友盟&lt;/a&gt;，而自使用之初到现在都有一个渠道管理的功能，这个最后打包的时候实际上可能会产生一点点的麻烦，最早第一个 app 发布的时候，写了一个半自动的脚本，凑合用了很久，现在觉得需要完全自动化，于是借鉴之前 &lt;a href=&#34;http://icyleaf.com/2012/04/automating-script-to-testFlight-from-xcode/&#34;&gt;testflightapp 的自动化脚本&lt;/a&gt;，重新改造脚本。&lt;/p&gt;

&lt;p&gt;实现分两部分：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iOS 代码&lt;/li&gt;
&lt;li&gt;自动化脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实现原理很简单，我利用一个文本文件放置在项目当中（比如：&lt;code&gt;PublishChannel.txt&lt;/code&gt;），里面只需要存上发布渠道的名字，默认是 &lt;code&gt;App Store&lt;/code&gt;。在代码中只需要想友盟调用函数的时候，读取这个文件即可。只需要做这样简单的工作就结束了 iOS 代码部分的工作。&lt;/p&gt;

&lt;p&gt;主要的功能基本上都是由自动化脚本完成。因为它要去标记分发渠道，处理打包工作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打包需要一个符合官方发布要求的 Icon，即 512x512 px，PNG 格式且名字必须是 &lt;code&gt;iTunesArtwork&lt;/code&gt; （不能包含后缀，无比保证在终端检查）&lt;/li&gt;
&lt;li&gt;修改 PublishChannel.txt 的分发渠道&lt;/li&gt;
&lt;li&gt;同时需要把 .app 的文件放在 &lt;code&gt;Payload&lt;/code&gt; 并和 &lt;code&gt;iTunesArtwork&lt;/code&gt; 一起打成 ipa 包（实际上就是一个 zip，改成了 ipa）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样看起来其实工作也不复杂，只不过分发渠道多了就是有些浪费时间。同样还是采用了 Archive 的 Post-Action，这里面可以插入脚本以及外部的调用脚本（如果看不到下面的具体代码，请&lt;a href=&#34;https://gist.github.com/2650508&#34;&gt;点击这里&lt;/a&gt;：&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/2650508.js?file=package.sh&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>自动化脚本上传应用至 testflightapp</title>
      <link>https://icyleaf.com/2012/04/automating-script-to-testflight-from-xcode</link>
      <pubDate>Fri, 06 Apr 2012 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2012/04/automating-script-to-testflight-from-xcode</guid>
      <description>&lt;p&gt;Testflightapp 是团队开发测试中起了重要的角色，尤其是到目前为止一直是免费，最近还推出的 Live 功能不仅可以统计本身的一些数据还可以把现有的一些其他的账户的数据（比如， itunesconnect，Apple iAd，admob 等）导入进一步扩大聚合。&lt;/p&gt;

&lt;p&gt;尤其是它真的重视开发着的核心需求，仅推出了唯一的一个公开 API，就是上传打包后的 ipa 文件，配合 Xcode 中 Archive 的 Post-action 可以轻松搞定自动化的操作。&lt;/p&gt;

&lt;p&gt;下面是网上搜集的脚本，算是我发现定制化比较强的&lt;a href=&#34;https://gist.github.com/1379127&#34;&gt;自动化脚本&lt;/a&gt;，而且注解也写的很详细。可以在配合我的打包脚本，可以把各个发布渠道的事情一起自动化。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：Xcode 默认的 run script 是 &lt;code&gt;/bin/sh&lt;/code&gt;，而上面的脚本是
&lt;code&gt;/bin/bash&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个 Post-action 不爽的地方在于所有的 &lt;code&gt;echo&lt;/code&gt; 没有办法直接输出到 Xcode 的 output 里面，所以脚本只能把 log 保持到了 &lt;code&gt;/tmp&lt;/code&gt;
目录下面，如果发现出现问题请仔细查看 log。&lt;/p&gt;

&lt;p&gt;BTW，Post-actions 添加的脚本对于忽略了 XCode 干扰文件的版本控制来说，它没有归入到版本控制之中，脚本是被转义后放在了一个 xcscheme 的 xml 文件中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(project).xcodeproj/xcuserdata/(username).xcuserdatad/xcschemes/(name).xcscheme
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>pngcrush 的一些用法</title>
      <link>https://icyleaf.com/2012/03/pngcrush-usage-with-ios-apps</link>
      <pubDate>Fri, 09 Mar 2012 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2012/03/pngcrush-usage-with-ios-apps</guid>
      <description>

&lt;p&gt;pngcrush 顾名思义，看起名字本身就优化 png 的工具，为什么会提到它呢，因为目前所有 iOS app 自身的 png 文件都是经过它优化的，对于优化有的 png，系统本身默认是无法识别的（包括看图工具，作图工具）。但这个工具不仅仅可以优化还可以还原。假如你希望可以学习优秀 iOS App 的一些 png 资源设计，通过这个工具延伸的一些辅助工具，可以快速预览和恢复未优化的图片。&lt;/p&gt;

&lt;h1 id=&#34;pngcrush&#34;&gt;pngcrush&lt;/h1&gt;

&lt;p&gt;本身就是一个开源的工具，托管在 &lt;a href=&#34;http://pmt.sourceforge.net/pngcrush/index.html&#34;&gt;SourceForge&lt;/a&gt;，可以在任何平台运行，对于安装 Xcode 的童鞋，此工具默认放在：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# XCode 4.3+
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/pngcrush

# XCode 4.2.x 以下版本
/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/

# 还原 ipa 目录下所以 png 文件到 reverted 目录下面
pngcrush -dir reverted -revert-iphone-optimizations -q ipa/*.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里还有一些其他版本的&lt;a href=&#34;http://stackoverflow.com/questions/7138700/pngcrush-uncrush-on-linux&#34;&gt;类似工具&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;quicklook&#34;&gt;Quicklook&lt;/h1&gt;

&lt;p&gt;OSX 有个系统的快速预览功能，简单的解释（针对于图片来说）：可以显示图片的内容，同时选中文件，按&lt;strong&gt;空格&lt;/strong&gt;对于系统可以识别的即可快速查看文件的内容。&lt;/p&gt;

&lt;p&gt;但由于 iOS app 的 png 文件是优化后的，既然系统无法识别，那就更别提 Quicklook 了，于是利用 pngcrush 就有了新的产物：PngUncrush.qlgenerator。有了它就可以用 Quicklook 显示和查看 png 图片了。&lt;/p&gt;

&lt;p&gt;目前利用这个工具做成的工具很多，包括用 shell 安装的，pkg 文件，实际上原理都是把这个文件丢到系统 &lt;code&gt;/Library/QuickLook/&lt;/code&gt; 或者 &lt;code&gt;~/Library/QuickLook/&lt;/code&gt; 下面即可。&lt;/p&gt;

&lt;p&gt;我觉得比较好用的是 &lt;a href=&#34;http://castelliweb.com/blog/2010/05/24/quicklook-plugins-for-mac/&#34;&gt;Quicklook Plugins for Mac&lt;/a&gt;，这是一个 pkg 安装文件，不仅包括了对于 png 文件的快速预览，同时对于 ipa 文件的图表也会更换为更为直观的 App 图标，方便大家的浏览和识别。&lt;/p&gt;

&lt;h1 id=&#34;atpeek&#34;&gt;atPeek&lt;/h1&gt;

&lt;p&gt;我就知道你不会满足上面半自动的工具，我想 &lt;a href=&#34;http://www.atpurpose.com/atPeek/&#34;&gt;atPeek&lt;/a&gt;(奇怪为什么会被墙掉) 也是你在本博文中最满意的工具。正式介绍下，这个工具自打开的一瞬间，就会加载 &lt;code&gt;Music/iTunes/Mobile Applications&lt;/code&gt; 目录下面的所有 ipa 文件。点击你需要查看的 ipa 文件，不仅可以查看该 ipa 的基本 App，最让大家爽的是，ipa 的所有资源文件以文件资源管理器的方式呈现出来。嗯，没错！我可以看到你们双眼发光了！&lt;/p&gt;

&lt;p&gt;但是，这是一个付费应用，你可以进行的操作就是浏览 ipa 和应用自带的预览功能，任何的放大以及导出 png 资源，都是需要付费的，价格为 $4.99。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何让 iOS 和 Android 支持自定义字体</title>
      <link>https://icyleaf.com/2011/07/custom-fonts-both-in-ios-and-android</link>
      <pubDate>Wed, 06 Jul 2011 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2011/07/custom-fonts-both-in-ios-and-android</guid>
      <description>

&lt;p&gt;本篇教程的目前源于我们团队设计师一直询问，iOS(iPhone/iPad) 和 Android
两个平台是否支持自定义字体的问题，恰巧前不久&lt;a href=&#34;http://www.v2ex.com/t/15220&#34;&gt;唐茶计划&lt;/a&gt;出了一个关于在中文阅读新体验的电子书应用：&lt;a href=&#34;http://itunes.apple.com/cn/app/id446752200?mt=8&#34;&gt;失控&lt;/a&gt;。里面提到中文的显示采用了香港字体设计室的全新中文黑体字：&lt;a href=&#34;http://www.typeisbeautiful.com/2011/07/4276&#34;&gt;信黑体&lt;/a&gt;。于是我就在想看来
iOS 是可以支持自定义字体的。通过搜索和研究整理如下，供自己备份和大家参考&lt;/p&gt;

&lt;h1 id=&#34;ios&#34;&gt;iOS&lt;/h1&gt;

&lt;p&gt;iOS 对字体以样式的支持是非常有限的(内嵌&lt;a href=&#34;http://iosfonts.com/&#34;&gt;默认字库列表&lt;/a&gt;)，尤其说对于用习惯了 HTML + CSS，就觉得 iOS 对字体的扩展真是逊到渣了，当然高人们已经准备为大众造福，出现了轻巧的
&lt;a href=&#34;https://github.com/zynga/FontLabel&#34;&gt;FontLable&lt;/a&gt;，&lt;a href=&#34;https://github.com/mattt/TTTAttributedLabel&#34;&gt;TTTAttributedLabel&lt;/a&gt; 开源库到怪兽级别 &lt;a href=&#34;https://github.com/facebook/three20&#34;&gt;Three20&lt;/a&gt; 开源框架。但假如仅仅是想加载自定义字体来说，对于 iOS 4 版本还是比较简单的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;添加自定义字体文件做资源文件添加到 XCode 项目之中&lt;/li&gt;
&lt;li&gt;在 info.plist 中新增一个名为 UIAppFonts 的 Key，类型是数组（array）&lt;/li&gt;
&lt;li&gt;把新增的字体的文件名（包括后缀）依次填入 UIAppFonts 数组（注意区分大小写）&lt;/li&gt;
&lt;li&gt;保存 info.plist（废话）。准备工作完毕，下面是编码部分&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;@implementation CustomFontLabel

- (id)initWithCoder:(NSCoder *)decoder
{
    if (self = [super initWithCoder: decoder])
    {
        [self setFont: [UIFont fontWithName: @&amp;quot;Custom Font Name&amp;quot; size: self.font.pointSize]];
        // 这里 Custom Font Name 并不是字体的文件名，而且系统注册显示的字体标准名称，比如
        // 比如，微软雅黑，最好就用 Microsoft YaHei （不过这个会存在版权问题把 XD）
        // 另外，注意区分大小写
    }
    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里还有更完整的&lt;a href=&#34;http://stackoverflow.com/questions/360751/can-i-embed-a-custom-font-in-an-iphone-application&#34;&gt;关于 iOS 不同平台支持自定义字体&lt;/a&gt;的问答。&lt;/p&gt;

&lt;h1 id=&#34;android&#34;&gt;Android&lt;/h1&gt;

&lt;p&gt;Android 默认支持  Droid Sans，Droid Sans Mono 和 Droid Serif 三种字体，其实对于中文的显示还是很不错的，有些类似于微软雅黑字体（&lt;a href=&#34;http://www.cnbeta.com/articles/114854.htm&#34;&gt;区别&lt;/a&gt;）。假如只是对默认的字体进行更换，最简单的方法就是配置 layout 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
              android:orientation=&amp;quot;vertical&amp;quot;
              android:layout_width=&amp;quot;fill_parent&amp;quot;
              android:layout_height=&amp;quot;fill_parent&amp;quot;
        &amp;gt;
    &amp;lt;TextView
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;This is a &#39;sans&#39; demo!&amp;quot;
            android:typeface=&amp;quot;sans&amp;quot;
            /&amp;gt;
     &amp;lt;TextView
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;This is a &#39;serif&#39; demo!&amp;quot;
            android:typeface=&amp;quot;serif&amp;quot;
            android:textStyle=&amp;quot;italic&amp;quot;
            /&amp;gt;
     &amp;lt;TextView
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;This is a &#39;monospace&#39; demo!&amp;quot;
            android:typeface=&amp;quot;monospace&amp;quot;
            android:textStyle=&amp;quot;bold&amp;quot;
            /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这样肯定不能满足大家对于字体排版高一级的要求，下面是支持自定义字体的步骤：&lt;/p&gt;

&lt;p&gt;首先，添加自定义字体文件放在项目的 &lt;code&gt;assets/fonts&lt;/code&gt; 目录下面（目录可能需要自己创建）。&lt;/p&gt;

&lt;p&gt;其次，编辑 layout 文件（这里做一个示范）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
              android:orientation=&amp;quot;vertical&amp;quot;
              android:layout_width=&amp;quot;fill_parent&amp;quot;
              android:layout_height=&amp;quot;fill_parent&amp;quot;
        &amp;gt;
    &amp;lt;TextView android:id=&amp;quot;@+id/textview&amp;quot;
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;This is a &#39;Microsoft YaHei&#39; demo!&amp;quot;
            /&amp;gt;
    &amp;lt;Button android:id=&amp;quot;@+id/button&amp;quot;
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;This is a &#39;Microsoft YaHei&#39; button!&amp;quot;
            /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，在代码部分实现自定义字体（和 iOS 类似）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void onCreate(Bundle savedInstanceState)
{
       super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        TextView textView = null;
        Button button = null;

        setFont(textView, &amp;quot;fonts/YaHei.ttf&amp;quot;, R.id.text_view);
        setFont(button, &amp;quot;fonts/YaHei.ttf&amp;quot;, R.id.button);
}

void setFont(TextView name, String path, int res)
{
    	name = (TextView) findViewById(res);
        Typeface font = Typeface.createFromAsset(this.getAssets(), path);
        name.setTypeface(font);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;扩展阅读 [&lt;a href=&#34;http://mobile.tutsplus.com/tutorials/android/customize-android-fonts/&#34;&gt;1&lt;/a&gt;] [&lt;a href=&#34;http://russenreaktor.wordpress.com/2010/04/29/solved-android-using-custom-fonts/&#34;&gt;2&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;话说，为什么 Android 到现在都没有更多的开源的库和框架呢？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为 ShareKit 增加国内相关微博/SNS 服务</title>
      <link>https://icyleaf.com/2011/05/append-related-services-into-sharekit-from-china</link>
      <pubDate>Mon, 02 May 2011 12:34:56 +0800</pubDate>
      
      <guid>https://icyleaf.com/2011/05/append-related-services-into-sharekit-from-china</guid>
      <description>&lt;p&gt;在 iDev 圈内，众所周知 ShareKit是一个家喻户晓的分享框架，很多人都在问哪有支持国内相关微博/SNS服务（比如，新浪微博，腾讯微博，豆瓣，开心网，校内等）的类似框架或者谁去做贡献，造福那些拿来主义的人类。正好碰巧我刚刚接触 iOS 开发不久，为了验证文章开头的那段话，恰巧我开发的应用也需要设计这块的内容，我就只好啃下了这块“硬面包”，实际上在熟悉整个 ShareKit 的代码后，外加上对于 OAuth 协议又非常的了解，做一个扩展还是很轻松的，虽然我对 Objective-C 代码并不是很熟悉，这一切得益于 ShareKit。&lt;/p&gt;

&lt;p&gt;ShareKit 在整体上，代码写的比较完美，对于新增的服务可以轻松实现，而且另外最最大的一个好处在于国内的这些服务实际上都是 Copy to China，这有大大减少了移植的开发量，比较恶心的事，国内为了证明我们的结构和功能不同于原版，对其有做了细微的调整，这就导致使用标准化的协议不能通过，这对于只是想用的人来说就是一种灾难。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。人之为学有难易乎？学之，则难者亦易矣；不学，则易者亦难矣。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面是从 V2EX某帖子挖出来的一个评论，实际上这段文字大家在学校的时候应该并不陌生，随后又看到了《&lt;a href=&#34;http://huajun.w18.net/?p=388&#34;&gt;凭什么是我们&lt;/a&gt;》这篇文章，更是印证了上面这段话。&lt;/p&gt;

&lt;p&gt;为什么我要说上面这段和标题并不沾边的文字呢，实际上现在要发布的日志本来在我看来是非常没有必要的，因为这个项目我已经在 git 上面 fork 并贡献了关于国内相关微博/SNS服务的代码，我以为大家可以通过搜索引擎搜索到，可想还是有人来问我，那好吧，为了减少询问我的次数，以及这篇日志的SEO，我还是写下了这个日志。&lt;/p&gt;

&lt;p&gt;Github 项目地址：&lt;a href=&#34;https://github.com/icyleaf/ShareKit&#34;&gt;https://github.com/icyleaf/ShareKit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;衷心希望这个 fork 的代码对热情开发的人有所帮助！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>