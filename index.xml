<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>icyleaf</title>
    <link>https://icyleaf.com/index.xml</link>
    <description>Recent content on icyleaf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>All rights reserved - 2019</copyright>
    <lastBuildDate>Fri, 15 Nov 2019 19:10:07 +0800</lastBuildDate>
    <atom:link href="https://icyleaf.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cocoapods 新增 CDN 支持的源码解读</title>
      <link>https://icyleaf.com/2019/11/cocoapods-cdn-source-code-reading</link>
      <pubDate>Fri, 15 Nov 2019 19:10:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2019/11/cocoapods-cdn-source-code-reading</guid>
      <description>

&lt;p&gt;Cocoapods &lt;a href=&#34;https://blog.cocoapods.org/CocoaPods-1.7.2/&#34;&gt;1.7.2&lt;/a&gt; 版本开始增加 CDN 支持但默认没有启用，&lt;a href=&#34;http://blog.cocoapods.org/CocoaPods-1.8.0-beta/&#34;&gt;1.8&lt;/a&gt; 版本的发布舍弃了原始完整克隆的 Specs 仓库改用 CDN 服务。CDN 利用的是免费且强大的 &lt;a href=&#34;https://www.jsdelivr.com/&#34;&gt;jsDelivr&lt;/a&gt; CDN 服务，该 CDN 网络在国内是有备案因此速度和稳定性都会有很好的保证。该提案其实在去年已经有人使用 Cocoapods Plugin 的方式实现并向社区&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/issues/8268&#34;&gt;贡献 PR&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;那么 CDN 支持相比之前的机制有啥优势呢？难道是把 Pods 的仓库和源码都托管到 CDN 网络了吗，其实并不是的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;友情提醒：本文只重点分析 Pods 下载的机制，不展开其他方面，以下只是 &lt;code&gt;pod install&lt;/code&gt; 执行顺序中的一部分，如果你想了解 Cocoapods 都干了什么可以前往&lt;a href=&#34;https://www.jianshu.com/p/84936d9344ff&#34;&gt;这篇文章&lt;/a&gt;查阅。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;老的机制&#34;&gt;老的机制&lt;/h3&gt;

&lt;p&gt;第一步先检查本地 &lt;code&gt;~/.cocoapods/repo/master&lt;/code&gt; 目录是否存在，没有直接克隆 &lt;code&gt;https://github.com/Cocoapods/Specs.git&lt;/code&gt; 仓库，这步在国内来说特别费时间正常下载下来目录应该是 2G+，如果有其他 source 源（比如私有源）会重复刚才的操作。&lt;/p&gt;

&lt;p&gt;第二步安装 Podfile 每个 Pod 去在各个源中寻找对应的版本，从版本的 .podspec 文件解析获取组件的地址，这个可能是 http、git、svn、hg 中的&lt;a href=&#34;https://guides.cocoapods.org/syntax/podspec.html#source&#34;&gt;任意一个&lt;/a&gt;，获取到之后开始下载（默认是在 &lt;code&gt;~/Library/Caches/CocoaPods&lt;/code&gt; 做缓存目录）&lt;/p&gt;

&lt;h3 id=&#34;新的机制&#34;&gt;新的机制&lt;/h3&gt;

&lt;p&gt;第一步分析 Podfile 里面的 source ，如果没有走默认 Cocoapods 的配置（1.8 以上是 &lt;a href=&#34;https://cdn.cocoapods.org&#34;&gt;https://cdn.cocoapods.org&lt;/a&gt; ，之前的还是 Cocoapods/Spec），
如果本地不存在官方 cdn 的 repo 名字是 trunk 的保留字，自己无法创建。如果有自定义的 source 会追加上去 sources 列表。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ http HEAD https://cdn.cocoapods.org/all_pods.txt
HTTP/1.1 200 OK
Accept-Ranges: bytes
Age: 0
Cache-Control: public, max-age=0, must-revalidate
Connection: keep-alive
Content-Length: 924280
Content-Type: text/plain; charset=UTF-8
Date: Sat, 09 Nov 2019 07:06:15 GMT
Etag: &amp;quot;acf0d284f3a8e82e0d66ba1a91cd30b9-ssl&amp;quot;
Server: Netlify
Strict-Transport-Security: max-age=31536000
X-NF-Request-ID: 50b466cd-ce9e-4326-b5bb-0d29a193ae4b-7809449
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二步检查或下载每个 source，每个 source 会检查是否是 cdn 类型（使用 HEAD 请求检查是否包含 /all_pods.txt）文件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cdn 类型，下面详细解释&lt;/li&gt;
&lt;li&gt;其他类型，走原来的老的逻辑，不再赘述&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第三步，下载 &lt;code&gt;Cocoapods-version.yml&lt;/code&gt; 并缓存 etag，下载 &lt;code&gt;/Cocoapods-version.yml&lt;/code&gt; 并取 headers 的第一个 etag 的值存为 &lt;code&gt;/Cocoapods-version.yml.etag&lt;/code&gt;，如果存在 etag 会比对一样就不需要下载， 链接支持根目录和其他目录，支持 301 跳转。&lt;/p&gt;

&lt;p&gt;Cocoapods-version.yml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
min: 1.0.0
last: 1.8.4
prefix_lengths:
- 1
- 1
- 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第四步，分析 Pod 并获取 pod 的版本信息，比如 Podfile 我增加了一个 &lt;code&gt;pod &amp;quot;AFNetworking&amp;quot;&lt;/code&gt;，把 pod 名字做 MD5 后的值取 Cocoapods-version.yml 的 prefiex_length 数组长度的值单字母拆分用下划线分割按照规则拼成文件名 &lt;code&gt;all_pods_versions(_{fragment}).txt&lt;/code&gt; (如果prefix_length 为 0 则只会去下载 &lt;code&gt;/all_pods_versions.txt&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;比如：prefix_lengths 数组大小为 3，AFNetworking MD5 后 &lt;code&gt;a75d452377f396bdc4b623a5df25820&lt;/code&gt; 则匹配前三位 a75 拆分后 a_7_5
后查找 cdn url 路径的 &lt;code&gt;/all_pods_versions_a_7_5.txt&lt;/code&gt; 下载下来后的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fuse/0.1.0/0.2.0/1.0.0/1.1.0/1.2.0
GXFlowView/1.0.0
JFCountryPicker/0.0.1/0.0.2
JVEmptyElement/0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第五步，下载 pod 的所有版本的 .podspec 文件，从上面的文件按照每行寻找第一段的名字，把后面的所有版本按照上面获取到的 prefix_lengths 的值（例如 AFNetworking 是 a, 7 , 5） &lt;code&gt;/Specs/a/7/5/AFNetworking/{version}/AFNetworking.podspec.json&lt;/code&gt; 一次下载，并保存 etag 为 &lt;code&gt;/Specs/a/7/5/AFNetworking/{version}/AFNetworking.podspec.json.etag&lt;/code&gt;，这个 etag 作用上面已经讲过，如果没有找到的话就会直接报错。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Adding spec repo `trunk` with CDN `https://cdn.cocoapods.org/`
  CDN: trunk Relative path downloaded: CocoaPods-version.yml, save ETag: &amp;quot;031c25b97a0aca21900087e355dcf663-ssl&amp;quot;
  CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local because checking is only perfomed in repo update
  CDN: trunk Relative path downloaded: all_pods_versions_a_7_5.txt, save ETag: &amp;quot;5b32718ecbe82b0ae71ab3c77120213f-ssl&amp;quot;
  CDN: trunk Redirecting from https://cdn.cocoapods.org/Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json to https://raw.githubusercontent.com/CocoaPods/Specs/master/Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json
  CDN: trunk Relative path downloaded: Specs/a/7/5/AFNetworking/0.10.0/AFNetworking.podspec.json, save ETag: W/&amp;quot;a5f00eb1fdfdcab00b89e96bb81d48c110f09220063fdcf0b269290bffc18cf5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cocoapods trunk 源的目录结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.cocoapods
  repo
    trunk
      .url   #=&amp;gt; https://cdn.cocoapods.org/
      Cocoapods-version.yml  # =&amp;gt; 从 https://cdn.cocoapods.org/CocoaPods-version.yml 下载的文件
      Cocoapods-version.yml.etag  # 上一个请求的第一个 etag 值存下来
      all_pods_versions_a_7_5.txt  # 参考上面的备注
      all_pods_versions_a_7_5.txt.etag # 上一个请求的第一个 etag 值存下来
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第六步和老的机制第二步一样同样最终还是会寻找 podspec 里面下载地址去下载，
也就是说&lt;strong&gt;真正 CDN 缓存加速的只有原有 Specs 必要的 podspec 文件，而不会加速 Pod 真正源地址&lt;/strong&gt;，改机制只是减轻了本地更新官方 Specs 源的麻烦以及维护一个巨大的本地文件存储，这也是中心化机制的一个心结。&lt;/p&gt;

&lt;h3 id=&#34;结语&#34;&gt;结语&lt;/h3&gt;

&lt;p&gt;这个机制大大减少了本地需要占一个较大存储的问题，尤其是初次 &lt;code&gt;pod install&lt;/code&gt; 时间长的情况，但 Pod 库本身还是各自的
地址本质上无法解决安装 Pod 消耗时间过长的问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>创建无 Storyboard（xib） 的 macOS NSWindow</title>
      <link>https://icyleaf.com/2019/05/create-macos-nswindow-without-storyboard</link>
      <pubDate>Thu, 23 May 2019 22:45:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2019/05/create-macos-nswindow-without-storyboard</guid>
      <description>

&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;历届 WWDC 众多和 macOS 开发相关的视频中只要涉及到 UI 部分必会牵扯上 Storyboard，它能帮你辅助画 UI，使用 Auto Layout 进行布局，甚至你可以不用写一行代码仅仅使用它和 Core Data 就能完成一个 CURD 的功能。苹果总是极力的推荐所有的开发者（尤其是初学者）使用 Storyboard，它给人最直观的感受，配置参数也都做了调教（有时候开启一个参数需要手敲好多行代码）。&lt;/p&gt;

&lt;p&gt;但总有那么一群人就是不爱使用 Storyboard（比如我），尤其 App 涉及比较多的界面和交互的时候感觉还是代码更可控，团队开发在代码仓库管理上也更为方便。&lt;/p&gt;

&lt;p&gt;何奈在网络上存在的绝大多数的教程和视频都是以 Storyboard 为主，稍不留神可能就忘记设置了哪里，再或者过段时间举一反三的时候总会忘记在 Storyboard 设置了什么而无法实现同样的效果。&lt;/p&gt;

&lt;p&gt;恰好我最近比较闲花了点时间在写 macOS App，过程中体会到了 macOS 和 iOS 两个体系存在了巨大的差异，可能是习惯了 iOS 框架的编码方式就感觉到 macOS 格格不入，想要完成一个在 iOS 上简单的界面但 macOS 上就要想尽各种办法来去实现，迫切期待在马上来临的 WWDC 2019 上宣布新的解决方案。&lt;/p&gt;

&lt;h3 id=&#34;开始教学&#34;&gt;开始教学&lt;/h3&gt;

&lt;p&gt;打开 Xcode 选择 macOS 下面的 Cocoa App 进行下一步，填写好项目名称后勾不勾选 &lt;strong&gt;Use Storyboard&lt;/strong&gt; 都没有关系，勾选就会创建一个 &lt;code&gt;Main.storyboard&lt;/code&gt; 的文件，不勾选也会创建一个 &lt;code&gt;MainMenu.xib&lt;/code&gt; 的文件，选择项目保存的路径就创建好第一个项目了。&lt;/p&gt;

&lt;p&gt;无论默认的是 &lt;code&gt;Main.storyboard&lt;/code&gt; 或 &lt;code&gt;MainMenu.xib&lt;/code&gt; 都会一个 Main Menu 控件这里咱们先不管它，除此之外还会有一个 Window 控件，一个 macOS App 基础的层级关系是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+--------------------------------------------------------------+
|                           NSWindow                           |
|  +--------------------------------------------------------+  |
|  |                    NSViewController                    |  |
|  |  +--------------------------------------------------+  |  |
|  |  |                      NSView                      |  |  |
|  |  +--------------------------------------------------+  |  |
|  +--------------------------------------------------------+  |
+--------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选中 Window 控件后后选择删除（&lt;code&gt;Main.storyboard&lt;/code&gt; 还需要再删除默认生成的 ViewController 控件），删除后样子是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://icyleaf.com/tutorials/macos-app-without-storyboard/001/shot001-xcode-storyboard.png&#34; alt=&#34;Storyboard and xib in Xcode&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由于我们删除了默认的 NSWindow 因此需要在 &lt;code&gt;Appdelegate.swift&lt;/code&gt; 文件创建一个：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Cocoa

@NSApplicationMain
class AppDelegate: NSObject, NSApplicationDelegate {

    // 创建默认的 Window
    lazy var window: NSWindow = {
       let w = NSWindow(contentRect: NSMakeRect(0, 0, 640, 480),
                        styleMask: [.titled, .resizable, .miniaturizable, .closable, .fullSizeContentView],
                        backing: .buffered,
                        defer: false)

        // 设置最小尺寸
        w.minSize = NSMakeSize(320, 240)

        // 打开显示在屏幕的中心位置
        w.center()

        return w
    }()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认的 window 设置好了，我们让他赶紧显示出来吧，在 &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt; 方法添加如下代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func applicationDidFinishLaunching(_ aNotification: Notification) {
    // 设置为 mainWindow 这样我们才能通过下面的代码调用
    window.makeKeyAndOrderFront(nil)

    // 设置 mainWindow 的标题
    NSApplication.shared.mainWindow?.title = &amp;quot;Hello world&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意看上面代码块的备注，这两行代码不能颠倒，否则 &lt;code&gt;NSApplication.shared.mainWindow&lt;/code&gt; 返回的是 &lt;code&gt;nil&lt;/code&gt;，我们来运行一下看看，是不是就能看到一个 640x480 的窗口，标题显示的 hello world&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://icyleaf.com/tutorials/macos-app-without-storyboard/001/shot002-nswindow.png&#34; alt=&#34;NSWindow App&#34; /&gt;&lt;/p&gt;

&lt;p&gt;用鼠标拖拽缩放大小看看是不是到一个保留尺寸就无法再缩小了，这个就是通过代码设置的最小尺寸。虽然 App 可以运行了内容还是空空的，根据上面画出来的层级关系还需要一个 NSViewController 充当 contentViewController，它相当于 iOS 的 rootViewController 这样说应该就很容易理解了吧。&lt;/p&gt;

&lt;p&gt;假设 App 需要完成这样一个功能，界面有一个 Label 和 Button，点击 Button 可以改变 Label 的文字内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+----------------------+          +----------------------+
|                      |          |                      |
|   Click the button   |          |         Yeah!        |
|                      |          |                      |
| +------------------+ | -------&amp;gt; | +------------------+ |
| |     Click me     | |          | |     Click me     | |
| +------------------+ |          | +------------------+ |
|                      |          |                      |
+----------------------+          +----------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们用原生 Auto Layout 布局后的代码是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Cocoa

class ViewController: NSViewController {

    lazy var label: NSTextField = {
        let v = NSTextField(labelWithString: &amp;quot;Press the button&amp;quot;)
        v.translatesAutoresizingMaskIntoConstraints = false

        return v
    }()


    lazy var button: NSButton = {
        let v = NSButton(frame: .zero)
        v.translatesAutoresizingMaskIntoConstraints = false

        return v
    }()

    override func viewDidLoad() {
        super.viewDidLoad()

        view.addSubview(label)
        view.addSubview(button)

        NSLayoutConstraint.activate([
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            label.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: -20),

            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            button.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 20),
            button.heightAnchor.constraint(equalToConstant: 30),
            button.widthAnchor.constraint(equalToConstant: 100)
            ])

        button.title = &amp;quot;Click me&amp;quot;
        button.target = self
        button.action = #selector(onClickme)
    }

    @objc func onClickme(_ sender: NSButton) {
        label.textColor = .red
        label.stringValue = &amp;quot;Yeah!&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码看着不错的样子，还差最后一步把 ViewController 添加到 NSWindow 里吧，返回 &lt;code&gt;AppDelegate.swift&lt;/code&gt; 文件找到上次编辑的 &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt; 方法里面在代码的末尾添加最后的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func applicationDidFinishLaunching(_ aNotification: Notification) {
    // 设置为 mainWindow 这样我们才能通过下面的代码调用
    window.makeKeyAndOrderFront(nil)

    // 设置 mainWindow 的标题
    NSApplication.shared.mainWindow?.title = &amp;quot;Hello world&amp;quot;

    // 设置 contentViewController
    let contentViewController = ViewController() // or ViewController(nibName:nil, bundle: nil)
    window.contentViewController = contentViewController
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;咦？！你这不对啊，&lt;code&gt;NSViewController&lt;/code&gt; 代码在初始化的时候是不能这样的，必须通过 &lt;code&gt;init(coder:)&lt;/code&gt; 或 &lt;code&gt;init(nibName:bundle:)&lt;/code&gt; 这两种方法才行，这样写运行会提示 &amp;ldquo;could not load the nibName: WithoutStoryboard.ViewController in bundle (null).&amp;rdquo; 错误的！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;观察的不错嘛，这点小细节都你发现了，NSViewController 类通常都是通过 &lt;code&gt;init(nibName:bundle:)&lt;/code&gt; 进行初始化来关联 xib 界面，既然我们抛弃了 Storyboard（xib) 那怎么办呢，这里理解 NSViewController 的&lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsviewcontroller&#34;&gt;生命周期&lt;/a&gt; （macOS 10.10 之后版本)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+----------------------------------+   +------------------------------+
|               init               +--&amp;gt;+           loadView()         |
+-----------------+----------------+   +---------------+--------------+
| Storyboard(xib) |      code      |                   |
+----------------------------------+                   v
|  init(coder:)   | init(nibName:  |   +---------------+--------------+
|                 |      bundle:)  |   |          viewDidLoad()       |
+-----------------+----------------+   +---------------+--------------+
                                                       |
                                                       v
+----------------------------------+   +---------------+--------------+
|        viewWillDisappear()       +&amp;lt;--+         viewWillAppear()     |
+-----------------+----------------+   +------------------------------+
                  |                    |    updateViewConstraints()   |
                  |                    |                              |
                  v                    |       viewWillLayout()       |
+-----------------+----------------+   |                              |
|         viewDidDisappear()       |   |        viewDidLayout()       |
+----------------------------------+   +------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生命周期和 iOS 的 UIViewController 也差不多，从上面的生命周期来看只能覆写 loadView 方法才行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: NSViewController {

    override func loadView() {
        // 设置 ViewController 大小同 mainWindow
        guard let windowRect = NSApplication.shared.mainWindow?.frame else { return }
        view = NSView(frame: windowRect)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看了上面代码也就明白了为什么在 &lt;code&gt;AppDelegate.swift&lt;/code&gt; 设置 contentViewController 需要在代码块的末尾添加了吧，如果在最开始添加那就无法获取到 mainWindow 也就无法设置 ViewController 的 frame。这里还有个小提醒 macOS 10.10 之后版本在覆写该方法如果调用了 &lt;code&gt;super.loadView()&lt;/code&gt; 方法就会自动加载同名的 xib 文件&lt;strong&gt;绝对不能填写&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;让我们在运行一次看看？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://icyleaf.com/tutorials/macos-app-without-storyboard/001/shot003-final-app.png&#34; alt=&#34;Final App&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ta-Da! 完成了！&lt;/p&gt;

&lt;h3 id=&#34;结语&#34;&gt;结语&lt;/h3&gt;

&lt;p&gt;这算是一个开篇，后续还会再继续整理，尽请期待。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>申请泰国电子落地签答疑解惑</title>
      <link>https://icyleaf.com/2019/04/apply-thailand-evisa</link>
      <pubDate>Wed, 10 Apr 2019 13:12:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2019/04/apply-thailand-evisa</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;2019-03-28 更新：&lt;/p&gt;

&lt;p&gt;拿着打印的 eVISA 到达曼谷机场后填写玩出入境申请表去专门的 eVISA 通道（可能有路障，工作人员知道是办理 eVISA 会放行）到那边几乎没有人在排队，我们附带的照片（没贴上去）给了也没要（建议最好还是带着），5 分钟时间入境！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3月初购买了去泰国曼谷的机票，泰国的签证自 2018 年末增加了第四种在线申请电子落地签（E-Visa），赶上泰国免签证费延期到 2019 年 4 月底的好事情，还需要收第三方机构的手续费（这个后面展开）一家三口办下来比淘宝找中介要便宜好多，也不用落地排 1-2 小时队当场办落地签（据说落地入境走的是独立通道）&lt;/p&gt;

&lt;p&gt;签证办理渠道对比表&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;渠道&lt;/th&gt;
&lt;th&gt;办理机构&lt;/th&gt;
&lt;th&gt;费用&lt;/th&gt;
&lt;th&gt;停留时长&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;自己递签&lt;/td&gt;
&lt;td&gt;泰国大使馆&lt;/td&gt;
&lt;td&gt;签证费&lt;/td&gt;
&lt;td&gt;60天&lt;/td&gt;
&lt;td&gt;资料要求多，耗时 7 天，婴儿同大人&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;代办&lt;/td&gt;
&lt;td&gt;旅行社或淘宝&lt;/td&gt;
&lt;td&gt;230 人民币签证费+中介费&lt;/td&gt;
&lt;td&gt;60天&lt;/td&gt;
&lt;td&gt;资料要求少，耗时 7 天，婴儿同大人&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;落地签&lt;/td&gt;
&lt;td&gt;机场入境处&lt;/td&gt;
&lt;td&gt;签证费&lt;/td&gt;
&lt;td&gt;60天&lt;/td&gt;
&lt;td&gt;排队办理耗时 1-2 小时&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;电子落地签&lt;/td&gt;
&lt;td&gt;网站办理&lt;/td&gt;
&lt;td&gt;签证费+手续费 525 泰铢&lt;/td&gt;
&lt;td&gt;15天，不可延期&lt;/td&gt;
&lt;td&gt;资料整理比较蛋疼，下签时间未知&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上面三种要么要么自己跑大使馆，要么需要费用比较高，办理电子落地签每人也就收 525 泰铢。当时查了一些资料说是申请有好多坑，如果被拒签有一次修改的机会，再被拒签不退钱。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一句话总结：是 2019 年 4 月底前最佳申请途径，费用低廉只要资料没有任何问题出发前肯定下签。唯一缺点是只有 15 天停留期且不可延期。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;申请攻略&#34;&gt;申请攻略&lt;/h3&gt;

&lt;p&gt;泰国电子落地签申请入口：&lt;a href=&#34;https://www.evisathailand.com/&#34;&gt;https://www.evisathailand.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通过我申请的过程来看我猜这是一个第三方机构委托，他们只负责资料的审核，通过后再递交泰国出入境管理局，因此是商业域名。具体申请步骤大家参考&lt;a href=&#34;https://bbs.qyer.com/thread-3121710-1.html&#34;&gt;2019泰国电子落地签申请亲妈式教学&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;姓名填写参照护照（名是多字的中间不要有空格）&lt;/li&gt;
&lt;li&gt;上传附件支持 PNG/JPG/GIF/PDF 大于 100KB 总体小于 2MB&lt;/li&gt;
&lt;li&gt;机票行程单和酒店预订单建议是英文版本&lt;/li&gt;
&lt;li&gt;机票行程单往返在一个 PDF 文件的上传两次&lt;/li&gt;
&lt;li&gt;酒店预订单接受 Booking 和 Airbnb（在邮件酒店预订单有打印功能，跳转网页后打开浏览器隐私模式切换英文打印就是纯英文版本）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;泰国电子落地签网站也在不断版本迭代中，以上办理中可能出现的问题后续可能会改善。&lt;/p&gt;

&lt;h3 id=&#34;查询进度&#34;&gt;查询进度&lt;/h3&gt;

&lt;p&gt;网址：&lt;a href=&#34;https://www.evisathailand.com/check&#34;&gt;https://www.evisathailand.com/check&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;输入 Application id 和护照号即可。&lt;/p&gt;

&lt;p&gt;技术党这么做：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl &#39;https://www.evisathailand.com/check?q=check&#39; --data &#39;reference_code={application_id}&amp;amp;passport_number={passport_number}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析结果用 html 解析器解析 css 查询路径 &lt;code&gt;.container ul li&lt;/code&gt; 数组里 h5 是标题，input 的 value 值为数值。&lt;/p&gt;

&lt;p&gt;我是用了一个 telegram bot 可以发送命令查询结果，你也可以直接写一个定时脚本有结果了直接发邮件。&lt;/p&gt;

&lt;h3 id=&#34;咨询渠道&#34;&gt;咨询渠道&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;发英文邮件至 &lt;code&gt;contact@evisathailand.com&lt;/code&gt; 回复频率未知，我是 6 天后得到的官腔答复。&lt;/li&gt;
&lt;li&gt;加微信 &lt;code&gt;泰国电子落地签eVISA&lt;/code&gt; 直接中文留言，回复频率几分钟内繁体中文官腔回复（我猜又是一个客服委托机构）。&lt;/li&gt;
&lt;li&gt;泰国电子落地签网站最底部 &lt;code&gt;LIVE CHAT 即时聊天&lt;/code&gt; 英文沟通，秒回复，当场给你审查资料并递交给泰国出入境管理局。（可能需要翻墙）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;何时下签&#34;&gt;何时下签&lt;/h3&gt;

&lt;p&gt;办理电子签除了便宜以外，我另外看中的据说是 24 - 48 小时下签，然而我太年轻&amp;hellip;&lt;/p&gt;

&lt;p&gt;我是 3 月 28 日晚上申请，真正下签是 4 月 10 日，耗时 13 天，期间我尝试了三种咨询渠道，只有最后一种最有效，资料审核后递交泰国出入境管理局后端状态是不可催的，我是从他们审查后递交泰国出入境管理局又花了 3 天才拿到 evisa，不过他们客服给我的答复是只要我这递交泰国出入境管理局了肯定在你出发前给你下签。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>华擎 Z390 Gaming ITX 黑苹果安装教程</title>
      <link>https://icyleaf.com/2019/03/asrock-z390-gaming-itx-install-hackintosh-tutorial</link>
      <pubDate>Thu, 28 Mar 2019 17:12:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2019/03/asrock-z390-gaming-itx-install-hackintosh-tutorial</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;2019-04-01 更新：&lt;/p&gt;

&lt;p&gt;更新疑惑解答无线网络慢的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;春节前购入一台式机挖坑要写黑苹果安装教程，本来计划是 3 月初整理完毕期间赶上辞职彻底放飞自我，加上无法忍受编辑视频的龟毛速度购入一块 rx580 矿卡使用一周后良好，立马开始填坑。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;封图是博通网卡模块替换原由的分解图。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;硬件清单&#34;&gt;硬件清单&lt;/h2&gt;

&lt;p&gt;参见 &lt;a href=&#34;http://icyleaf.com/2019/01/itx-coffee-lake-hackintosh-build-for-4k-video-editing/&#34;&gt;攒了一台 4K 视频剪辑黑苹果&lt;/a&gt;。更新了后续更换的硬件和说明。&lt;/p&gt;

&lt;h2 id=&#34;名词解释&#34;&gt;名词解释&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BIOS&lt;/code&gt; - &lt;em&gt;&lt;strong&gt;B&lt;/strong&gt;asic &lt;strong&gt;I&lt;/strong&gt;nput/&lt;strong&gt;O&lt;/strong&gt;utput &lt;strong&gt;S&lt;/strong&gt;ystem&lt;/em&gt; 缩写，它是主板上标准的固件接口，负责在开机时做硬件启动和检测等工作，并且担任操作系统控制硬件时的中介角色。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(U)EFI&lt;/code&gt; - &lt;em&gt;(&lt;strong&gt;U&lt;/strong&gt;nified) &lt;strong&gt;E&lt;/strong&gt;xtensible &lt;strong&gt;F&lt;/strong&gt;irmware &lt;strong&gt;I&lt;/strong&gt;nterface&lt;/em&gt; 缩写，它是代替 BIOS 的升级方案，(U)EFI 是模块化，支持图形化界面和鼠标操作。UEFI 是基于 Intel EFI 1.1 发展而来的归属国际组织管理，本质上还是 EFI。&lt;a href=&#34;https://www.zhihu.com/question/21672895&#34;&gt;BIOS 和 UEFI 的区别&lt;/a&gt;，它会以一个名为 EFI 独立分区存在里面是其配置数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACPI&lt;/code&gt; - &lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;dvanced &lt;strong&gt;C&lt;/strong&gt;onfiguration and &lt;strong&gt;P&lt;/strong&gt;ower &lt;strong&gt;I&lt;/strong&gt;nterface&lt;/em&gt; 缩写。它是 BIOS 中&amp;rdquo;电源管理”和“配置管理”的接口，它由很多表组成，包括 RSDP, SDTH, RSDT, FADT, FACS, DSDT, SSDT, MADT, SBST, XSDT, ECDT, SLIT, SRAT 等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DSDT&lt;/code&gt; - &lt;em&gt;The &lt;strong&gt;D&lt;/strong&gt;ifferentiated &lt;strong&gt;S&lt;/strong&gt;ystem &lt;strong&gt;D&lt;/strong&gt;escription &lt;strong&gt;T&lt;/strong&gt;able&lt;/em&gt; 缩写，它是主板 BIOS 中 ACPI 的一个表，包含了所有除基本系统以外所有不同设备的信息，也就是每台计算机设备的基本系统是相同的，而不相同的设备用 DSDT 来描述。macOS 不完整支持 ACPI 规范，仅支持它的子集 DSDT。因此这个在黑苹果配置中会经常提到。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AML&lt;/code&gt; - &lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;CPI &lt;strong&gt;M&lt;/strong&gt;achine &lt;strong&gt;L&lt;/strong&gt;anguage&lt;/em&gt; 缩写，它是 ACPI 描述语言，用来编辑 ACPI 各种表的代码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kext(s)&lt;/code&gt; - &lt;em&gt;&lt;strong&gt;K&lt;/strong&gt;ernel &lt;strong&gt;Ext&lt;/strong&gt;ension&lt;/em&gt; 缩写，你可以简单的理解为它是 macOS 的驱动文件（内核扩展）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clover&lt;/code&gt; - 我们使用的启动引导器。Mac 主机使用了自定义固件来启动 macOS。 PC 硬件本身无法做到而 Clover 可以帮我们实现。同时它还提供 kext 注入，ACPI 重命名，kext 补丁和一些其他功能。更多请看黑果小兵的&lt;a href=&#34;http://blog.daliansky.net/clover-user-manual.html&#34;&gt;使用教程&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.plist&lt;/code&gt; - 这个文件用来告诉 Clover 该怎么去做。它是一个 XML 格式的属性列表文件（有点类似 HTML）其中最核心的部分是配置黑苹果才能正常运行。你可以使用文本编辑器或者 Clover Configuration App 编辑。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;多说一句，有时候大家再说到 BIOS 实际上是指 UEFI，只不过为了兼容性主板会在 UEFI 中兼容 BIOS。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;安装环境&#34;&gt;安装环境&lt;/h2&gt;

&lt;p&gt;本教程提到的版本信息，Clover 配置和 Kexts 均公开到个人 Github 仓库：&lt;a href=&#34;https://github.com/icyleaf/EFI-ASRock-Z390-Phantom-Gaming-ITX&#34;&gt;EFI-ASRock-Z390-Phantom-Gaming-ITX&lt;/a&gt; 。下面提到环境信息后续变化以 Git 仓库为准。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;macOS 版本：Mojave 10.14.3&lt;/li&gt;
&lt;li&gt;BIOS 版本: 1.5.0&lt;/li&gt;
&lt;li&gt;Clover 版本：v2.4k r4910&lt;/li&gt;
&lt;li&gt;Clover Configuration 版本：v5.4.1.1&lt;/li&gt;
&lt;li&gt;Kext Utility 版本：v2.6.6&lt;/li&gt;
&lt;li&gt;hackintool 版本: v2.1.5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;安装成果&#34;&gt;安装成果&lt;/h3&gt;

&lt;h4 id=&#34;完美&#34;&gt;完美&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 显卡（DisplayPort 接显示器）

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Intel UHD630 核显&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; AMD RX580&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 声卡(Realtek ALC1220)

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 主板后置&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 机箱前置&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; DisplayPort 声音输出&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 睡眠/唤醒&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 有线网卡&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 无线 WiFi&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 蓝牙

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 耳机&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Trackpad 2&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Airdrop&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Handoff&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 所有 USB 插口&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;无法使用&#34;&gt;无法使用&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;雷电 3 口&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装前的准备工作&#34;&gt;安装前的准备工作&lt;/h2&gt;

&lt;h3 id=&#34;配置驱动-kexts&#34;&gt;配置驱动（Kexts）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;启动必备

&lt;ul&gt;
&lt;li&gt;FakeSMC.kext&lt;/li&gt;
&lt;li&gt;Lilu.kext&lt;/li&gt;
&lt;li&gt;WhateverGreen.kext&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;显卡

&lt;ul&gt;
&lt;li&gt;NoVPAJpeg.kext（独立显卡需要，解决无法预览和打开 JPG 图片）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;声卡

&lt;ul&gt;
&lt;li&gt;AppleALC.kext&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有线网卡

&lt;ul&gt;
&lt;li&gt;IntelMausiEthernet.kext&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;无线网卡

&lt;ul&gt;
&lt;li&gt;AirportBrcmFixup.kext&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;蓝牙(配合 Kext Utility/KextBeast 安装到系统)

&lt;ul&gt;
&lt;li&gt;BrcmFirmwareRepo.kext&lt;/li&gt;
&lt;li&gt;BrcmPatchRAM2.kext&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;黑苹果安装启动盘&#34;&gt;黑苹果安装启动盘&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你的 OS 是 macOS 请参考如下步骤，否则请去黑果小兵博客下载 macOS 镜像并自行烧录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;准备一个 8G 以上容量的 U 盘使用系统自带磁盘工具 App 格式化为 GUID 分区图 MacOS 扩展（日志式）分区并重命名 USB，接着把从 App Store 下载 macOS Majave 10.14 安装 App，使用其安装包命令创建启动安装盘：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo &amp;quot;/Applications/Install macOS Mojave.app/Contents/Resources/createinstallmedia&amp;quot; --volume /Volumes/USB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一步会花费 30-40 分钟的时间期间可能也没用任何状态更新，请耐心等待，等到完成后启动盘就制作完成了。&lt;/p&gt;

&lt;h3 id=&#34;安装-clover-到启动-u-盘&#34;&gt;安装 Clover 到启动 U 盘&lt;/h3&gt;

&lt;p&gt;上一步获得了启动 U 盘，在保证没有推出（Eject）和拔出 U 盘的情况下还需要讲 Clover 安装到上面。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;安装 &lt;a href=&#34;https://github.com/Dids/clover-builder/releases&#34;&gt;Clover&lt;/a&gt;（建议使用上面我采用的版本）点击下一步至看到 “Change Install Location&amp;rdquo; 选择启动 U 盘&lt;/li&gt;
&lt;li&gt;点击左下角的 &amp;ldquo;Customize&amp;rdquo; 开始定制特定的驱动：

&lt;ul&gt;
&lt;li&gt;勾选 &amp;ldquo;仅安装 UEFI 开机版本（Clover for UEFI booting only）&amp;rdquo;&lt;/li&gt;
&lt;li&gt;勾选 &amp;ldquo;安装 Clover 到 EFI 系统区（Install Clover in the ESP）&amp;rdquo;&lt;/li&gt;
&lt;li&gt;勾选 &amp;ldquo;UEFI drivers&amp;rdquo; 下面的 &amp;ldquo;ApfsDriverLoader-64.efi&amp;rdquo;, &amp;ldquo;AptioMemoryFix-64.efi&amp;rdquo;, &amp;ldquo;EmuVariableUefi-64&amp;rdquo;, &amp;ldquo;FSInject-64.efi&amp;rdquo;&lt;/li&gt;
&lt;li&gt;勾选 &amp;ldquo;安装 RC scripts 到目标磁盘&amp;rdquo;（启动 U 盘不用勾选，安装成后再次安装 Clover 到硬盘时需要勾选）&lt;/li&gt;
&lt;li&gt;其他的选项都不勾选&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;清理 EFI 目录

&lt;ul&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://mackie100projects.altervista.org/download-clover-configurator/&#34;&gt;Clover Configurator&lt;/a&gt; 挂载 EFI 分区&lt;/li&gt;
&lt;li&gt;打开 EFI 分区删除 &amp;ldquo;EFI/CLOVER&amp;rdquo; 下面的 &amp;ldquo;driver64&amp;rdquo; 目录（使用 UEFI 启动不需要）&lt;/li&gt;
&lt;li&gt;把下载的必备驱动全部复制到 &amp;ldquo;EFI/CLOVER/kexts/Ohter&amp;rdquo; 目录下面（该目录存在其他的 kexts 的话就全部删除掉）&lt;/li&gt;
&lt;li&gt;删除 &amp;ldquo;EFI/CLOVER/kexts/10.x.x&amp;rdquo; 目录&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果使用 USB3 安装，你可能需要 &lt;a href=&#34;https://www.tonymacx86.com/attachments/aaron-usb-config-zip.378128/&#34;&gt;aaron-usb-config.aml&lt;/a&gt; 补丁来激活主板上的
USB3 端口&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;替换原有网络-蓝牙模块&#34;&gt;替换原有网络/蓝牙模块&lt;/h3&gt;

&lt;p&gt;原有 Intel® Wireless-AC 9560 无线模块（集成无线 802.11ac 方案并提供蓝牙 5.0 和 2x2 802.11ac 2.4/5Ghz Wi-Fi 模块）在主板后部面部的顶部，需要拧下前后两颗螺丝，再拔掉 CMOS 电池的插头，嗯，没错尾部圆圆被塑料包裹的是 CMOS 电池。拆下模块后需要再把金属遮蔽盒拆下来就看到 Intel 无线模块的样子，小心把上面的两个天线拔掉再把模块也拆下放一边，我就得到了框架。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i3/394188259/O1CN01A7yd1U2AsfcpqsQJo_!!394188259.jpg&#34; alt=&#34;m2-vs-boardcom-vs-dadapter&#34; /&gt;&lt;/p&gt;

&lt;p&gt;避免广告的嫌疑，淘宝自行搜 &lt;code&gt;BCM94360CS2 NGFF M.2 转接卡&lt;/code&gt;，买回来的博通网卡 + 转接卡可能是固定好的，我们需要把它拆开。转接卡要固定在框架上面后再把博通网卡插上拧上螺丝，框架上的两个天线随便接博通顶部两侧的插口上。转接卡高度超出框架最初拆下来的金属遮蔽盒不能再装回去。最好把框架固定到主板上就完成了（查看&lt;a href=&#34;http://icyleaf.com/images/install-boardcom-module-to-motherboard.jpg&#34;&gt;步骤分解图&lt;/a&gt;）。&lt;/p&gt;

&lt;h3 id=&#34;bios&#34;&gt;BIOS&lt;/h3&gt;

&lt;p&gt;开机 F2 进入 BIOS 再按 F6 切换高级模式，至少需要做如下修改具体情况还需要看硬件情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;高级（Advanced） &amp;gt; 芯片配置（Chipset Configuration） &amp;gt; VT-d -&amp;gt; Disabled&lt;/li&gt;
&lt;li&gt;高级（Advanced） &amp;gt; USB 配置（USB Configuration） &amp;gt; XHCI Hand-off -&amp;gt; Enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;安装黑苹果&#34;&gt;安装黑苹果&lt;/h3&gt;

&lt;p&gt;以&lt;a href=&#34;https://www.tonymacx86.com/threads/guide-asrock-z390-phantom-gaming-itx-ac-i9-9900k-rx-580.268992/&#34;&gt;ASRock Z390 Phantom Gaming-ITX/ac, i9-9900K, RX 580&lt;/a&gt;为基础进行安装。&lt;/p&gt;

&lt;p&gt;插入 U 盘到机箱后部主板的插口开机 F12 选择启动 U 盘（如果没有认出来试试其他插口），接着你会看到 Clover 的启动引导界面选择 U 盘启动，之后就是标准的 macOS 安装步骤（格式化硬盘分区为 GUID 分区图 MacOS 扩展（日志式）等等），我就不再多说，其中安装过程中会需要重启，重启进去 Clover 引导界面时选择硬盘启动，而不是启动 U 盘。&lt;/p&gt;

&lt;p&gt;黑苹果安装好再次安装 Clover 这次是安装到硬盘上面（步骤和勾选选项同上）。&lt;/p&gt;

&lt;h3 id=&#34;clover-配置&#34;&gt;Clover 配置&lt;/h3&gt;

&lt;p&gt;根据我的 &lt;a href=&#34;https://github.com/icyleaf/EFI-ASRock-Z390-Phantom-Gaming-ITX/blob/master/EFI/CLOVER/config.plist&#34;&gt;config.plist&lt;/a&gt; 进行参考配置：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用 Clover Configurator 挂载硬盘的 EFI 分区&lt;/li&gt;
&lt;li&gt;复制启动 U 盘的 driver64UEFI 和 kexts 目录到硬盘对应位置&lt;/li&gt;
&lt;li&gt;使用 Clover Configurator 打开 &amp;ldquo;EFI/CLOVER/config.plist&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;在 SMBIOS 选项界面生成 Serial Number 和 SMUUID（点击 Generate New）&lt;/li&gt;
&lt;li&gt;点击右侧 &amp;ldquo;Check Coverage&amp;rdquo; 会打开一个浏览器输入验证码（可能需要翻墙）确保 Serial Number 是&lt;strong&gt;无效的&lt;/strong&gt;，这样才能伪装这台机器是台新机器。如果是有效的话就再次重新生成即可。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intel Coffee Lake 架构&lt;a href=&#34;https://hackintosh.gitbook.io/-r-hackintosh-vanilla-desktop-guide/config.plist-per-hardware/coffee-lake&#34;&gt;通用配置&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;无线-wifi-及蓝牙驱动&#34;&gt;无线（WIFI）及蓝牙驱动&lt;/h3&gt;

&lt;p&gt;对于所谓的“免驱”博通网卡其实并不代表了不需要 kext 的帮助，尤其是我自以为是 Apple 钦点的插上就可以用结果毛都没认出来。按照 tonymacx86 &lt;a href=&#34;https://www.tonymacx86.com/threads/broadcom-wifi-bluetooth-guide.242423/&#34;&gt;无线及蓝牙安装教程&lt;/a&gt; 操作
没有什么大的问题，直接使用 把 &lt;code&gt;Lilu.kext&#39;,&lt;/code&gt;AirportBrcmFixup.kext&lt;code&gt;,&lt;/code&gt;BrcmFirmwareRepo.kext&lt;code&gt;和&lt;/code&gt;BrcmPatchRAM2.kext&lt;code&gt;安装到&lt;/code&gt;/Library/Extensions/` 路径下重启即可。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里多说一句，理论上把上面的 kexts 放在 EFI 下也是可用的，放在 &lt;code&gt;/Library/Extensions/&lt;/code&gt; 下是为了防止  Clover 加载 kexts 失败，直接缓存到系统中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;疑难杂症&#34;&gt;疑难杂症&lt;/h3&gt;

&lt;h4 id=&#34;u-盘无法引导&#34;&gt;U 盘无法引导&lt;/h4&gt;

&lt;p&gt;使用 USB 3.0 的 U 盘需要打补丁才能使用，tonymacx86 的 &lt;a href=&#34;https://www.tonymacx86.com/threads/guide-asrock-z390-phantom-gaming-itx-ac-i9-9900k-rx-580.268992/&#34;&gt;ammulder&lt;/a&gt; 提供了补丁下载 aaron-usb-config.zip（首帖的末尾） 解压缩后把里面的文件复制到放到 &lt;code&gt;EFI/CLOVER/ACPI/patched/&lt;/code&gt; 目录下面。&lt;/p&gt;

&lt;h4 id=&#34;引导卡在-apfs-module-init-引导使用-verbose-模式提示该问题&#34;&gt;引导卡在 &lt;code&gt;apfs_module_init&lt;/code&gt; （引导使用 verbose 模式提示该问题）&lt;/h4&gt;

&lt;p&gt;这个问题是说华擎 BIOS 升级至 1.3 版后 Device(RTC) 没有初始化变量使得 OSX DSDT 解析异常造成的。如果这种方式对你也不管用的话只能降级 BIOS 到 1.2 版本。&lt;/p&gt;

&lt;p&gt;tonymacx86 的 &lt;a href=&#34;https://www.tonymacx86.com/threads/asrock-z390-phantom-gaming-itx-ac.265245/#post-1854444&#34;&gt;pupin&lt;/a&gt; 给出了解决方案，需要在 config.plist 的 ACPI\DSDT\Patches 数组下面添加：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dict&amp;gt;
  &amp;lt;key&amp;gt;Comment&amp;lt;/key&amp;gt;
  &amp;lt;string&amp;gt;Fix AsRock Z390 BIOS DSDT Device(RTC) bug. If BIOS &amp;gt; 1.2&amp;lt;/string&amp;gt;
  &amp;lt;key&amp;gt;Disabled&amp;lt;/key&amp;gt;
  &amp;lt;false/&amp;gt;
  &amp;lt;key&amp;gt;Find&amp;lt;/key&amp;gt;
  &amp;lt;data&amp;gt;
  oAqTU1RBUwE=
  &amp;lt;/data&amp;gt;
  &amp;lt;key&amp;gt;Replace&amp;lt;/key&amp;gt;
  &amp;lt;data&amp;gt;
  oAqRCv8L//8=
  &amp;lt;/data&amp;gt;
&amp;lt;/dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者使用 Clover Configuration 在 DSDT 的 Patches 单独打一个补丁，Comment 为 &lt;code&gt;Fix AsRock Z390 BIOS DSDT Device(RTC) bug. If BIOS &amp;gt; 1.2&lt;/code&gt;，Find 为 &lt;code&gt;A00A9353 54415301&lt;/code&gt;，Replace 为 &lt;code&gt;A00A910A FF0BFFFF&lt;/code&gt;、&lt;/p&gt;

&lt;h4 id=&#34;核显-uhd-630-花屏&#34;&gt;核显（UHD 630）花屏&lt;/h4&gt;

&lt;p&gt;这是闪屏的解决方案，待测试：安装好之后能驱动 4K@60Hz 但是闪屏，其实还是显卡驱动的问题，爬帖发现改机型就可以，于是我试了iMac 18,1、iMac 17,3、iMac 17,1等机型仍然闪屏，期间重启了很多次，甚是烦恼。继续爬帖看到某位网友说将SMBIOS里面的信息全部删掉只保留 ProductName 即可，试了下果然起作用了，再也不闪了。后来才得知原理就是 Clover 会根据机型自己推算剩下的值，所以能正常驱动。&lt;/p&gt;

&lt;h4 id=&#34;核显插-hdmi-显示器黑屏无反应&#34;&gt;核显插 HDMI 显示器黑屏无反应&lt;/h4&gt;

&lt;p&gt;由于我直接使用的 DP 接口没有遇到该问题，请参考如下链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.daliansky.net/CoffeeLake-UHD-630-black-screen-direct-bright-screen-and-correct-adjustment-of-brightness-adjustment.html&#34;&gt;http://blog.daliansky.net/CoffeeLake-UHD-630-black-screen-direct-bright-screen-and-correct-adjustment-of-brightness-adjustment.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tonymacx86.com/threads/guide-general-framebuffer-patching-guide-hdmi-black-screen-problem.269149/&#34;&gt;https://www.tonymacx86.com/threads/guide-general-framebuffer-patching-guide-hdmi-black-screen-problem.269149/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;关于本机-cpu-信息显示-unknown&#34;&gt;关于本机 CPU 信息显示 Unknown&lt;/h4&gt;

&lt;p&gt;macOS 没有支持 9 代 CPU 这里会显示 Unknown 属于正常情况不影响使用，假若你特别想要修改的话请看这里：&lt;a href=&#34;https://www.idownloadblog.com/2017/01/13/how-to-modify-about-this-mac-hackintosh/&#34;&gt;https://www.idownloadblog.com/2017/01/13/how-to-modify-about-this-mac-hackintosh/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;显示器的声音无法识别和输出&#34;&gt;显示器的声音无法识别和输出&lt;/h4&gt;

&lt;p&gt;如果你安装了 VoodooHDA.kext 请删除，默认 AppleALC.kext 即可驱动，另外需要注意的是机箱前置和后置声音输出无法同时使用。&lt;/p&gt;

&lt;h4 id=&#34;机箱-usb-无法识别&#34;&gt;机箱 USB 无法识别&lt;/h4&gt;

&lt;p&gt;macOS 10.11 之后由于 Apple USB 驱动重写后造成默认 USB 端口映射会出现不正常需要 DSDT 来打补丁，具体的可参考相关教程。我直接采用的现成的 DSDT 文件可把 &lt;a href=&#34;https://github.com/icyleaf/EFI-ASRock-Z390-Phantom-Gaming-ITX/raw/master/EFI/CLOVER/ACPI/patched/SSDT-UIAC-ALL.aml&#34;&gt;SSDT-UIAC-ALL.aml&lt;/a&gt; 文件放到 EFI/CLOVER/ACPI/patches 下面接口，或者使用 hackintool 工具和&lt;a href=&#34;https://github.com/bydavy/EFI-ASRock-Z390-Phantom-Gaming-data&#34;&gt;模板文件&lt;/a&gt;自己尝试定制。&lt;/p&gt;

&lt;h4 id=&#34;使用博通-bcm94360cs2-无法使用蓝牙&#34;&gt;使用博通 BCM94360CS2 无法使用蓝牙&lt;/h4&gt;

&lt;p&gt;原因可能有两个原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;上面提到的 &lt;code&gt;BrcmFirmwareRepo.kext&lt;/code&gt; 和 &lt;code&gt;BrcmPatchRAM2.kext&lt;/code&gt; 这两个驱动需要使用 &lt;a href=&#34;http://cvad-mac.narod.ru/index/0-4&#34;&gt;Kext Utility&lt;/a&gt; 或 &lt;a href=&#34;https://www.tonymacx86.com/resources/kextbeast-2-0-2.399/&#34;&gt;KextBeast&lt;/a&gt; 安装到系统驱动目录。(推荐使用前者更简单，后者可能需要注册 tonymacx86 才可以下载)&lt;/li&gt;
&lt;li&gt;第一步已经完成还不能用的话，那就是 USB 的 DSDT 映射文件出问题了，使用上面&lt;strong&gt;机箱 USB 无法识别&lt;/strong&gt;提到的文件即可解决。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;无线网络-wifi-速度特别慢&#34;&gt;无线网络（WIFI）速度特别慢&lt;/h4&gt;

&lt;p&gt;我在写完本教程后让我遇到的诡异问题，我是双系统在 Windows 下无线网络是正常的。经过这几天的分析和推友大神 &lt;a href=&#34;https://twitter.com/shellexy/status/1112272600141582337&#34;&gt;@shellexy&lt;/a&gt; 的帮助下，总结解决方案如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果你是唯一的黑苹果系统，那么请在&amp;rdquo;系统偏好设置&amp;rdquo;的&amp;rdquo;节能&amp;rdquo;取消勾选&amp;rdquo;唤醒以供网络访问&amp;rdquo;&lt;/li&gt;
&lt;li&gt;如果你是 Windows 和黑苹果双系统，完成上面一步后你还需要在 Windows 系统资源管理器 &amp;ldquo;管理&amp;rdquo; 的 &amp;ldquo;设备管理器&amp;rdquo; 找到博通无线模块切换到最后一个选项卡取消勾选”允许计算机关闭此设备以节约电源”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果上面两个方法都无效的话可以再试试：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;黑苹果系统是否开启了无线网卡随机化 MAC 地址，尝试关闭&lt;/li&gt;
&lt;li&gt;更改 WIFI 天线的方向，如果带线的天线那就尝试换换位置。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;无法登录-app-store-或登录后无法下载-app&#34;&gt;无法登录 App Store 或登录后无法下载 App&lt;/h4&gt;

&lt;p&gt;请尝试如下操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;清除 &lt;code&gt;$TMPDIR../C/com.apple.appstore&lt;/code&gt; 目录下的所有临时文件&lt;/li&gt;
&lt;li&gt;config.plist 保留三个 SMBIOS 后重启，重新登录 iCloud 账户&lt;/li&gt;
&lt;li&gt;进系统设置移除现有网络所有配置并重启后重新添加&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;其他疑难杂症&#34;&gt;其他疑难杂症&lt;/h4&gt;

&lt;p&gt;这里有个其他博主分享的总结&lt;a href=&#34;https://www.bugprogrammer.me/2018/11/05/Z390+9900K_Hackintosh.html&#34;&gt;Hackintosh for ASRock Z390 Phantom Gaming-ITX/ac+i9-9900K相关问题解决方案&lt;/a&gt; 可以看看有没有你遇到的，倘若都没有发现也可以给我&lt;a href=&#34;https://github.com/icyleaf/EFI-ASRock-Z390-Phantom-Gaming-ITX/issues/new&#34;&gt;提 Issue&lt;/a&gt; 我会尝试帮助你。&lt;/p&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kancloud.cn/chandler/mac_os/480611&#34;&gt;Mac OS 之程序员&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.daliansky.net/clover-user-manual.html&#34;&gt;clover使用教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackintosh.gitbook.io/-r-hackintosh-vanilla-desktop-guide&#34;&gt;Hackintosh Vanilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://macpc.hidemess.com/?thread-145.htm&#34;&gt;ASRock華擎Z370M-ITX/AC集成顯卡10.14EFI分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://catty-house.blogspot.com/2018/10/hackintosh.html&#34;&gt;安装黑苹果教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tonymacx86.com/threads/guide-asrock-z390-phantom-gaming-itx-ac-i9-9900k-rx-580.268992&#34;&gt;[Guide] ASRock Z390 Phantom Gaming-ITX/ac, i9-9900K, RX 580&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tonymacx86.com/threads/success-asrock-z390-phantom-gaming-6-i7-9700k-amd-vega-56.270501/&#34;&gt;[Success] ASRock Z390 Phantom Gaming 6 - i7 9700K - AMD Vega 56&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tonymacx86.com/threads/asrock-z390-phantom-gaming-itx-ac.265245/#post-1854444&#34;&gt;ASRock Z390 Phantom Gaming-ITX/ac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackintosh-forum.de/forum/thread/40613-1st-hackintosh-beginner-asrock-z390-phantom-gaming-itx-ac/&#34;&gt;ASROCK Z390 PHANTOM GAMING-ITX/AC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>攒了一台 4K 视频剪辑黑苹果</title>
      <link>https://icyleaf.com/2019/01/itx-coffee-lake-hackintosh-build-for-4k-video-editing</link>
      <pubDate>Wed, 30 Jan 2019 10:30:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2019/01/itx-coffee-lake-hackintosh-build-for-4k-video-editing</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2020-03-17 更新&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;去年双十一 900 多升级了西数 1T 黑盘 SSD；原先的三星 970 EVO 250G 改了 Windows 系统；显卡稳定运行没有翻车，从 Pr 转为达芬奇基本上渲染利用 GPU 效果还是很不错的。macOS 系统也一路升级到了 10.15.3。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2019-05-29 更新&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;购入矿卡显卡整 2 个月的时间目前没有翻车，macOS 下用于视频剪辑速度确实快了很多！在 Windows 用显卡超频检测风扇偶尔会提示风扇有问题但玩 Apex 英雄最高画质渲染除了显卡风扇噪音比较大以外没有任何问题。一般来说矿卡日常使用没有太大问题，后续会考虑换个显卡风扇。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2019-03-28 更新&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;购入独立显卡蓝宝石 RX580 8G 1411MHz Nitro+ 超白金(矿卡），更新相关内容，尾部加上&lt;a href=&#34;http://icyleaf.com/2019/03/asrock-z390-gaming-itx-install-hackintosh-tutorial/&#34;&gt;黑苹果安装教程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2019-02-18 更新&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;修改无线网卡的最终选择和价格，更新博通网卡部分的内容。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;装机清单&#34;&gt;装机清单&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;台式机借鉴国外 $1000k 攒机思路在不考虑显示器预算为 6000 元人民币。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;品牌型号&lt;/th&gt;
&lt;th&gt;价格&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Intel i7 9700k&lt;/td&gt;
&lt;td&gt;2550&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;主板&lt;/td&gt;
&lt;td&gt;华擎 Z390 Phantom Gaming itx/ac&lt;/td&gt;
&lt;td&gt;1399&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;散热器&lt;/td&gt;
&lt;td&gt;九州风神 船长 240 EX White RGB&lt;/td&gt;
&lt;td&gt;453&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;海盗船 Vengeance LPX DDR4 3000 16G x 1&lt;/td&gt;
&lt;td&gt;719&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SSD&lt;/td&gt;
&lt;td&gt;三星 970 EVO 250G&lt;/td&gt;
&lt;td&gt;489&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;机箱&lt;/td&gt;
&lt;td&gt;追风者 215P ITX 侧透 RGB&lt;/td&gt;
&lt;td&gt;489&lt;/td&gt;
&lt;td&gt;支持大风冷和全尺寸显卡&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;电源&lt;/td&gt;
&lt;td&gt;讯景 XTR550&lt;/td&gt;
&lt;td&gt;354&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;无线网卡/蓝牙&lt;/td&gt;
&lt;td&gt;博通 BCM94360CS2&lt;/td&gt;
&lt;td&gt;95 元&lt;/td&gt;
&lt;td&gt;需转接卡&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;显卡&lt;/td&gt;
&lt;td&gt;华硕 RX560&lt;br /&gt;蓝宝石 RX580 8G 1411MHz Nitro+ 超白金&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;闲鱼二手矿卡&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;显示器&lt;/td&gt;
&lt;td&gt;LG 27UL600 4k HDR400 IPS&lt;/td&gt;
&lt;td&gt;单独预算&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;总价&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6075 6825&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;为什么要台式机&#34;&gt;为什么要台式机？&lt;/h3&gt;

&lt;p&gt;堂堂一个长期苹果用户的码农咋想起来要组装台式机了？这个计划其实我已经盘算好久好久，要不是库克这两年的出价策略我还真把这个念头打消了。 对于现在入一台能用好几年的 Mac 设备基本上都是要顶配了，价格能又不忍直视。&lt;/p&gt;

&lt;p&gt;以我现有几台笔记本为例，只有内存和硬盘可更换的加持下 MBP 2011 Late 低配我现在拿来用 VSCode 写代码跑服务也没啥太大问题。而手里的 MBP 2013 Mid 低配因为内存和硬盘全焊丝经常性内存不足卡死，硬盘不足，就连我老婆都恨不得把它扔了，主力机器 MBP 2015 Mid 中配后期更换 SSD 又可以再战 3 年。&lt;/p&gt;

&lt;p&gt;当我说要组装台式机的时候不少朋友反问现在还需要用台式机吗，虽然我嘴上只是说说攒着玩啊，现在外出基本上手机可以满足要求，带着笔记本其实也就是存下照片（是的我知道有种东西叫数码伴侣），其实我就是想要一台可配置的机器，不乏有这样想法的开发者，这也是为什么 MacBook Pro（后面简称 MBP）2015 版本的二手机器畅销的原因。&lt;/p&gt;

&lt;p&gt;以上的配置因为预算上限没买独立显卡和无线网卡/蓝牙的情况下总花费正好 6000 元整一分不多一分不少让我自己都特别吃惊（显示器是后批的预算），购买渠道主要是哪里便宜去哪里，大部分淘宝，极个别京东（比如有漏液风险度水冷）。其性价比完爆 2018 年新换代的 Mac mini（不考虑体积和接口种类），加上显示器虽然比不上 5k iMac 但其他方面可不差，再加上攒机配置基本上属于顶配（虽然没上 9900k）除了内存以外都不是瓶颈。&lt;/p&gt;

&lt;h3 id=&#34;为什么要视频剪辑&#34;&gt;为什么要视频剪辑？&lt;/h3&gt;

&lt;p&gt;业余兴趣爱好一直没有行动。之前出去玩攒了不少的视频素材，只有在结婚前花了三个月用 iMovie 剪了一个婚礼上播放的&lt;a href=&#34;https://v.youku.com/v_show/id_XOTQyNTg0ODA4.html?sharefrom=iphone&amp;amp;sharekey=9aa274d71e8a3ba95e2fcf03efbc9e8e0&#34;&gt;视频&lt;/a&gt;之后也有想学 Final Cut Pro（简称 FCP） 主要还是因为硬件不达标搁浅。&lt;/p&gt;

&lt;p&gt;题外话，经过慎重考虑我选择了 Adobe Premiere，支持 Windows 和 macOS 系统而且它也支持和 FCP 一样对独立显卡的渲染优化，反正这俩 App 对我来说都是新的。&lt;/p&gt;

&lt;h3 id=&#34;为什么黑苹果&#34;&gt;为什么黑苹果？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;请不要鄙视和职责用黑苹果的用户，现在 macOS 系统已经是免费安装也都是 &lt;a href=&#34;https://en.wikipedia.org/wiki/Vanilla_software&#34;&gt;Vanilla&lt;/a&gt; 方式。安装黑苹果尤其是自己动手这也是符合黑客精神。我认为自己来安装黑苹果是一种充满冒险和兴奋的事情。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;兼容黑苹果也是选择硬件的很重要的指标之一，虽然我会安装 Windows 系统，长期我更倾向于 macOS 系统。这也是一个长期 Mac 用户最舒服的使用方式，减少各方面的迁移成本，听说某大厂的游戏部门程序员全部采用黑苹果方案。&lt;/p&gt;

&lt;h3 id=&#34;为什么选择-intel-9700k&#34;&gt;为什么选择 Intel 9700k？&lt;/h3&gt;

&lt;p&gt;本来是要买 8 代 8700k 的，我买的时候（2019年初）8700k 价格溢价太高！稍微加点钱就能上 9 代 9700k 了！尽管市面上的 Mac 主机还都没有 9 代或许今年内应该能够发售再加上 tonymacx86 已经有很多 9 代的成功案例，何乐而不为呢，大不了在 Apple 在支持 9 代之前我先用 Windows 嘛。&lt;/p&gt;

&lt;p&gt;为什么要带 &lt;code&gt;k&lt;/code&gt;？可以超频啊！目前默频的情况基本满足，后面无论是视频剪辑还是玩游戏的话可以适当超频，配合华擎主板只要 CPU 不踩雷轻松上 5Ghz。 当然还是要考虑黑苹果的兼容性 AMD 在这方面真 YES 不起来。&lt;/p&gt;

&lt;h3 id=&#34;为什么主板选择华擎-z390&#34;&gt;为什么主板选择华擎 Z390？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;CPU 都上 9700k 了。为什么主板还要限制在 Z370 平台（虽然 9 代兼容），直接上 Z390 啊！价格也合适！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;都说技嘉是黑苹果首选的主板，其次是华硕、微星一二线大厂，一说起华擎可能在十几年前可能都没听过这个牌子（比如我，毕竟十几年没在台式机混过了）或者是华擎出妖板，这些确实没错。&lt;/p&gt;

&lt;p&gt;我选择华擎的主板主要有三大原因：第一在 Z390 系列里面它足够便宜（价格屠夫），第二是主板供电相对可靠且硬件种类非常强大（残血雷电口除外），第三在 hackintosher 看到 &lt;a href=&#34;https://hackintosher.com/blog/best-motherboard-brand-hackintoshing-2017-kabylake/&#34;&gt;2017 年评出的最佳黑苹果主板&lt;/a&gt;第一名就是华擎，原因是该主板很容易找到解决方案，还能够很好的支持睡眠唤醒。最近在 tonymacx86 华擎主板成功的案例也非常多。如果非要说缺点就是 BIOS 功能太弱版本更新不太稳定。&lt;/p&gt;

&lt;p&gt;再说说我为什么选择&lt;a href=&#34;https://www.asrock.com/mb/Intel/Z390%20Phantom%20Gaming-ITXac/index.cn.asp&#34;&gt;华擎 Z390 Phantom Gaming itx/ac&lt;/a&gt;，&lt;a href=&#34;https://www.chiphell.com/thread-1936969-1-1.html&#34;&gt;超频利器&lt;/a&gt;，双 Ultra M.2（PCIe Gen3 x4 &amp;amp; SATA3）接口（前支持 2260/2280，后支持 2280），4 SATA 3 接口（支持 RAID)和热插拔，DisplayPort 1.2 和 HDMI 2.0，板载 Intel 802.11ac 无线网卡和蓝牙 5.0模块（但不支持黑苹果，伤心），4 口 USB 3.1 Gen2，同时还有 Polychrome Sync RGB 灯控同步方案（虽然我不 care）。不足的地方也有啦，比如最大 32G 内存（支持 64G 就好了），残血雷电3接口（20G/s）再接 eGPU 会比较惨。&lt;/p&gt;

&lt;p&gt;如果你想要大板的话可以考虑华擎 Z390 Extreme 4 或 Taiji，大厂信仰和不差钱的忽略。&lt;/p&gt;

&lt;p&gt;最后附上一个&lt;a href=&#34;https://zhuanlan.zhihu.com/p/50199792&#34;&gt;Z390 主板简单横屏&lt;/a&gt;的文章，对我也很有启发。&lt;/p&gt;

&lt;h3 id=&#34;为什么选择众多漏液全赔的九州风神水冷&#34;&gt;为什么选择众多漏液全赔的九州风神水冷？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;购买水冷散热器和 9700k 把最初打算购买独立显卡（RX560）的预算花了，计划集显运行一段时间后续有预算在购入。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;攒机的时候没有考虑散热器的预算本以为如果买 Intel 盒装的版本会带一个小风扇或者随便买个 100 左右的散热器，真正研究配置的时候发现没有自带风扇，可能便宜的风冷 9700k 会压不住，超频就不要想。高塔的风冷（比如大霜塔）会有会挡内存槽和显卡的风险（据说大镰刀有错位设计）毕竟 itx 只有俩内存和一个 PCIe，权衡下来踩这个坑不如考虑水冷的划算。&lt;/p&gt;

&lt;p&gt;起初看海盗船 H100i v2 用的人挺多，瞅了眼价格直接自我劝退，更何况早期有漏液情况就没敢买，在 pcpartpicker 上筛选水冷散热器排名第二代就是&lt;a href=&#34;http://www.gamerstorm.com/product/CPULIQUIDCOOLER/2017-08/1286_6878.shtml&#34;&gt;九州风神船长 240 White&lt;/a&gt;，尽管也有很多漏液问题但基本上是 2017 年到 2018 年初，后续就再也没有看到漏液爆出（海盗船的现在也没有了）加上价格合适和京东客服再三确认质量保证（质保三年）和漏液全赔之后还是入了一个最便宜的船长 240 特别定制白色 RGB 的版本，结果买回来发现白色的水排和全黑的机箱搭配起来也很不和谐在侧透机箱一览无遗，谁让这个特别版（和国外同步，国内官网没有描述）价格比正常 240 便宜一百块呢。&lt;/p&gt;

&lt;p&gt;关于灯控，散热器自带一个 RGB 控制器同时也支持主板 RGB 同步，插在华擎 Z390 主板 RGB 同步插口上也是可用的（虽然商品描述没有标注支持华擎）&lt;/p&gt;

&lt;p&gt;九州风神作为一个国产品牌说明书是全英文我要给差评，尤其是在第一次接触水冷加 RGB 灯控的菜鸟来说。&lt;/p&gt;

&lt;h3 id=&#34;为什么选择最不像-itx-机箱的追风者-215p&#34;&gt;为什么选择最不像 itx 机箱的追风者 215P？&lt;/h3&gt;

&lt;p&gt;说实话选择这台主机我已经限定了必须是 itx 主板和机箱，中塔以上机箱家里条件不允许而且也不太喜欢较大的体积。选择&lt;a href=&#34;http://www.phanteks.com/Enthoo-Evolv-ITX-TemperedGlass.html&#34;&gt;追风者 215P&lt;/a&gt; 其实是我在找 &lt;a href=&#34;https://bartechtv.com/1000-mini-itx-coffee-lake-hackintosh-build-for-4k-video-editing/&#34;&gt;4k 视频剪辑配置&lt;/a&gt;发现的，国内恰好也有卖，规格还支持高塔风冷、全尺寸显卡以及 280 水冷，价格还合适（虽然不是最低价）没看具体尺寸就买了侧透 RGB 同款，买回来发现恰巧它的优势把机箱宽度拉大，预想的位置宽度正好不够。&lt;/p&gt;

&lt;p&gt;这个机箱的说明书实在是特别的简陋，建议下载国外官方的中文说明书。不知道是不是国内版本减配，没有硬盘灯线和重启线（国外版本说明书是有的），没有也没关系反正机箱也没对于的硬盘灯和重启键，你看到的以为是重启键按钮（国内一些评测也这么认为）实际上是机箱灯控的控制键。&lt;/p&gt;

&lt;p&gt;关于灯控，之前也没接触过灯效也就忽略了京东商品详情的 RGB 灯控的图标标识，一直以为这是一个普通的机箱，后来在看国外商品描述的时候提示是支持华硕，技嘉和微星主板 RGB 同步，看油管说是如果要和主板同步就要拆了机箱前面板把里面的控制版拆掉把 4pin 接口接入到主板的灯控口才行。写这篇博文的时候因为各种不确定我又扒了一遍所有商品的描述，在国外商品详情描述上看到了一行在说明书都没有提到的文字 &lt;code&gt;RGB Montherboard adapter required(sold separately)&lt;/code&gt;，也就是说需要主板 RGB 同步的用户们来掏钱单独买&lt;a href=&#34;http://www.phanteks.com/PH-CB_RGB4P.html&#34;&gt;适配器&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;关于水冷，支持分体式水冷系统。&lt;/p&gt;

&lt;h3 id=&#34;为什么内存不上双通道&#34;&gt;为什么内存不上双通道？&lt;/h3&gt;

&lt;p&gt;不是我不想上双通道，双条 8G 的价格和单条 16G 的价格基本保持一致，在现有预算情况下只是恰巧 DDR4 3000 16G 的价格符合我的要求，不用考虑二手卖掉旧内存直接上新，要知道几年后卖二手内存就太廉价了。&lt;/p&gt;

&lt;p&gt;品牌的话海盗船、芝奇、镁光、威刚、金士顿都可以考虑，需要注意带马甲的内存条是否挡风冷散热器。&lt;/p&gt;

&lt;h3 id=&#34;为什么选择-amd-rx-500-系列独立显卡&#34;&gt;为什么选择 AMD RX 500 系列独立显卡？&lt;/h3&gt;

&lt;p&gt;~~视频剪辑其实并不太吃显卡，主要还是 CPU，CPU 不足的晴朗下才会选择显卡。国外众多兼容黑苹果的配置中大多没用更好的显卡。~~自我打脸，视频编辑软件其实是 CPU 和显卡都会用到的，再强的 CPU 也拯救不了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;虽然部分 NVIDIA 显卡有 Web Driver 驱动但据说性能大大折扣，这里推荐黑果小兵整理的 &lt;a href=&#34;https://blog.daliansky.net/Mojave-Hardware-Support-List.html&#34;&gt;macOS 10.14 Majave 硬件支持列表&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AMX RX 500 系列和更好的 R9 系列全系 macOS 免驱的，AMD 和 Apple 已经达成长期合作伙伴。免驱动是安装黑苹果抉择的最重要的原因，其次选择 RX 500 系列价格实惠，&lt;del&gt;尤其考虑 RX 560&lt;/del&gt;，在没有独立显卡的日子里日常使用其实是够用的，
涉及图片处理和视频编辑的话必须要上独立显卡，无论是看 &lt;a href=&#34;https://bartechtv.com/the-best-graphics-cards-for-hackintosh-in-2018/&#34;&gt;2018&lt;/a&gt; 或 &lt;a href=&#34;https://bartechtv.com/the-best-hackintosh-graphics-cards-for-2019/&#34;&gt;2019&lt;/a&gt; 最佳显卡
列表 rx560 都是垫底的，我的预算其实是还是 rx560 的预算（800 左右）而全新的 rx580 价格实在感人，我也盯了很久的矿卡感觉可以尝试下，于是在闲鱼花了 750 包邮买了一块 2017 年份的蓝宝石 RX580 8G 1411MHz Nitro+ 超白金。特别注意如果你确实想从闲鱼买请不要相信卖家所说的网吧淘汰，全新，用钱急出等关键词。因为这类的 99% 其实都是矿卡，如果卖家坦白说这就是矿卡可以问问质保、退货政策。截至 2019 年 5 月 29日购入矿卡整 2 个月的时间目前没有翻车，macOS 下用于视频剪辑速度确实快了很多！在 Windows 用显卡超频检测风扇偶尔会提示风扇有问题但玩 Apex 英雄最高画质渲染除了显卡风扇噪音比较大以外没有任何问题。一般来说矿卡日常使用没有太大问题，后续会考虑换个显卡风扇。&lt;/p&gt;

&lt;h3 id=&#34;为什么选择这么少容量的-ssd&#34;&gt;为什么选择这么少容量的 SSD？&lt;/h3&gt;

&lt;p&gt;如果你不差钱的话请上三星 970 EVO 500G。&lt;/p&gt;

&lt;p&gt;上面提到主板支持双 Ultra M.2 插口和 4 SATA 3.0，同时还支持 &lt;a href=&#34;https://www.youtube.com/watch?v=qg1Vvh67Efw&#34;&gt;RAID0/1/2/3/4/5/10&lt;/a&gt;，其中一个 M.2 插口会被无线+蓝牙模块占用，因此我还剩下一个 M.2 和 4 个 SATA。&lt;/p&gt;

&lt;p&gt;对于我来说在不考虑 RAID 和手里只有比较少 SSD 硬盘的情况我会考虑买一个三星 970 EVO 250G，配合拆掉临时使用的 Windows 系统的老笔记本上的镁光 RX200 SSD 硬盘，这两块分别安装 macOS 和 Windows 系统。SSD 用来做系统安装和常用 App，大数据后期我会在买大容量机械硬盘做支持，最近价格涨上去不少。&lt;/p&gt;

&lt;p&gt;当前因为有 HP Gen 8 做 NAS，在用 LightRoom 修片也基本够用。影视资源也基本上是通过 NAS 的网络协议直接拉取到电脑或者盒子上硬解播放 4k 也毫无压力。&lt;/p&gt;

&lt;h3 id=&#34;为什么要选择博通的无线网卡方案&#34;&gt;为什么要选择博通的无线网卡方案？&lt;/h3&gt;

&lt;p&gt;首先博通是 Apple 的合作厂家，所有 Mac 主机的无线模块都是他家提供的，可以做到真正免驱同时以下提到的同时还支持蓝牙模块。&lt;/p&gt;

&lt;p&gt;蓝牙模块不仅仅是日常连接鼠标，键盘、耳机音箱，它作为 macOS 系统的核心功能是实现 Handoff 和 AirDrop 功能。&lt;/p&gt;

&lt;p&gt;苹果钦点模块：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BCM94360CS2 (2013年 MacBook Air)&lt;/li&gt;
&lt;li&gt;BCM94360CS (2013年 MacBook Pro)&lt;/li&gt;
&lt;li&gt;BCM94360CD (2013年 iMac)&lt;/li&gt;
&lt;li&gt;BCM943602CS (2015年 MacBook Pro)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;理论上上面 4 个模块是真正免驱的（但也不排除需要加驱动）。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;接口&lt;/th&gt;
&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;天线&lt;/th&gt;
&lt;th&gt;无线&lt;/th&gt;
&lt;th&gt;蓝牙&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PCIe/x1&lt;/td&gt;
&lt;td&gt;BCM94360CD&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2.4G 450M+/5G 1300M=1750M&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;iMac (2013) 使用，请勿购买三天线版本，三天线版本（3T3R）蓝牙和无线共用一根影响使用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PCIe/x1&lt;/td&gt;
&lt;td&gt;BCM94331CD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;tonymacx86 列表之一，国内没找到&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;M.2&lt;/td&gt;
&lt;td&gt;BCM943602CS&lt;/td&gt;
&lt;td&gt;3T3R&lt;/td&gt;
&lt;td&gt;2.4G 450M+/5G 1300M=1750M&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;MacBook Pro (2015) 使用，蓝牙需要接 USB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;M.2/NGFF 2230, key E&lt;/td&gt;
&lt;td&gt;BCM94360CS2&lt;/td&gt;
&lt;td&gt;2T2R&lt;/td&gt;
&lt;td&gt;2.4G 300M+/5G 867M=1167M&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;MacBook Air (2013) 使用，价格低廉，性价比最好&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;M.2/NGFF 2230, key E&lt;/td&gt;
&lt;td&gt;BCM94352Z/AzureWave AW-CE162NF/DW1560&lt;/td&gt;
&lt;td&gt;2T2R&lt;/td&gt;
&lt;td&gt;2.4G 300M/5.0G 867M=1167M&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;M.2&lt;/td&gt;
&lt;td&gt;BCM943602BAED/DELL DW1830&lt;/td&gt;
&lt;td&gt;3T3R&lt;/td&gt;
&lt;td&gt;2.4G 450M+&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;M.2&lt;/td&gt;
&lt;td&gt;BCM94350ZAE/DW1820A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;tonymacx86 列表之一，国内没找到&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Half mini&lt;/td&gt;
&lt;td&gt;BCM94360HMB/AzureWave AW-CB160H&lt;/td&gt;
&lt;td&gt;3T3R&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;tonymacx86 列表之一，国内没找到&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Half mini&lt;/td&gt;
&lt;td&gt;BCM94352 HMB/AzureWave AW-CE123H&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;tonymacx86 列表之一，国内没找到&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;更多博通模块请看 &lt;a href=&#34;https://wikidevi.com/wiki/User:Omega/Broadcom_modules_(Apple)&#34;&gt;wikidevi&lt;/a&gt;，其他兼容的列表请看 &lt;a href=&#34;https://osxlatitude.com/forums/topic/2120-inventory-of-supportedunsupported-wireless-cards-1-snow-leopard-el-capitan/&#34;&gt;osxlatitude 的整理&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先排除 PCIe 接口华擎 Z390 itx 版只有一个接口这个是为独立显卡准备的，虽然我很想入 BCM94360CD 四天线。 因此只能考虑 M.2 接口，上面的模块虽然也可以直接插 M.2 接口（底子还是 PCIe 嘛）但板子仅支持 2260/2280，支持 2260 的口我已经插了 SSD（因为主板提供散热马甲），&lt;del&gt;因此我只能考虑 2280。淘宝上能找到的支持 2280 转接卡的模块基本上只有 BCM94360CS2 和 BCM943602CS，考虑到后者是较新的 5G 可以达到 1300M，这俩价格也差不多基本上会考虑后者&lt;/del&gt;。受春节的影响没有入手，期间在浏览的时候发现华擎 Z370 可以拆卸原本的 Intel 的无线模块用来安装博通网卡/蓝牙模块，联系了 up 主没有得到解答只能从他视频扣细节，Intel 网卡型号不一样但确定插槽是 M.2 Key E，考虑到主板自带两个天线口放弃了三天线的 BCM943602CS，买了最物美价廉的 BCM94360CS2，带上转接卡高度 2230 机箱可以兼容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特别提醒&lt;/strong&gt;：主板自带 M.2 Key E 插口的无线模块需要&lt;a href=&#34;https://bbs.nga.cn/read.php?tid=16399773&amp;amp;page=1&#34;&gt;支持非 CNVi 网卡才能使用&lt;/a&gt;，如果有白名单请参考上面删除线内的方法。&lt;/p&gt;

&lt;p&gt;如果你不需要蓝牙的话也可以考虑 USB 无线网卡，USB 类型的目前暂无网卡和蓝牙二合一可用的硬件，虽然市面上已经出了一些。个人在春节期间不忍寂寞从 7x24 小时发货的京东买了 Comfast CF-913AC V2 USB 网卡安装&lt;a href=&#34;http://en.comfast.com.cn/index.php?m=content&amp;amp;c=index&amp;amp;a=show&amp;amp;catid=30&amp;amp;id=223&#34;&gt;驱动&lt;/a&gt;装的黑苹果。&lt;/p&gt;

&lt;h3 id=&#34;为什么选择-lg-27ul600-显示器&#34;&gt;为什么选择 LG 27UL600 显示器？&lt;/h3&gt;

&lt;p&gt;家里还在服役的 DELL 2209wa 是我 2010 年购入能坚持到现在已经是个奇迹了，16:10 画面在玩 PS4 时会让画面拉伸，屏幕被植物长期亲密接触屏幕出现了一些坏点，在和老婆大人协商后加购预算购买新显示器。这也就有了这个为什么的出现。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.lg.com/cn/monitors/lg-27UL600&#34;&gt;LG 27UL600&lt;/a&gt; 应该是 2019 年初我找到的国内性价比最高的 4k 显示器了吧。27 寸 4k 分辨率，IPS 屏，支持 DisplayHDR 400，sRGB 99% 色域，DisplayPort 1.2 和 HDMI 2.0 接口（兼容 HDCP 2.2设备），3.5mm 音频输出接口。 缺点是底座垃圾，敲下电脑桌就有可能会让显示器晃悠一会，建议直接上摇臂支架（反正我支架是现成的把老显示器卸下来就行了）。&lt;/p&gt;

&lt;p&gt;关于网上有些人说 27 寸用 4k 会特别难受的问题，我表示 Windows 和黑苹果可以字体缩放 200% 用起来非常舒服。&lt;/p&gt;

&lt;p&gt;题外话，这款显示器是 27UD69-W 的升级款。如果你不考虑 sRGB 99% 色域的话入手 27UD58-B 也是不错的选择。&lt;/p&gt;

&lt;h3 id=&#34;为什么没有黑苹果安装教程&#34;&gt;为什么没有黑苹果安装教程？&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;等我装好了测试没问题就写，还是说你愿意看到一个没有实践过的版本？&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;好啦好啦，不用催更了，教程链接：&lt;a href=&#34;http://icyleaf.com/2019/03/asrock-z390-gaming-itx-install-hackintosh-tutorial/&#34;&gt;http://icyleaf.com/2019/03/asrock-z390-gaming-itx-install-hackintosh-tutorial/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>升级 HP MicroServer Gen8 iLO 秘笈</title>
      <link>https://icyleaf.com/2018/11/upgrade-hp-microerver-gen8-ilo</link>
      <pubDate>Tue, 27 Nov 2018 10:43:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2018/11/upgrade-hp-microerver-gen8-ilo</guid>
      <description>

&lt;p&gt;几年前听取网络上的建议德淘了一台 HP MicroServer Gen8 服务器作为家用的 NAS 服务器，德淘的原因除了便宜以外电源的功率比国内版的更大，内存也比国内版的大（4G）。
Gen 8 自带 iLO 这是一个很强大的功能，新出的 Gen10 虽然硬件各方面有不错的表现但却阉割了 iLO，打算入坑谨慎选择。&lt;/p&gt;

&lt;h2 id=&#34;给你鱼&#34;&gt;给你鱼&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pan.baidu.com/s/1wSMlqg-iVO80U-5Z-kNdQA&#34;&gt;https://pan.baidu.com/s/1wSMlqg-iVO80U-5Z-kNdQA&lt;/a&gt; 提取码: w8mq&lt;/p&gt;

&lt;h2 id=&#34;教你渔&#34;&gt;教你渔&lt;/h2&gt;

&lt;p&gt;本方法适用于你当前操作的电脑系统是任何操作系统。&lt;/p&gt;

&lt;h3 id=&#34;版本概念&#34;&gt;版本概念&lt;/h3&gt;

&lt;p&gt;iLO 当前的版本分为&lt;strong&gt;硬件版本&lt;/strong&gt;和&lt;strong&gt;软件版本&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;硬件版本目前主要是 iLO4 和 iLO 5，后者是 Gen10 在使用。登录 iLO 管理后台页面的头部会提示你 iLO4/5。&lt;/li&gt;
&lt;li&gt;软件版本目前 iLO4 的最新版本是 2.6.1，iLO5 因为用不上没有做了解。在 iLO 管理后台登录界面上会有一行小字提示。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;升级固件&#34;&gt;升级固件&lt;/h3&gt;

&lt;p&gt;打开 &lt;a href=&#34;https://support.hpe.com/hpesc/public/home&#34;&gt;HPE 网站&lt;/a&gt; 搜索关键词 &amp;ldquo;HPE ProLiant MicroServer Gen8 Server&amp;rdquo;，
不要着急回车稍等片刻等有个浮层显示后点击”驱动和文件下载“。&lt;/p&gt;

&lt;p&gt;下载 iLO 固件的可通过左侧的筛选过滤选择 ”固件（Firmware）更新 - Lights-Out Management“ 然后在右侧选择日期是最新的一个对应你操作系统的版本。
如果是 macOS 或没有支持的操作系统也没关系选择任意 Windows 的版本，然后在详情页面点击下载。&lt;/p&gt;

&lt;p&gt;如果你下载后的 exe 文件，通过解压文件可直接进行解压缩能看到里面的 bin 文件，这个实际上是通过 iLO 管理后台升级所用的关键文件。&lt;/p&gt;

&lt;p&gt;操作路径：Administrator -&amp;gt; Framware&lt;/p&gt;

&lt;h3 id=&#34;安装语言包&#34;&gt;安装语言包&lt;/h3&gt;

&lt;p&gt;还是在刚才的搜索结果页面重置并新过滤”应用软件 - Lights-Out Management“，因为语言包更新到频次没那么高，你需要把右侧最底部显示的条目数改为全部（All）
后通过搜索关键词 ”Lights-Out 4 Language Pack“ 找到你希望使用的语言包，截至目前最新的中文语言包（Simplified Chinese ）是 2017 年的，下载过程同上面。&lt;/p&gt;

&lt;p&gt;解压缩文件后只需要里面的 lpk 文件。&lt;/p&gt;

&lt;p&gt;操作路径：Administrator -&amp;gt; Access Settings -&amp;gt; Language&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何解决 macOS 编译丢失 C Header 文件</title>
      <link>https://icyleaf.com/2018/10/apply-for-a-motorcycle-license</link>
      <pubDate>Wed, 24 Oct 2018 14:30:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2018/10/apply-for-a-motorcycle-license</guid>
      <description>&lt;p&gt;今天在 macOS 10.14 通过 brew 安装 libgit2 之后调用时提示提示 &lt;code&gt;fatal error: &#39;time.h&#39; file not found&lt;/code&gt;，本以为是 brew 的问题自己去编译问题依然。
确认了 Xcode Command Line Tools 并且再次确认了 &lt;code&gt;xcode-select -s /Applications/Xcode.app&lt;/code&gt; 之后还是这样，就连重启大法也不用之后，
在 Google 上检索换了好些关键词也没找到问题出在哪，索性把关键词继续模糊放大扩大范围，看到了 github 一个不知道是啥的项目看到有 &lt;code&gt;&#39;stdio.h.h&#39; file not found&lt;/code&gt;
类似的 issue 终于找到了&lt;a href=&#34;https://github.com/frida/frida/issues/338#issuecomment-424595668&#34;&gt;解决答案&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;关键原因是在于找不到 /usr/include 目录，然而安装 command-line tools 也不会自动帮你解决，而是需要在安装后再手动安装 /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg 才行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;跟随这个解决方案也附带了&lt;a href=&#34;https://forums.developer.apple.com/thread/104296&#34;&gt;解释&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From the latest Xcode 10 Beta 2 release notes.&lt;/p&gt;

&lt;p&gt;The Command Line Tools package installs the macOS system headers inside the macOS SDK. Software that compiles with the installed tools will search for macOS headers at the standard include path: /Applications/Xcodebeta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.1 4.sdk/usr/include For legacy software that looks for the macOS headers in the base system under /usr/include, please install the package file located at: /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>海淀驾校增驾摩托车驾照</title>
      <link>https://icyleaf.com/2018/05/apply-for-a-motorcycle-license</link>
      <pubDate>Mon, 14 May 2018 20:00:43 +0800</pubDate>
      
      <guid>https://icyleaf.com/2018/05/apply-for-a-motorcycle-license</guid>
      <description>

&lt;p&gt;去年差不多这个时候也有过学摩托的念头顺便去了好几家摩托专卖店，当时有的店提供花钱买本的服务可惜一是担心假本二是没下定决心，
没过多久北京爆出来相关买本的灰色买卖这事我估计也就黄了也没在继续下去。时隔一年后的今天再次够了每天搬电池充电的电动车通勤，
上周鼓起勇气（家人的鼓励也很重要）报名了摩托车增驾 D 本。&lt;/p&gt;

&lt;p&gt;北京可以学摩托车的驾校其实也不少，还是找了北边地区比较靠谱的海淀驾校。直接在官方微信公众号报名挂了电话不到一分钟就有工作人员
打电话过来确认时间上门服务（这个真心赞）。后来工作人员告诉我如果在东方时尚学过本再报增驾会有 300 的优惠，可惜现在住北边了。&lt;/p&gt;

&lt;p&gt;由于这两年快递的发展学摩托车的人也逐渐多起来，海淀驾校现在是每周一期开车，&lt;strong&gt;一期大约 14 天时间可以拿本&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;14-天拿本流程&#34;&gt;14 天拿本流程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;第一周周四之前报名(周五当天会发短信通知培训时间点)&lt;/li&gt;
&lt;li&gt;第一周的周六下午科目一培训（必须去录指纹和点名才能参加考试）&lt;/li&gt;
&lt;li&gt;第二周的周四下午科目一考试（挂了可以当场免费补考一次，再挂每次 50 元补考一次）&lt;/li&gt;
&lt;li&gt;第三周的周二到周五和周日可以全天训练，周一下午和周六是下午半天可以训练（至少去一次，尽量在周四前去训练场见教练并签字，不然无法参加科目二、三考试）&lt;/li&gt;
&lt;li&gt;第三周的周六上午是科目四培训（同样必须驱要点名才能参加考试）&lt;/li&gt;
&lt;li&gt;第四周的周一上午科目二、三考试，下午科目四考试（都过了当天拿本）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看着需要四周但实际上从你到驾校算起到拿本一切顺利的情况下正好 14 天。&lt;/p&gt;

&lt;h3 id=&#34;训练课时&#34;&gt;训练课时&lt;/h3&gt;

&lt;p&gt;目前北京学摩托车和学汽车不一样，不打卡不记录不用约考试学时一切教练说的算。
如果你下载了 海淀驾校 App 里面可用只有查看班车路线和班车实时情况。&lt;/p&gt;

&lt;h3 id=&#34;训练时长&#34;&gt;训练时长&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;上午&lt;/code&gt;: 8:00 ~ 11:30 (班车 12:00)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;下午&lt;/code&gt;: 12:30 ~ 15:30 (班车 16:15)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;训练车型&#34;&gt;训练车型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;两轮&lt;/code&gt;：新采购的豪爵 125cc，循环挡。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;边三轮&lt;/code&gt;：已经服役好几年的嘉陵 600cc，国际挡，见本文章的封图。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就是说在这里学摩托必须要在工作日时间至少去 3 次，因为课时的原因怎么请假也得一天，建议选择一个全天可以练习的时间去。
我们这期报名的是 100 多人，报名三轮是 27 人一组，如果是全到场的话半天课时也骑不了几次。不过大家也都不是每天都去，
我周二去的时候教练说他还有 17 名学生没见过呢。&lt;/p&gt;

&lt;p&gt;正常情况下学三轮通常都比两轮的要多很多，三轮数量有限是多人一组共享一辆车，两轮相对比较多一般情况下一人一辆，
车都经过特殊优化限制速度，三轮调教的不会往一边歪。&lt;/p&gt;

&lt;h2 id=&#34;报名所需资料&#34;&gt;报名所需资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;身份证原件及复印件（正反复印在一张纸上）&lt;/li&gt;
&lt;li&gt;北京居住证原件和复印件（非京籍需要）&lt;/li&gt;
&lt;li&gt;驾照原件和复印件（增驾需要，左右两证单面复印在一张纸上）&lt;/li&gt;
&lt;li&gt;一寸白底照片（如果平时带眼镜，照片也需要有眼镜，没有的话给电子版工作人员可以给 P 上眼镜）&lt;/li&gt;
&lt;li&gt;报名所需的钱（两轮 E 本 1600，三轮 D 本 2000）&lt;/li&gt;
&lt;li&gt;体检费用 20 元（需要现金）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;摩托车驾照&#34;&gt;摩托车驾照&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt; 本，可以驾驶轻便型摩托车(50cc 以下排量），但市面上没有驾校可以学&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt; 本，可以驾驶&lt;strong&gt;任何排量&lt;/strong&gt;两轮摩托车以及 &lt;code&gt;F&lt;/code&gt; 本的摩托车&lt;/li&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt; 本，可以驾驶&lt;strong&gt;任何排量&lt;/strong&gt;三轮和边三轮（跨子）摩托车以及 &lt;code&gt;E&lt;/code&gt;、&lt;code&gt;F&lt;/code&gt; 本的摩托车&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;划重点了！除了 &lt;code&gt;F&lt;/code&gt; 以外可以开任何排量的车，无论是 110cc、250cc、400cc、1000cc 甚至更高排量的都！可！以！当然是可以上牌的车型。&lt;/p&gt;

&lt;p&gt;两轮摩托车在驾驶时必须带安全头盔，三轮摩托车可以不用带安全头盔。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于纠结 &lt;code&gt;D&lt;/code&gt; 和 &lt;code&gt;E&lt;/code&gt; 本的童鞋，如果不差那几百元就直接 &lt;code&gt;D&lt;/code&gt; 本一劳永逸。&lt;/p&gt;

&lt;p&gt;如果你认定你就只开两轮摩托那 &lt;code&gt;E&lt;/code&gt; 本也就足够了。倘若未来的有一天你后悔了想开三轮，对不起，你还得在增驾一次也就意味着重头学和考试一次。&lt;/p&gt;

&lt;h2 id=&#34;上级考试资料&#34;&gt;上级考试资料&lt;/h2&gt;

&lt;p&gt;下载 &lt;code&gt;驾校宝典&lt;/code&gt; 或 &lt;code&gt;驾校一点通&lt;/code&gt; 选择摩托车题库，科目一 400 道题，科目四 345 道题。但我在科目四考试时出现了 2 道没有见过的题，
不过可以根据之前的知识解答。&lt;/p&gt;

&lt;h2 id=&#34;训练场地指引&#34;&gt;训练场地指引&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;打开手机上的地图 App 搜索 &lt;code&gt;海淀驾校摩托车训练场&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;科目一和科目四培训及考试都在京海教学楼，以那里为起点沿着教学楼北边的道路（班车进驾校走的那条路）继续往西走 &lt;code&gt;1.8km&lt;/code&gt; 就抵达摩托车
训练场。&lt;/p&gt;

&lt;p&gt;如果你是开车去途中看到走路的童鞋基本上都是学摩托车的建议捎上一程，到目的地后可以把车停在训练场旁边的小树林旁。&lt;/p&gt;

&lt;h2 id=&#34;训练和考试项目&#34;&gt;训练和考试项目&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;转弯打灯&lt;/li&gt;
&lt;li&gt;单边桥&lt;/li&gt;
&lt;li&gt;红绿灯（黄灯就停）&lt;/li&gt;
&lt;li&gt;坡起&lt;/li&gt;
&lt;li&gt;绕桩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;认真按着教练说的练，重点是熟练操作，掌握好离合的半联动一切都好办。实际考试主要考察绕桩，其他项目就听声音是否熄火。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意的是你平时训练的车号并不一定考试会用到，尽量保证掌握每辆车的离合器和半联动的感觉。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;领取驾照所需资料&#34;&gt;领取驾照所需资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;驾照原件（增驾需要）&lt;/li&gt;
&lt;li&gt;身份证原件&lt;/li&gt;
&lt;li&gt;一寸白底照片（无所谓带不带眼镜）&lt;/li&gt;
&lt;li&gt;海淀驾校的班车卡（可以坐班车的那张）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意教练声称增驾后的驾照的有效期是和原由的保持不变的（即如果你的驾照快到期了增驾后还需要在到期 90 天内换本），
但实际情况是会帮你换下一个有效期的本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;资料参考&#34;&gt;资料参考&lt;/h2&gt;

&lt;p&gt;如果你对于我文字中没有提到的部分感兴趣建议查看下如下两篇文章：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://meixg.cn/2017/04/09/learn-motocycle/&#34;&gt;2017年3月海淀驾校增驾摩托车D本流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sina.com.cn/s/blog_6d56a57d0102x0dz.html&#34;&gt;2017海淀驾校考摩托车驾照流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ḫpr - 最好用的 git 仓库镜像同步工具</title>
      <link>https://icyleaf.com/2018/04/intro-hpr</link>
      <pubDate>Fri, 27 Apr 2018 18:12:23 +0800</pubDate>
      
      <guid>https://icyleaf.com/2018/04/intro-hpr</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://github.com/icyleaf/hpr/raw/master/docs/_media/icon.png&#34; alt=&#34;icon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://icyleaf.github.io/hpr/&#34;&gt;ḫpr&lt;/a&gt; 是一个把任意 git 仓库的镜像到 gitlab 服务的同步工具，还支持定期同步的功能。&lt;/p&gt;

&lt;p&gt;特性:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持 Web API 接口，可用于远程控制不仅限于终端使用&lt;/li&gt;
&lt;li&gt;支持终端命令控制，方便临时使用&lt;/li&gt;
&lt;li&gt;定时更新镜像的仓库，时间可调，告别不靠谱的 crontab&lt;/li&gt;
&lt;li&gt;几乎支持所有的 git 托管的仓库&lt;/li&gt;
&lt;li&gt;使用可独立部署的 Gitlab 作为镜像平台&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本工具可以用到的地方:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;任意 git 仓库源码的定期同步&lt;/li&gt;
&lt;li&gt;Cocoapods 的境内加速和同步&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;契子&#34;&gt;契子&lt;/h2&gt;

&lt;p&gt;如果关注我博客的用户或者曾经看到过另外一篇文章&lt;a href=&#34;http://icyleaf.com/2015/01/speed-up-cocoapods/&#34;&gt;极速化 CocoaPods&lt;/a&gt;的话且实践的用户会明白为什么会有它的产生。
在我发布那篇文章的时候那套体系已经在我们公司的服务器上运行且截至目前已经持续运行了 3 年多！&lt;/p&gt;

&lt;p&gt;那个方案并不完美，除了调用必须通过脚本的蹩脚的方案外出问题最多的主要是 gitlab-mirrors
只能使用 crontab 做定时任务这样会因多个镜像在同步未完成的情况下重复开启新的同步任务，一个任务不明显一旦积攒多了起来还会慢慢的蚕食内存因此又不得不 ssh 到服务器
开始杀进程相当于重置。&lt;/p&gt;

&lt;p&gt;当时想重新做一个的想法其实 2017 年就产生了用 ruby 写了个头当时项目命名为 nightwing 但 ruby 的问题在部署上面有比较麻烦需要各种依赖环境，
当时也考虑过 Go 但由于在断断续续学习没有持续，这个时候就开始将注意力转移到了类 Ruby 语法的 Crystal 语言，通过业余时间慢慢的了解和确定其性能后虽然和
 Go 来比打包还没有那么高的集成度但完成核心功能已经完全足够，也就开始了封装 &lt;a href=&#34;https://github.com/icyleaf/gitlab.cr&#34;&gt;gitlab&lt;/a&gt;、
&lt;a href=&#34;https://github.com/icyleaf/halite&#34;&gt;halite&lt;/a&gt; 网络库直到最近基本完成了核心功能。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ḫpr&lt;/code&gt; 就这样诞生了。项目名和 Logo 出处来源于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%81%96%E7%94%B2%E8%9F%B2&#34;&gt;圣甲虫&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;

&lt;p&gt;鉴于 Docker 的便利性，目前教程只提供此种方法进行安装部署，首先克隆本项目：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/icyleaf/hpr.git
$ cd hpr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;复制 &lt;a href=&#34;config/hpr.json.example&#34;&gt;config/hpr.json.example&lt;/a&gt; 并改名 &lt;code&gt;config/config.json&lt;/code&gt; 后可修改&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;schedule_in&amp;quot;: &amp;quot;1.day&amp;quot;,
  &amp;quot;basic_auth&amp;quot;: {
    &amp;quot;enable&amp;quot;: false,
    &amp;quot;user&amp;quot;: &amp;quot;hpr&amp;quot;,
    &amp;quot;password&amp;quot;: &amp;quot;p@ssw0rd&amp;quot;
  },
  &amp;quot;gitlab&amp;quot;: {
    &amp;quot;ssh_port&amp;quot;: 22,
    &amp;quot;endpoint&amp;quot;: &amp;quot;http://gitlab.example.com/api/v3&amp;quot;,
    &amp;quot;private_token&amp;quot;: &amp;quot;abc&amp;quot;,

    &amp;quot;group_name&amp;quot;: &amp;quot;mirrors&amp;quot;,

    &amp;quot;project_public&amp;quot;: false,
    &amp;quot;project_issue&amp;quot;: false,
    &amp;quot;project_wiki&amp;quot;: false,
    &amp;quot;project_merge_request&amp;quot;: false,
    &amp;quot;project_snippet&amp;quot;: false
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;核心需要修改的参数有如下四项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;: Gitlab API 的地址，&lt;strong&gt;无需修改后面部分&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private_token&lt;/code&gt;: 在个人设置的 Account 页面获得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_name&lt;/code&gt;: 项目镜像的项目都会归属到这个组内，&lt;strong&gt;务必确保你的账户拥有创建组的权限&lt;/strong&gt; (如果是管理员请忽略加粗字样)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh_port&lt;/code&gt;: 如果 SSH 不是 22 端口的话需要根据你的实际情况修改&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;配置文件修改保存后还需要在 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件中配置下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;

services:
  hpr:
    image: icyleafcn/hpr
    ports:
      - 8848:8848
    volumes:
      - ./config:/app/config
      - ./repositories:/app/repositories
    environment:
      REDIS_URL: tcp://redis:6379
      REDIS_PROVIDER: REDIS_URL

      HPR_SSH_HOST: git.example.com
      HPR_SSH_PORT: 22
    depends_on:
      - redis
  redis:
    image: redis:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;HPR_SSH_HOST&lt;/code&gt; 和 &lt;code&gt;HPR_SSH_PORT&lt;/code&gt; 变量用于设置 Docker 实例中的 SSH 配置。如果 SSH 端口是 22 的可忽略设置这俩参数。&lt;/p&gt;

&lt;p&gt;编辑完成后运行下面命令快完成了！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up
...
hpr_1      | Generating public/private rsa key pair ...
hpr_1      |
hpr_1      | GENERATED SSH PUBLIC KEY:
hpr_1      | ##################################################################
hpr_1      | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDq8O3HbLn9x8Uy8RUotlpOnxdakrmCyDpZrGBeLARmEbd6BOIBQ+UWm8NUKthQ7UOavmlsq4j8lY4kyFW2eFX2qWcbvI+s2gI+05MXax+mAukSszaNSnpAoTyJCRipilSkqiOV99V8JIJhrHPtTO0o/Ui
9WiyyWsUM4M9lEKHpZ486lDGk3IM2XQW+pxAoMKb0TYzqCsrduHUtjzy0M0BqgMPe9EtVQqCbnTMzDLXmRONoTYyTV51NQ12mMwEQcDaLQ28e5gqouQJKS81JaoRpQWa7pHsOCki6Fk9TB+EQFrGz5nOrmYYM+O1MKnFkzmVHv7Fh50Sz7d2nYzzOKAkR hpr@docker
hpr_1      | ##################################################################
hpr_1      |
hpr_1      | Configuring ssh config ...
hpr_1      | Starting hpr server ...
hpr_1      |   _
hpr_1      |  | |__  _ __  _ __
hpr_1      |  | &#39;_ \| &#39;_ \| &#39;__|
hpr_1      |  | | | | |_) | |
hpr_1      |  |_| |_| .__/|_|
hpr_1      |        |_|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后从执行命令的输出找到生成的 SSH PUBLIC KEY（两个井号中间的部分，以 &lt;code&gt;ssh-rsa&lt;/code&gt; 开头，&lt;code&gt;hpr@docker&lt;/code&gt; 结尾），
复制添加到 gitlab 的账户 SSH Keys 页面中。&lt;/p&gt;

&lt;h2 id=&#34;更多资源&#34;&gt;更多资源&lt;/h2&gt;

&lt;p&gt;再多的内容我已经整理到文档中，欢迎移步浏览：&lt;a href=&#34;https://icyleaf.github.io/hpr/&#34;&gt;https://icyleaf.github.io/hpr/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一招解决苹果账户因忘记安全问题绑定手机号</title>
      <link>https://icyleaf.com/2018/04/how-to-bind-mobile-number-to-apple-developer-account</link>
      <pubDate>Fri, 27 Apr 2018 18:00:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2018/04/how-to-bind-mobile-number-to-apple-developer-account</guid>
      <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;2018 年 4 月初的某天，苹果针对于开发者账户抛出了一个看似只有在中国实施的政策：账户需绑定手机号。
但如果你记得账户登录密码却忘记了安全问题的答案，那你就不能绑定手机号和后续操作。我是亲身经历这个事件且过程都发在了 twitter
上面，期间也有很多朋友帮忙跟进和给出不少建议。我希望国内的用户通过搜索引擎找到这里来解决问题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你只想看到最有效的解决方案请拉到文章的尾部的&lt;strong&gt;一招解决&lt;/strong&gt;，中间提到的一些解决方案可能在你那边也会适用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;亲身经历&#34;&gt;亲身经历&lt;/h2&gt;

&lt;p&gt;对于绑定手机号来说，乍一看这算啥我不绑定你能咋滴！然而我们都太 naive，直到某一天我要对一个快过期的账户续费的时候发现了一个巨大的坑。
也就是说如果你没有绑定手机号你讲不能下述操作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不能接受最新苹果的协议更新 （这算事？）&lt;/li&gt;
&lt;li&gt;不能对已上架的 App 新建版本&lt;/li&gt;
&lt;li&gt;不能新建新 App&lt;/li&gt;
&lt;li&gt;不能对账户进行续费（你没看错，我通过技术手段获取了续费链接打开还是要你绑定手机号！）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;老老实实的去绑定手机号，首先它会跳转到 appleid.apple.com 网站提示登录，如往常一样输入用户名密码点击登录，映入眼帘不是登录成功后
的界面而是让你输入安全问题的答案。由于公司涉及的多个账户最初并不是我来申请的，赶紧联系前同事求助得到的答案是我当时瞎填的，我&amp;hellip;&lt;/p&gt;

&lt;p&gt;第一时间打苹果客服 &lt;code&gt;400-009-5555&lt;/code&gt; 接通后说明问题希望能够重设安全问题，这个时候苹果一如既往的保持高安全性的答复如果你忘记了安全问题
的答案那这个帐号基本上就废了。但如果你这个是开发者账户的话可以通过两种方式尝试解决：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用手机登录该账户后尝试开启两步验证，如果没有提示安全问题开启后就可以重置，若有提示那此路不通。&lt;/li&gt;
&lt;li&gt;求助苹果开发者客服 &lt;code&gt;400-670-1855&lt;/code&gt;，看看他们那边怎么处理。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;推友 &lt;a href=&#34;https://twitter.com/frankxzx624&#34;&gt;@frankxzx&lt;/a&gt; 给我建议说如果开发者账户如果绑定了紧急邮箱也可以重设，但不适用于我的情况有类似需求的可以尝试。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;找了台测试机尝试方案一结果还是显示安全问题，只能寄希望于苹果开发者客服。通过几天的跟进我认为这个电话非常的坑爹，因为接通会进入等待列表，
语音还特别提示“你的电话非常重要，请耐心等待”，但通常情况下你需要 1 ~ 2 个小时才能接通，建议打这个电话的时候用一个蓝牙耳机会能让你先忙
于其他的事情。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;推友 &lt;a href=&#34;https://twitter.com/Lonely__Ma&#34;&gt;@Lonely&lt;/a&gt; 给我建议是每天早上 9 点拨打秒接通，但那个时间点我一般在路上没有尝试。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个星期的时间我总共打通过两次，第一次给的服务还不错说情况比较复杂他的权限不能够解决，但可以给我的几个账户进行安全升级并向上级反馈并耐心
等待答复又不能保证什么时候会答复，给了我一个案例编号说你可以再次拨打客服电话报上案例编号就可以查到进度。&lt;/p&gt;

&lt;p&gt;第二次拨打是 4 天后花了 1 个半小时接通，一个说中文比较费劲的技术人员告诉我你不是账户的持有人找你们的老板来打这个电话才行（哪个老板可以每天花
1 - 2 小时等待时间给你打电话还不一定能接通），跟他说了你们电话太难打了我花了快 2 小时才打通啊，这又不是随随便便就能接通的。然后有说你可以
给我们(&lt;code&gt;chinadev@asia.apple.com&lt;/code&gt;)发邮件我们会尽快回复的，但邮件必须是通过有问题的 apple id 账户的邮箱发出才行。&lt;/p&gt;

&lt;p&gt;感谢后挂了我就登录 apple id 的邮箱系统依次发了邮件希望能够尽快处理，因为一个账户还有 3 天就续费过期了。在看到 Apple 自动恢复的邮件显示
“我们会在一天内给你答复”&lt;/p&gt;

&lt;p&gt;第一天过去了没有收到答复，第二天过去了还没有收到答复&amp;hellip;第三天开发者账户已经过期依然没有收到答复&amp;hellip;&lt;/p&gt;

&lt;p&gt;就在我绝望之际，我看到了曙光。&lt;/p&gt;

&lt;h2 id=&#34;一招解决&#34;&gt;一招解决&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;截至 2018 年 4 月 27 日该方法有效。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;推友 &lt;a href=&#34;https://twitter.com/shanegood&#34;&gt;@shanegood&lt;/a&gt; 和 &lt;a href=&#34;https://twitter.com/lipeiqiang&#34;&gt;@lipeiqiang&lt;/a&gt; 在第一时间提醒我通过 macOS 登录
iCloud 更新联系方式的方式可以添加绑定手机号。在本机新建了多个用户对于不同的账户依次登录 iCloud 确实可以绑定手机号！但重设安全问题是无解的。&lt;/p&gt;

&lt;p&gt;对于绑定的手机号必须是没有绑定过其他 Apple Id 账户的才行，于是我通过阿里小号 App 和我另外一个大王卡小号绑定了公司的开发者帐号。蛋疼！&lt;/p&gt;

&lt;p&gt;感谢在这个事件中给予帮助的推友也希望本文能够帮助你解决问题。完整的时间线都在我的 twitter 上面记录，欢迎 &lt;a href=&#34;https://twitter.com/icyleaf&#34;&gt;follow&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何使用 Docker 管理 Jenkins</title>
      <link>https://icyleaf.com/2018/04/how-to-manage-jenkins-with-docker</link>
      <pubDate>Wed, 18 Apr 2018 14:44:32 +0800</pubDate>
      
      <guid>https://icyleaf.com/2018/04/how-to-manage-jenkins-with-docker</guid>
      <description>

&lt;p&gt;官方的 &lt;a href=&#34;https://hub.docker.com/_/jenkins&#34;&gt;jenkins&lt;/a&gt; 镜像已经不再维护管理而是由 Jenkins Community 进行更新，鉴于 Jenkins 的更新频率特别快社区版本会提供两个版本：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lts&lt;/code&gt; 长期稳定版本，但还是会有新版提醒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latest&lt;/code&gt; 每周更新版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;都是基于 alpine 系统封装因此镜像的体积会大大减小很多。如果你是内网使用可以不用在意更新问题长期使用一个版本也没太大问题。&lt;/p&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;创建镜像时需要注意几个地方：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关联本地 volumes&lt;/li&gt;
&lt;li&gt;设置时区（默认是 UTC 时间）&lt;/li&gt;
&lt;li&gt;映射 50000 端口（这个是 master 和 slave 的通讯端口）和 8000 端口（Web）&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --restart=always
    -p 8000:8080 -p 50000:50000
    -v /var/lib/docker/jenkins:/var/jenkins_home
    -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai
    jenkins/jenkins:lts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于进行设置 JAVA 的参数可以参考：&lt;a href=&#34;https://github.com/jenkinsci/docker/issues/45&#34;&gt;https://github.com/jenkinsci/docker/issues/45&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;配置-jenkins-的插件源&#34;&gt;配置 Jenkins 的插件源&lt;/h2&gt;

&lt;p&gt;使用过它的人都知道管理和安装插件是一个奇慢无比的事情，虽然提供了代理服务器但我这还有一个更好的方案。&lt;/p&gt;

&lt;p&gt;我在翻阅国内镜像源网站的时候发现清华大学开源软件镜像站其实提供了国内 Jenkins 插件的镜像源但一直很低调的没有公布，通过进入&lt;code&gt;管理插件 -&amp;gt; 高级&lt;/code&gt;页面拉到最底部有个升级站点的自定义框，填入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装插件的时候系统默认会测试网络就是 ping 下 Google 的网站，它会提示失败但不用担心它会继续尝试下载和安装插件。&lt;/p&gt;

&lt;h2 id=&#34;升级&#34;&gt;升级&lt;/h2&gt;

&lt;p&gt;此方法适用于所有的容器的升级步骤。&lt;/p&gt;

&lt;p&gt;首先需要找到容器的名字，这里我想会有不少人会问为什么你在创建一个容器的时候不指定一个名字，
那是因为后面还需要创建一个新版本的容器而名字不能一样，因此我现在创建都让 docker 随机分配。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps
CONTAINER ID  ...   NAMES
8f48718fdd07  ...   naughty_pasteur
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拿到之后先停止运行后，创建一个数据备份容器再进行拉取最新版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker stop naughty_pasteur
$ docker docker create --volumes-from naughty_pasteur --name jenkins-data jenkins/jenkins:lts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拉取最新版本后恢复数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull jenkins/jenkins:lts
$ docker run -d --restart=always
    --volumes-from jenkins-data
    -p 8000:8080 -p 50000:50000
    -v /var/lib/docker/jenkins:/var/jenkins_home
    -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai
    jenkins/jenkins:lts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;确保通过 web 访问和 build 正常后删除老的和数据备份的容器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker rm naughty_pasteur
$ docker rm jenkins-data
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;疑惑解答&#34;&gt;疑惑解答&lt;/h2&gt;

&lt;h3 id=&#34;1-我忘记设置时区但我进实例修改了时区在-jenkins-里不生效&#34;&gt;1. 我忘记设置时区但我进实例修改了时区在 Jenkins 里不生效&lt;/h3&gt;

&lt;p&gt;在 Jenkins 的系统设置页面找到脚本命令行运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.setProperty(&#39;org.apache.commons.jelly.tags.fmt.timeZone&#39;, &#39;Asia/Shanghai&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行后即时生效无需重启，方法来自&lt;a href=&#34;https://wiki.jenkins.io/display/JENKINS/Change+time+zone&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;官方文档&#34;&gt;官方文档&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkinsci/docker/blob/master/README.md&#34;&gt;https://github.com/jenkinsci/docker/blob/master/README.md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fast Crystal</title>
      <link>https://icyleaf.com/2017/05/fast-crystal</link>
      <pubDate>Wed, 10 May 2017 11:57:58 +0000</pubDate>
      
      <guid>https://icyleaf.com/2017/05/fast-crystal</guid>
      <description>&lt;p&gt;起初是自己写了一个小测试来看看 crystal 下连接字符串几种实现方式的性能情况，结果还真能区分出来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ crystal build --release code/string/concatenation.cr -o bin/string/concatenation
$ ./bin/string/concatenation

Crystal 0.22.0 (2017-04-22) LLVM 4.0.0

 String#+  32.98M ( 30.32ns) (±11.62%)       fastest
String#{}   9.51M (105.16ns) (± 6.12%)  3.47× slower
 String#%    5.0M (200.03ns) (± 4.81%)  6.60× slower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是就仿照 &lt;a href=&#34;https://github.com/JuanitoFatas/fast-ruby&#34;&gt;fast-ruby&lt;/a&gt; 在周末花了时间 fork 了 crystal 版本，其实结果挺让人吃惊的，因为是编译性语言在大多数情况下一些小的语法糖在编译器优化阶段会做一致性处理最终的结果其实是一样的，但也有一些例外。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/icyleaf/fast-crystal&#34;&gt;https://github.com/icyleaf/fast-crystal&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>打通 Sidekiq 的任督二脉 Ruby 和 Crystal</title>
      <link>https://icyleaf.com/2017/04/sidekiq-works-in-ruby-togethor-with-crystal</link>
      <pubDate>Wed, 26 Apr 2017 16:00:49 +0000</pubDate>
      
      <guid>https://icyleaf.com/2017/04/sidekiq-works-in-ruby-togethor-with-crystal</guid>
      <description>

&lt;p&gt;自从开始研究 Crystal 这门语言（之前也有&lt;a href=&#34;http://icyleaf.com/2016/07/gitlab-api-wrapper-for-crystal/&#34;&gt;介绍&lt;/a&gt;过），基本上每隔一段时间都会看看它的近况，去年 sidekiq 的作者用该语言重新实现了 sidekiq 项目而且给出了特别竟然的&lt;a href=&#34;http://www.mikeperham.com/2016/05/25/sidekiq-for-crystal/&#34;&gt;对比数据&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://icyleaf.com/uploads/2017/04/26/sidekiq-benchmarks.png&#34; alt=&#34;IMAGE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;相对比 Gitlab 采用 go 语言重新 gitlab_ci_runner 而学习一门新的语言达到高效率低内存的方法之外 Crystal 就像是新的希望。使用 Crystal 重新的 sidekiq 的代码也非常的简单但已经实现了核心功能和 Web UI。&lt;/p&gt;

&lt;p&gt;本篇就给大家介绍下如果在 Ruby on Rails 的框架下调度和执行 Crystal 写的 Workers。测试环境是在 macOS 下，其他版本信息如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby 2.0+

&lt;ul&gt;
&lt;li&gt;Rails 5.0&lt;/li&gt;
&lt;li&gt;Sidekiq 5.0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Crystal 0.22.0+

&lt;ul&gt;
&lt;li&gt;Sidekiq.cr 0.7.0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;配置-rails-环境&#34;&gt;配置 Rails 环境&lt;/h2&gt;

&lt;p&gt;如何配置 Ruby、Rails、Bundler、Redis 就不在赘述，只讲核心，首先新建一个最基础的 rails 项目，不用额外的第三方辅助工具，数据库用 sqlite 减少外部依赖：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails new ruby_on_rails -B -T -S -C -M  -d sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入项目 &lt;code&gt;ruby_on_rails&lt;/code&gt; 编辑 &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# 修改源地址
source &#39;https://gems.ruby-china.org&#39;

# 新增 sidekiq 的支持
gem &#39;redis-rails&#39;
gem &#39;sidekiq&#39;

# 其余的不用修改
# Bundle edge Rails instead: gem &#39;rails&#39;, github: &#39;rails/rails&#39;
gem &#39;rails&#39;, &#39;~&amp;gt; 5.0.2&#39;
# Use sqlite3 as the database for Active Record
gem &#39;sqlite3&#39;
# Use Puma as the app server
gem &#39;puma&#39;, &#39;~&amp;gt; 3.0&#39;

gem &#39;redis-rails&#39;
gem &#39;sidekiq&#39;

group :development, :test do
  # Call &#39;byebug&#39; anywhere in the code to stop execution and get a debugger console
  gem &#39;byebug&#39;, platform: :mri
end

group :development do
  # Access an IRB console on exception pages or by using &amp;lt;%= console %&amp;gt; anywhere in the code.
  gem &#39;web-console&#39;, &#39;&amp;gt;= 3.3.0&#39;
  gem &#39;listen&#39;, &#39;~&amp;gt; 3.0.5&#39;
  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem &#39;spring&#39;
  gem &#39;spring-watcher-listen&#39;, &#39;~&amp;gt; 2.0.0&#39;
end

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
gem &#39;tzinfo-data&#39;, platforms: [:mingw, :mswin, :x64_mingw, :jruby]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置好之后执行 &lt;code&gt;bundle insall&lt;/code&gt; 安装好 Gem 的依赖，再创建文件 &lt;code&gt;config/initializers/sidekiq.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis_config = { url: &#39;redis://localhost:6379/8&#39; }

Sidekiq.configure_server do |config|
  config.redis = redis_config
end

Sidekiq.configure_client do |config|
  config.redis = redis_config
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sidekiq 的配置就完事了。&lt;/p&gt;

&lt;h2 id=&#34;配置-crystal-环境&#34;&gt;配置 Crystal 环境&lt;/h2&gt;

&lt;p&gt;Crystal 是基于 LLVM 开发，除了 Windows 以外其他绝大数系统基本上都支持（最新支持的 ARM 架构，可在树莓派上安装），&lt;a href=&#34;https://crystal-lang.org/docs/installation/&#34;&gt;安装步骤&lt;/a&gt;同样不再赘述。&lt;/p&gt;

&lt;p&gt;安装好之后首先创建一个新项目：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ crystal init app crystal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入项目 &lt;code&gt;crystal&lt;/code&gt; 编辑 &lt;code&gt;Shard.yml&lt;/code&gt; 这是一个类似于 Gemfile 的功能，但实现的去中心化，在文件末尾新增如下依赖：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:
  sidekiq:
    github: mperham/sidekiq.cr
    branch: master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行 &lt;code&gt;shards update&lt;/code&gt; 或 &lt;code&gt;crystal deps&lt;/code&gt; 安装依赖即可。&lt;/p&gt;

&lt;h2 id=&#34;编写-workers&#34;&gt;编写 Workers&lt;/h2&gt;

&lt;p&gt;Worker 的功能很简单，就是做一个类似 Redis ping 的功能，Worker 在日志输出 PONG。&lt;/p&gt;

&lt;h3 id=&#34;ruby-版本&#34;&gt;Ruby 版本&lt;/h3&gt;

&lt;p&gt;安装 sidekiq 后会在 rails 内置命令可生成基础模板，切换到 &lt;code&gt;ruby_on_rails&lt;/code&gt; 目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g sidekiq:worker ping1
      create  app/workers/ping1_worker.rb
$ rails g sidekiq:worker ping2
      create  app/workers/ping2_worker.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;worker 的内容也很简单，我在日志输出增加了 &lt;code&gt;[Ruby]&lt;/code&gt; 作为 Ruby 版本的标识便于后面的辨识&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/workers/ping1_worker.rb
class Ping1Worker
  include Sidekiq::Worker

  def perform(*args)
    logger.info &amp;quot;[Ruby] PONG !&amp;quot;
  end
end

# app/workers/ping2_worker.rb
class Ping2Worker
  include Sidekiq::Worker

  def perform(*args)
    logger.info &amp;quot;[Ruby] PONG PONG !!&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;crystal-版本&#34;&gt;Crystal 版本&lt;/h3&gt;

&lt;p&gt;切换到 &lt;code&gt;crystal&lt;/code&gt; 目录下和 Ruby 不同的是它的源码是存放在 src 目录下面，我们稍微调整下结构：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.
├── LICENSE
├── README.md
├── lib
├── shard.lock
├── shard.yml
├── spec
└── src
    ├── crystal_server.cr
    └── workers
        ├── ping1_worker.cr
        └── ping2_worker.cr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;worker 的内容如下，并设置 queue 为 &lt;code&gt;crystal&lt;/code&gt; 用于指派使用:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-crystal&#34;&gt;# src/workers/ping1_worker.cr
class Ping1Worker
  include Sidekiq::Worker
  sidekiq_options do |job|
    job.queue = &amp;quot;crystal&amp;quot;
  end

  def perform()
    logger.info &amp;quot;[Crystal] PONG !&amp;quot;
  end
end

# src/workers/ping2_worker.cr
class Ping2Worker
  include Sidekiq::Worker
  sidekiq_options do |job|
    job.queue = &amp;quot;crystal&amp;quot;
  end

  def perform()
    logger.info &amp;quot;[Crystal] PONG PONG !!&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过代码可以看出 Ruby 和 Crystal 的代码基本上是完全一样的。&lt;/p&gt;

&lt;h2 id=&#34;任督二脉&#34;&gt;任督二脉&lt;/h2&gt;

&lt;p&gt;对于使用 Sidekiq 的童鞋都知道，如果我想执行一个队列任务，只需要调用下 Worker 本身的 &lt;code&gt;perform_*&lt;/code&gt; 方法，这样的话根本无法调用一个不同语言版本的 Worker 否则 sidekiq 会报类似如下错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2017-04-26T06:19:14.187Z 50690 TID-ox4qa1k8o WARN: {&amp;quot;context&amp;quot;:&amp;quot;Job raised exception&amp;quot;,&amp;quot;job&amp;quot;:{&amp;quot;class&amp;quot;:&amp;quot;Crystal::Ping1Worker&amp;quot;,&amp;quot;args&amp;quot;:[],&amp;quot;retry&amp;quot;:true,&amp;quot;queue&amp;quot;:&amp;quot;default&amp;quot;,&amp;quot;jid&amp;quot;:&amp;quot;42ce106d79
01a274f3db2d54&amp;quot;,&amp;quot;created_at&amp;quot;:1493187554.181674,&amp;quot;enqueued_at&amp;quot;:1493187554.1820428},&amp;quot;jobstr&amp;quot;:&amp;quot;{\&amp;quot;class\&amp;quot;:\&amp;quot;Crystal::Ping1Worker\&amp;quot;,\&amp;quot;args\&amp;quot;:[],\&amp;quot;retry\&amp;quot;:true,\&amp;quot;queue\&amp;quot;:\&amp;quot;default\&amp;quot;,\&amp;quot;jid
\&amp;quot;:\&amp;quot;42ce106d7901a274f3db2d54\&amp;quot;,\&amp;quot;created_at\&amp;quot;:1493187554.181674,\&amp;quot;enqueued_at\&amp;quot;:1493187554.1820428}&amp;quot;}
2017-04-26T06:19:14.187Z 50690 TID-ox4qa1k8o WARN: NameError: uninitialized constant Crystal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打通任督二脉的关键在于两个版本都提供一个 low-level 的 API 可用于定制化调用：&lt;/p&gt;

&lt;h3 id=&#34;ruby-版本-1&#34;&gt;Ruby 版本&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;job_id = Sidekiq::Client.push(
  &#39;queue&#39; =&amp;gt; &#39;&#39;,  # 指派特定的队列名，默认是 default
  &#39;class&#39; =&amp;gt; &#39;&#39;,  # Worker 的类名，可以是实例化类型或字符串类型
  &#39;args&#39; =&amp;gt;[]     # Worker 接收的参数，以数组形式传递
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;crystal-版本-1&#34;&gt;Crystal 版本&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-crystal&#34;&gt;job = Sidekiq::Job.new
job.queue = &amp;quot;default&amp;quot;   # 指派特定的队列名，默认是 default
job.klass = &amp;quot;&amp;quot;          # Worker 的类名，可以是实例化类型或字符串类型
job.args = [].to_json   # Worker 接收的参数，以数组形式传递

client = Sidekiq::Client.new
job_id = client.push(job)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;打通任督二脉&#34;&gt;打通任督二脉&lt;/h2&gt;

&lt;p&gt;准备工作就绪，打通任督二脉的关键就只差一个了！那就是对于 redis 数据共享，细心的童鞋可能留意了上面只配置了 Ruby 版本的 redis 连接，但对于 Crystal 我故意留白没有说明。因为这个是最关键的一步，对于当前 sidekiq.cr 版本来说。&lt;/p&gt;

&lt;p&gt;sidekiq.cr 对于作者来说是一次试水并没有话特别大的精力，Crystal 本身还处在开发阶段在未到达 1.0 之前会有各种 Break Changes。而且作者是非常照顾 Heroku 的开发者，默认仅支持该服务平台 Redis-to-Go 服务，因此想设置 Redis 连接信息必须通过系统的环境变量：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REDISTOGO_URL=redis://localhost:6379/8
REDIS_PROVIDER=$REDISTOGO_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的配置是不可省略的，因为我个人不懂 Heroku 给作者乱提了 PL 还被作者狠批了一顿 :(&lt;/p&gt;

&lt;p&gt;回到话题本身，我们来继续写上 &lt;code&gt;src/crystal_server.cr&lt;/code&gt; 关键的代码：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：redis 连接信息无比保证和 rails 配置的是一致的！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-crystal&#34;&gt;require &amp;quot;sidekiq&amp;quot;
require &amp;quot;sidekiq/cli&amp;quot;
require &amp;quot;./workers/*&amp;quot;

ENV[&amp;quot;LOCAL_REDIS&amp;quot;] = &amp;quot;redis://localhost:6379/8&amp;quot;
ENV[&amp;quot;REDIS_PROVIDER&amp;quot;] = &amp;quot;LOCAL_REDIS&amp;quot;

cli = Sidekiq::CLI.new
server = cli.configure do |config|
  # 支持中间件，默认留空即可
end

cli.run(server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码需要编译执行，因为不编译是无法给 sidekiq cli 传递它接受的参数（当然也有方法，我放在末尾范例源码中自己寻找）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ crystal build src/crystal_server.cr -o crystal_server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面命令把源码编译成可执行文件到项目根目录的 &lt;code&gt;crystal_server&lt;/code&gt; 文件。&lt;/p&gt;

&lt;p&gt;打开终端一：启动 ruby 的 sidekiq server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ruby_on_rails
$ sidekiq -q default
2017-04-26T06:47:19.299Z 76282 TID-owewdljsc INFO: Booting Sidekiq 4.2.10 with redis options {:url=&amp;gt;&amp;quot;redis://localhost:6379/8&amp;quot;}


         m,
         `$b
    .ss,  $$:         .,d$
    `$$P,d$P&#39;    .,md$P&amp;quot;&#39;
     ,$$$$$bmmd$$$P^&#39;
   .d$$$$$$$$$$P&#39;
   $$^&#39; `&amp;quot;^$$$&#39;       ____  _     _      _    _
   $:     ,$$:       / ___|(_) __| | ___| | _(_) __ _
   `b     :$$        \___ \| |/ _` |/ _ \ |/ / |/ _` |
          $$:         ___) | | (_| |  __/   &amp;lt;| | (_| |
          $$         |____/|_|\__,_|\___|_|\_\_|\__, |
        .d$$                                       |_|

2017-04-26T06:47:19.433Z 76282 TID-owewdljsc INFO: Running in ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin16]
2017-04-26T06:47:19.433Z 76282 TID-owewdljsc INFO: See LICENSE and the LGPL-3.0 for licensing details.
2017-04-26T06:47:19.433Z 76282 TID-owewdljsc INFO: Upgrade to Sidekiq Pro for more features and support: http://sidekiq.org
2017-04-26T06:47:19.442Z 76282 TID-owewdljsc INFO: Starting processing, hit Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开终端二：启动 crystal 的 sidekiq server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd crystal
$ ./crystal_server -q crystal

         m,
         `$b
    .ss,  $$:         .,d$
    `$$P,d$P&#39;    .,md$P&amp;quot;&#39;
     ,$$$$$bmmd$$$P^&#39;
   .d$$$$$$$$$$P&#39;
   $$^&#39; `&amp;quot;^$$$&#39;       ____  _     _      _    _
   $:     ,$$:       / ___|(_) __| | ___| | _(_) __ _
   `b     :$$        \___ \| |/ _` |/ _ \ |/ / |/ _` |
          $$:         ___) | | (_| |  __/   &amp;lt;| | (_| |
          $$         |____/|_|\__,_|\___|_|\_\_|\__, |
        .d$$                                       |_|

2017-04-26T06:48:42.755Z 83552 TID-21ybwjk  INFO: Sidekiq v0.7.0 in Crystal 0.22.0
2017-04-26T06:48:42.755Z 83552 TID-21ybwjk  INFO: Licensed for use under the terms of the GNU LGPL-3.0 license.
2017-04-26T06:48:42.755Z 83552 TID-21ybwjk  INFO: Upgrade to Sidekiq Enterprise for more features and support: http://sidekiq.org
2017-04-26T06:48:42.755Z 83552 TID-21ybwjk  INFO: Starting processing with 25 workers
2017-04-26T06:48:42.756Z 83552 TID-21ybwjk  INFO: Press Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;验证功力效果&#34;&gt;验证功力效果&lt;/h2&gt;

&lt;p&gt;两边的 sidekiq server 都已经跑起来了，我们先从 rails 启动 console 验证，注意留意两个 sidekiq 终端日志的输出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails console
Loading development environment (Rails 5.0.2)

# 调用 rails 本身的 ping1 和 ping2 worker
2.4.0 :001 &amp;gt; Sidekiq::Client.push(&#39;class&#39; =&amp;gt; &#39;Ping1Worker&#39;, &#39;args&#39; =&amp;gt;[])
 =&amp;gt; &amp;quot;961500753aa127b73ac50851&amp;quot;
2.4.0 :002 &amp;gt; Sidekiq::Client.push(&#39;class&#39; =&amp;gt; &#39;Ping2Worker&#39;, &#39;args&#39; =&amp;gt;[])
 =&amp;gt; &amp;quot;be366d2e5f44adf367853d82&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应 rails 的 sidekiq server 会同时输出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2017-04-26T06:53:01.722Z 76282 TID-owex58ag8 Ping1Worker JID-961500753aa127b73ac50851 INFO: start
2017-04-26T06:53:01.722Z 76282 TID-owex58ag8 Ping1Worker JID-961500753aa127b73ac50851 INFO: [Ruby] PONG !
2017-04-26T06:53:01.722Z 76282 TID-owex58ag8 Ping1Worker JID-961500753aa127b73ac50851 INFO: done: 0.0 sec
2017-04-26T06:53:52.681Z 76282 TID-owex58bs0 Ping2Worker JID-be366d2e5f44adf367853d82 INFO: start
2017-04-26T06:53:52.681Z 76282 TID-owex58bs0 Ping2Worker JID-be366d2e5f44adf367853d82 INFO: [Ruby] PONG PONG !!
2017-04-26T06:53:52.681Z 76282 TID-owex58bs0 Ping2Worker JID-be366d2e5f44adf367853d82 INFO: done: 0.0 sec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自身一脉本来就是通的没什么好稀奇的，验证另外一脉：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails console
Loading development environment (Rails 5.0.2)

# 调用 crystal 的 ping1 和 ping2 worker
2.4.0 :001 &amp;gt; Sidekiq::Client.push(&#39;class&#39; =&amp;gt; &#39;Ping1Worker&#39;, &#39;args&#39; =&amp;gt;[], &#39;queue&#39; =&amp;gt; &#39;crystal&#39;)
 =&amp;gt; &amp;quot;324cf5e07b5e2999b0a45565&amp;quot;
2.4.0 :002 &amp;gt; Sidekiq::Client.push(&#39;class&#39; =&amp;gt; &#39;Ping2Worker&#39;, &#39;args&#39; =&amp;gt;[], &#39;queue&#39; =&amp;gt; &#39;crystal&#39;)
 =&amp;gt; &amp;quot;06c60bb9d52d9a31d48d2fdc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看看 crystal 的 sidekiq server 的日志：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2017-04-26T06:57:11.846Z 21253 TID-1z8q4cg  JID=324cf5e07b5e2999b0a45565 INFO: Start
2017-04-26T06:57:11.846Z 21253 TID-1z8q4cg  JID=324cf5e07b5e2999b0a45565 INFO: [Crystal] PONG !
2017-04-26T06:57:11.846Z 21253 TID-1z8q4cg  JID=324cf5e07b5e2999b0a45565 INFO: Done: 0.000046 sec
2017-04-26T06:57:20.785Z 21253 TID-1z8q3y8  JID=06c60bb9d52d9a31d48d2fdc INFO: Start
2017-04-26T06:57:20.785Z 21253 TID-1z8q3y8  JID=06c60bb9d52d9a31d48d2fdc INFO: [Crystal] PONG PONG !!
2017-04-26T06:57:20.785Z 21253 TID-1z8q3y8  JID=06c60bb9d52d9a31d48d2fdc INFO: Done: 0.000049 sec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;验证通过！打通了！&lt;/p&gt;

&lt;p&gt;Crystal 这边向 Ruby 调用也可行，但只有通过如下代码，有个别时候自身调用也没有日志输出，不过在 Web UI 却发现已处理的数字已正常更新，该问题我再调查下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-crystal&#34;&gt;require &amp;quot;sidekiq&amp;quot;

ENV[&amp;quot;LOCAL_REDIS&amp;quot;] = &amp;quot;redis://localhost:6379/8&amp;quot;
ENV[&amp;quot;REDIS_PROVIDER&amp;quot;] = &amp;quot;LOCAL_REDIS&amp;quot;

workers = %w(Ping1Worker Ping2Worker)
workers.each do |wk_class|
  job = Sidekiq::Job.new
  job.queue = &amp;quot;default&amp;quot;
  job.klass = wk_class

  Sidekiq::Client.default_context = Sidekiq::Client::Context.new

  client = Sidekiq::Client.new
  job_id = client.push(job)
  puts &amp;quot;[#{wk_class}] job id: #{job_id}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2017-04-26T07:20:58.754Z 62256 TID-oukzi7jck Ping1Worker JID-1fee81b35052cba1f6525de5 INFO: start
2017-04-26T07:20:58.754Z 62256 TID-oukzi7jck Ping1Worker JID-1fee81b35052cba1f6525de5 INFO: [Ruby] PONG !
2017-04-26T07:20:58.755Z 62256 TID-oukzi7jck Ping1Worker JID-1fee81b35052cba1f6525de5 INFO: done: 0.0 sec
2017-04-26T07:20:58.756Z 62256 TID-oul02vzfw Ping2Worker JID-0bb7eef097447784fb48d943 INFO: start
2017-04-26T07:20:58.756Z 62256 TID-oul02vzfw Ping2Worker JID-0bb7eef097447784fb48d943 INFO: [Ruby] PONG PONG !!
2017-04-26T07:20:58.756Z 62256 TID-oul02vzfw Ping2Worker JID-0bb7eef097447784fb48d943 INFO: done: 0.0 sec
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;本篇只是通过一个最简单的例子让大家知道互通的方法，实际使用中对于数据交互等还有更多需要考虑的地方，这里就暂时不做展开。非常期待 Crystal 今年立的 &lt;a href=&#34;https://crystal-lang.org/2016/12/29/crystal-new-year-resolutions-for-2017-1-0.html&#34;&gt;1.0 的目标&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;对于 Crystal 语言本身的评价，大家也可看下 RubyChina 站长的心得&lt;a href=&#34;https://ruby-china.org/topics/32771&#34;&gt;Crystal 说我最近关注 Crystal 的感受&lt;/a&gt;，编译语言有编译语言的坑，入坑需谨慎。&lt;/p&gt;

&lt;p&gt;本文演示的代码已经整理并放到了 &lt;a href=&#34;https://github.com/icyleaf/sidekiq-with-ruby-and-crystal&#34;&gt;Github&lt;/a&gt;，对于不明白的地方可配合代码更好服用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>你虐我千百遍，我待你如初恋，直到我遇到 match</title>
      <link>https://icyleaf.com/2017/03/fastlane-match-in-action</link>
      <pubDate>Tue, 28 Mar 2017 20:12:07 +0800</pubDate>
      
      <guid>https://icyleaf.com/2017/03/fastlane-match-in-action</guid>
      <description>

&lt;h2 id=&#34;系列目录&#34;&gt;系列目录&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/&#34;&gt;Fastlane - iOS 和 Android 的自动化构建工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://icyleaf.com/2016/07/fastlane-in-action/&#34;&gt;深入浅出 Fastlane 一看你就懂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://icyleaf.com/2017/03/fastlane-match-in-action/&#34;&gt;你虐我千百遍，我待你如初恋，直到我遇到 match&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;通过前两篇的文章大家已经对 fastlane 的概念和基本使用已经有了初步的掌握，在第二篇中也有提到 fastlane 实现的各种功能其实都是基于独立封装设计的各个工具实现。它们即可以单独成为一个体系同时也会被吸纳到 fastlane 的 action 系统之中。&lt;code&gt;match&lt;/code&gt; 是在 iOS 开发和持续测试和构建中最重中之重的环节，它维护和管理着 iOS 的各种证书和 profile 的创建、更新工作。想必很多用户听到 iOS 证书和 profile 都会头大脑涨，恨不得要手撕鬼子的技能点来对付他们（如图）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://codesigning.guide/assets/img/cs-the-problem.png&#34; alt=&#34;code-signing-problem&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图来源于作者专门整理的网站 &lt;a href=&#34;https://codesigning.guide/，对于&#34;&gt;https://codesigning.guide/，对于&lt;/a&gt; iOS App 签名原理感兴趣的可以参见 JSPatch 作者的分析：&lt;a href=&#34;http://blog.cnbang.net/tech/3386/&#34;&gt;http://blog.cnbang.net/tech/3386/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;功能特性&#34;&gt;功能特性&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;主动/被动创建、更新、Xcode 所需的各种证书和打包所需的 Profiles&lt;/li&gt;
&lt;li&gt;托管 Xcode 所需的各种证书和打包所需的 Profiles&lt;/li&gt;
&lt;li&gt;统一并共享团队成员统一使用&lt;/li&gt;
&lt;li&gt;证书具有密码加密保护（openssl）&lt;/li&gt;
&lt;li&gt;支持多团队（账户）&lt;/li&gt;
&lt;li&gt;支持单 App 多 Target(identifier)&lt;/li&gt;
&lt;li&gt;内测支持企业账户（v0.11.0 还在测试可用，并没有正式支持）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;

&lt;p&gt;match 其实是在 fastlane 基础包 cert、sign、spaceship、credentials_manager 之上把 iOS 开发者证书流程化的工具。为了实现团队内共享项目的开发者证书，它使用 git 仓库对证书进行托管，首先需要进行初始化，配置 git 仓库、项目的 iDP 信息之后，下载 Development、AppStore、AdHoc 的开发者证书和项目的 Profile files，并通过 openssl 的方式进行安全加密后提交并推送到 git 仓库，其他成员（或自动化构建系统）使用时需要输入密钥后才能把证书解密并导入到 keychain 和 Profiles 目录。&lt;/p&gt;

&lt;p&gt;如果对于证书加密策略感兴趣的可以在本文底部资料参考的第一个链接查看详情。&lt;/p&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最新 fastlane 已经包含了所有的子模块，独立的 match 不在更新，请直接安装 fastlane，使用 fastlane match 代替 match 命令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安装就很简单通过 &lt;code&gt;gem install fastlane&lt;/code&gt; 会把它的全家桶一并下载安装，首先可以看下帮助：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane match --help

  match

  Easily sync your certificates and profiles across your team using git

  Commands:
    adhoc             Run match for a adhoc provisioning profile
    appstore          Run match for a appstore provisioning profile
    change_password   Re-encrypt all files with a different password
    decrypt           Decrypts the repository and keeps it on the filesystem
    development       Run match for a development provisioning profile
    help              Display global or [command] help documentation
    init              Create the Matchfile for you
    nuke              Delete all certificates and provisioning profiles from the Apple Dev Portal
    nuke development  Delete all certificates and provisioning profiles from the Apple Dev Portal of the type development
    nuke distribution Delete all certificates and provisioning profiles from the Apple Dev Portal of the type distribution
    run               Easily sync your certificates and profiles across your team using git

  Global Options:
    --verbose
    -r, --git_url STRING URL to the git repo containing all the certificates (MATCH_GIT_URL)
    --git_branch STRING  Specific git branch to use (MATCH_GIT_BRANCH)
    -y, --type STRING    Create a development certificate instead of a distribution one (MATCH_TYPE)
    -a, --app_identifier [VALUE] The bundle identifier(s) of your app (comma-separated) (MATCH_APP_IDENTIFIER)
    -u, --username STRING Your Apple ID Username (MATCH_USERNAME)
    -s, --keychain_name STRING Keychain the items should be imported to (MATCH_KEYCHAIN_NAME)
    -p, --keychain_password STRING This might be required the first time you access certificates on a new mac. For the login/default keychain this is your account password (MATCH_KEYCHAIN_PASSWORD)
    --readonly [VALUE]   Only fetch existing certificates and profiles, don&#39;t generate new ones (MATCH_READONLY)
    -b, --team_id STRING The ID of your Developer Portal team if you&#39;re in multiple teams (FASTLANE_TEAM_ID)
    -l, --team_name STRING The name of your Developer Portal team if you&#39;re in multiple teams (FASTLANE_TEAM_NAME)
    --verbose [VALUE]    Print out extra information and all commands (MATCH_VERBOSE)
    --force [VALUE]      Renew the provisioning profiles every time you run match (MATCH_FORCE)
    --skip_confirmation [VALUE] Disables confirmation prompts during nuke, answering them with yes (MATCH_SKIP_CONFIRMATION)
    --shallow_clone [VALUE] Make a shallow clone of the repository (truncate the history to 1 revision) (MATCH_SHALLOW_CLONE)
    --force_for_new_devices [VALUE] Renew the provisioning profiles if the device count on the developer portal has changed (MATCH_FORCE_FOR_NEW_DEVICES)
    --skip_docs [VALUE]  Skip generation of a README.md for the created git repository (MATCH_SKIP_DOCS)
    -h, --help           Display help documentation
    -v, --version        Display version information
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议大家在项目中创建并配置 &lt;code&gt;fastlane/Matchfile&lt;/code&gt; 文件可以把命令需要的参数省略：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane match init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置好 git_url(git 仓库地址）、type（默认同步证书类型）、app_identifier、username（iDP 的账户名）即可。&lt;/p&gt;

&lt;h2 id=&#34;生成和同步证书&#34;&gt;生成和同步证书&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 开发环境证书
$ fastlane match development
# 产品环境证书
$ fastlane match appstore
# 内测环境证书
$ fastlane match adhoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初次使用的时候会提示需要输入 iDP 的账户密码，校验成功后可以保存到 keychain 中后续可以不在重复输入（好贴心）密码（也可通过设置变量 FASTLANE_PASSWORD），该密码就是上面提到的证书加密的密钥，请妥善保存。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提示：如果担心密码泄露可设置 FASTLANE_DONT_STORE_PASSWORD = true 不进行密码保存至 keychain，在 keychain 可通过关键词 &amp;ldquo;deliver.&amp;rdquo; 检索。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有的童鞋说我们有 299 的企业证书，为什么不做支持呢？起初作者并没有打算进行支持是担心滥用以及代码结构需要较大的变更，随着开发者呼声太高，其实还是做了支持，只不过并没有正式的纳入，需要通过配置环境变量支持：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 企业环境证书
$ ENV[&#39;MATCH_FORCE_ENTERPRISE&#39;] = &#39;1&#39; &amp;amp;&amp;amp; fastlane match enterprise
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;修改密钥&#34;&gt;修改密钥&lt;/h2&gt;

&lt;p&gt;建议密码定期更换或再人员发生变更之后进行密码变更：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fastlane match change_password
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重新生成&#34;&gt;重新生成&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;慎用&lt;/strong&gt;：match 提供一个命令允许把当前的证书撤销后并全新的重新生成一份，这个事项是会把证书和 Profiles 全部包含在内，如果单纯的想只重设 Profles 并同步是不支持的。我想这也是为什么该命名叫做 &lt;code&gt;nuke&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我这里可给大家提供一种只同步 profile 的方法：首先在 git 仓库中找到你要重设的 profile 文件，并把它从仓库中删除提交，然后在执行该类型的命令即可，命令发现没有 profile 会自动再生成一个 profile 并下载同步至 git 仓库。&lt;/p&gt;

&lt;h2 id=&#34;资料参考&#34;&gt;资料参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://macoscope.com/blog/simplify-your-life-with-fastlane-match/&#34;&gt;http://macoscope.com/blog/simplify-your-life-with-fastlane-match/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fastlane/fastlane/issues/2007&#34;&gt;https://github.com/fastlane/fastlane/issues/2007&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>北京上临时牌照流程</title>
      <link>https://icyleaf.com/2017/03/how-to-get-temporary-car-license-in-beijing</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://icyleaf.com/2017/03/how-to-get-temporary-car-license-in-beijing</guid>
      <description>&lt;p&gt;不在 4s 店购买一点精品的后果就是自己需要办理北京上临牌，准备如下资料备忘&lt;/p&gt;

&lt;p&gt;办理所需资料&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;身份证&lt;/li&gt;
&lt;li&gt;北京居住卡或居住证或工作居住证（非北京户口需要）&lt;/li&gt;
&lt;li&gt;购车发票&lt;/li&gt;
&lt;li&gt;强险保单&lt;/li&gt;
&lt;li&gt;合格证&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;备注：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;以上资料均需要原件及复印件一份&lt;/li&gt;
&lt;li&gt;办理临时牌照不需要指标确认书。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;办理过程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;进门按键领号排队，等叫到的时候去柜台将上述资料给工作人员。然后在一边等待制作完成即可。不需要填写任何单子，我去的时候人比较多，大概等了30分钟。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;办理时限&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;周一至周五：8：30 - 18：00&lt;/p&gt;

&lt;p&gt;周六、日：9：00 - 16：00（法定节假日除外）&lt;/p&gt;

&lt;p&gt;自受理申请之日起一个工作日内办理完毕。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;收费问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;收费10块（两张临牌纸，5块一张），在领临牌的时候给工作人员即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;办理地点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（一）跨辖区临时行驶车号牌：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;车辆管理所：朝阳区南四环东路18号&lt;/li&gt;
&lt;li&gt;京朝分所：朝阳区孛罗营北街1号&lt;/li&gt;
&lt;li&gt;京海分所：海淀区北安河乡海淀驾校院内&lt;/li&gt;
&lt;li&gt;京丰分所：丰台区双林南路新丰考试场南门对面&lt;/li&gt;
&lt;li&gt;京顺分所：顺义区后沙峪镇泗上村裕民大街17号&lt;/li&gt;
&lt;li&gt;京南分所：大兴区黄村镇狼垡村公交考试场院内&lt;/li&gt;
&lt;li&gt;京北分所：昌平区马池口镇马池口村北方检测场院内&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有效期 7-15 天&lt;/p&gt;

&lt;p&gt;（二）区域内临时行驶车号牌：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;东城车管站：东城区广渠门南小街5号，68399329

&lt;ul&gt;
&lt;li&gt;东城区朝内北小街豆瓣胡同1号楼4号门，88313419&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;西城车管站：西城区赵登禹路303号，68399206

&lt;ul&gt;
&lt;li&gt;西城区广外红莲南路33号，68399472&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;朝阳车管站：朝阳区百子湾西里303楼，88313586&lt;/li&gt;
&lt;li&gt;海淀车管站：海淀区西北旺后厂村99号，62553336&lt;/li&gt;
&lt;li&gt;丰台车管站：丰台区小屯西路南口加油站北侧卢沟桥乡综合办公大楼，68399740转5739&lt;/li&gt;
&lt;li&gt;石景山车管站：石景山区杨庄路8号院，68863193&lt;/li&gt;
&lt;li&gt;门头沟车管站：门头沟区滨河南路72号一层，69806430&lt;/li&gt;
&lt;li&gt;房山车管站：房山区拱辰街道月华大街32号，68397030转5005&lt;/li&gt;
&lt;li&gt;通州车管站：通州区运河西大街240号，60526300&lt;/li&gt;
&lt;li&gt;昌平车管站：昌平区马池口村交通大队综合执法大厅10-15号窗口，88313830&lt;/li&gt;
&lt;li&gt;顺义车管站：顺义区顺平西路10号院西院，81498347&lt;/li&gt;
&lt;li&gt;大兴车管站：大兴区黄村镇海子角村500米路南，61268964&lt;/li&gt;
&lt;li&gt;怀柔车管站：怀柔区青春路88号，89684090&lt;/li&gt;
&lt;li&gt;平谷车管站：平谷区北街29号，69959863&lt;/li&gt;
&lt;li&gt;密云车管站：密云县新北路25号，69068445&lt;/li&gt;
&lt;li&gt;延庆车管站：延庆县延庆镇妫水南街，81194561&lt;/li&gt;
&lt;li&gt;机场车管站：首都国际机场二纬路机场公安分局综合办公大楼，64539041&lt;/li&gt;
&lt;li&gt;亦庄车管站：北京市经济技术开发区科创四街1号，88313933&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有效期 7 天，可以申请办理 3 次&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;临时牌照有效期&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;临时号牌有效期为15天，最长期限不超过45天。
每辆车最多能办理3张临时牌照。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;据 4S 店告知出京的临牌只能办一次且办完之后不能再办区域内临牌。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;临时牌照如何悬挂&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;机动车临时号牌为两张，正面为车牌号码和有效期，背面为机动车详细信息，所以机动车临时号牌是不能借给他人使用。使用临时号牌上路时，应该在机动车前后挡风玻璃处各张贴一张机动车号牌，将机动车号牌号码侧朝外，如果不按照规定悬挂号牌，将被处以200元罚款和12分违章。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;咨询电话&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;车管业务咨询电话：12122&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;根据其他网站的反馈咨询的情况可能和实际有出入。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;资料参考&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;北京市公安局 -  机动车临时通行牌证核发
&lt;a href=&#34;http://www.bjgaj.gov.cn/web/detail_getZwgkInfo_279416.html&#34;&gt;http://www.bjgaj.gov.cn/web/detail_getZwgkInfo_279416.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;北京市公安局公安交通管理局 - 申请机动车临时行驶车号牌
&lt;a href=&#34;http://www.bjjtgl.gov.cn/jgj/jdcgl/120149/index.html&#34;&gt;http://www.bjjtgl.gov.cn/jgj/jdcgl/120149/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;北京身份证北京买车上外地牌实施中
&lt;a href=&#34;http://m.newsmth.net/article/Yaohao/34585&#34;&gt;http://m.newsmth.net/article/Yaohao/34585&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;汽车实用手册(16) 临时牌照实用手册
&lt;a href=&#34;http://www.autohome.com.cn/use/201403/742174.html&#34;&gt;http://www.autohome.com.cn/use/201403/742174.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;百度经验 - 机动车办理北京市内临时牌照流程
&lt;a href=&#34;http://jingyan.baidu.com/article/86fae34689365e3c48121a50.html&#34;&gt;http://jingyan.baidu.com/article/86fae34689365e3c48121a50.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>