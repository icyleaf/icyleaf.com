<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on icyleaf</title>
    <link>localhost/tags/php/</link>
    <description>Recent content in Php on icyleaf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2007</copyright>
    <lastBuildDate>Mon, 02 May 2011 12:34:56 +0800</lastBuildDate>
    <atom:link href="localhost/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>魔豆及其豆瓣 API 测试平台开源咯</title>
      <link>/localhost/2011/05/modou-and-douban-api-console-is-open-source-now</link>
      <pubDate>Mon, 02 May 2011 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2011/05/modou-and-douban-api-console-is-open-source-now</guid>
      <description>&lt;p&gt;这是作为 2011 年 5 月 1 日劳动节的福利发放，欢迎各位 Kohana 开发者及其爱好者围观领取，领取内容及其使用方式请前往本人 Github 的项目地址：&lt;a href=&#34;https://github.com/icyleaf/modou&#34;&gt;https://github.com/icyleaf/modou&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nginx&#43;FastCGI 环境搭建 Kohana</title>
      <link>/localhost/2010/05/nginx-with-fastcgi-build-kohana</link>
      <pubDate>Mon, 31 May 2010 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2010/05/nginx-with-fastcgi-build-kohana</guid>
      <description>

&lt;p&gt;Kohana 默认仅对 Apache 环境提供的部署支持，其实对于 Nginx+FastCGI
也是很容易支持的。本文搭建环境是 Ubuntu 10.4 并采用 apt-get
方式安装，喜爱编译的朋友可以自行解决 :)&lt;/p&gt;

&lt;h3 id=&#34;1-安装-mysql&#34;&gt;1. 安装 MySQL&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install mysql-server mysql-client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装过程在会提示设置 root 账户的密码，如果是本机测试开发可以留空后稍候设置。&lt;/p&gt;

&lt;h3 id=&#34;2-安装-nginx&#34;&gt;2. 安装 Nginx&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 安装 Nginx
$ sudo apt-get install nginx

# 启动 Nginx
$ sudo /etc/init.d/nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成上面两步之后，打开浏览器，输入 localhost 或 127.0.0.1 如果看到 &lt;strong&gt;Welcome to Nginx!&lt;/strong&gt; 字样就说明安装成功了，是不是很简单 :)&lt;/p&gt;

&lt;p&gt;注意，如果你的机器上面如果安装了其他 web 容器（比如 Apache，Lighttd等），启动
ngnix 的时候肯定会报错，因为这些 web 容器启动均占用的 80
端口，更改的方法如下：&lt;/p&gt;

&lt;p&gt;编辑 &lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; 文件，修改 server 段中的 listen
为 localhost:8080，其中 8080 是更改的监听端口：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {    
listen   localhost:8080;
server_name  localhost;
# [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后重启 Nginx：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo /etc/init.d/nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-安装-php5&#34;&gt;3. 安装 PHP5&lt;/h3&gt;

&lt;p&gt;PHP 在 Nginx 下是通过 FastCGI 模式运行的，使用 Debain 的包管理可以安装
PHP5 和一些必须的（比如，php5-mysql）和可选的扩展（比如，Kohana 要求的
php5-curl，php5-gd，php5-mcrypt），下面前 5
个是必须的，其他可以依据个人需求添加或减少：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install php5-cgi php5-mysql php5-curl php5-gd php5-mcrypt php5-idn php-pear php5-imagick php5-imap php5-memcache php5-mhash php5-ming php5-pspell php5-recode php5-snmp php5-tidy php5-xmlrpc php5-xsl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完毕后，需要编辑 php 的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 编辑 /etc/php5/cgi/php.ini 文件
# 修改 cgi.fix_pathinfo 的值为 1（如果此项被注解掉了，请删除前面的 # 符号）	cgi.fix_pathinfo = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此 PHP5 已经安装完毕，但是还没有结束，因为我们还没有让它支持 FastCGI
嗯，由于 Debain 包并没有提供单独的 FastCGI 守护程序，因此我们可以使用其他的方式实现，通常使用的是 lighttpd 项目提供的 spawn-fcgi（本文也用的这个，但是它总会出现小毛病，导致 Nginx 服务 Down 掉，稍候也会给出一点解决方案）或者是 &lt;a href=&#34;http://php-fpm.org/&#34;&gt;PHP-FPM&lt;/a&gt;（专门为 PHP 提供 FastCGI 进程管理的软件）&lt;/p&gt;

&lt;p&gt;好吧，让我们在安装 lighttpd：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install lighttpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完毕后会你发现一些错误信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Starting web server: lighttpd
2010-05-31 10:44:51: (network.c.300) can not bind to port: 80 Address already in use failed!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还是上面提到的重复占用端口的问题，不过由于我们只是使用它的 spawn-fcgi 因此我们可以不让它当作服务启动：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo update-rc.d -f lighttpd remove
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，让我们开启 FastCGI 守护进程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ /usr/bin/spawn-fcgi -a 127.0.0.1 -p 9000 -u www-data -g www-data -f /usr/bin/php5-cgi -P /var/run/fastcgi-php.pid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 -a 代表 ip 地址， -p 是进程的端口， -u 是用户， -g 是用户组，-f 是 &lt;code&gt;php5-cgi&lt;/code&gt; 的执行路径，-P 是进程的 pid，可以适当的在后面在加一个 -C 参数，这个数创建的进程数，本机开发的话一般设置在 3 - 5 左右即可（也可以使用 ab 测试以设置适当的进程数，这样可以防止 Nginx 的无辜 Down 掉）&lt;/p&gt;

&lt;p&gt;提示：spawn-fcgi 必须在运行的状况下才能使得 Nginx 支持 PHP
运行，因此可以把上面的启动代码追加到 /etc/rc.local 文件的尾部保存（在 exit
命令之前）。&lt;/p&gt;

&lt;h3 id=&#34;4-配置-nginx&#34;&gt;4. 配置 Nginx&lt;/h3&gt;

&lt;p&gt;Nginx 的配置相对比较简单，语法很像 PHP 代码，如果不了解的可以参考这个：&lt;a href=&#34;http://wiki.nginx.org/NginxFullExample&#34;&gt;范例1&lt;/a&gt;和&lt;a href=&#34;http://wiki.nginx.org/NginxFullExample2&#34;&gt;范例2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编辑 &lt;strong&gt;/etc/nginx/nginx.conf&lt;/strong&gt; 文件并作如下修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[...]
worker_processes  5;
[...]    
keepalive_timeout   2;
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义虚拟主机的配置项存放在 &lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt; 目录下面，每个虚拟主机配置一个文件并以 .conf 为文件后缀即可，默认是 default，也就是上面修改 Nginx 默认监听端口的文件，这里还要进一步对它配（点击右侧展开）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[...]
server {        
listen   80;        
server_name  _;        
access_log  /var/log/nginx/localhost.access.log;        
location / {                
root   /var/www/nginx-default;                
index  index.php index.html index.htm;        
}        

location /doc {                
root   /usr/share;                
autoindex on;                
allow 127.0.0.1;                
deny all;        
}        l

ocation /images {                
root   /usr/share;                
autoindex on;        
}        

# error_page  404  /404.html;        
# redirect server error pages to the static page /50x.html        
# error_page   500 502 503 504  /50x.html;        
location = /50x.html {                
root   /var/www/nginx-default;        
}        

# proxy the PHP scripts to Apache listening on 127.0.0.1:80       
#location ~ \.php$ {                
#proxy_pass   http://127.0.0.1;        
#}        

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        
location ~ \.php$ {                
fastcgi_pass   127.0.0.1:9000;               
fastcgi_index  index.php;                
fastcgi_param  SCRIPT_FILENAME  /var/www/nginx-default$fastcgi_script_name;                
include        fastcgi_params;        
}        

# deny access to .htaccess files, if Apache&#39;s document root        # concurs with nginx&#39;s one        
# location ~ /\.ht {                
deny  all;        
}
}

[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明下里面的个别参数：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;server_name&lt;/strong&gt; 是虚拟主机的服务器入口名称，可以是 IP 也可以是域名。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;location&lt;/strong&gt; 段，我在 index 追加了 index.php， root 路径是 &lt;code&gt;/var/www/nginx-default&lt;/code&gt; 说明该虚拟主机的根目录在这里。&lt;/p&gt;

&lt;p&gt;最重要的是关于 PHP 部分的 location 段：&lt;strong&gt;~ \.php\$ {}&lt;/strong&gt;，Nginx 默认没有开启，我们要确保它开启并在 fastcgi_param 一行更改了参数（因为浏览器调用的默认 PHP 解析器无法找到 PHP 脚本）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastcgi_param SCRIPT_FILENAME /var/www/nginx-default$fastcgi_script_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后确保在 include 和 fastcgi_params 之间隔出几个空格（BUG）&lt;/p&gt;

&lt;p&gt;重启 Nginx，然后编辑一个 info.php 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 创建 /var/www/nginx-default/info.php 文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后在浏览器访问（比如：&lt;a href=&#34;http://localhost/info.php&#34;&gt;http://localhost/info.php&lt;/a&gt; 或
&lt;a href=&#34;http://localhost:8080/info.php)，如看到&#34;&gt;http://localhost:8080/info.php)，如看到&lt;/a&gt; phpinfo
的参数页面说明配置安装成功 :)&lt;/p&gt;

&lt;h3 id=&#34;5-安装-配置-kohana&#34;&gt;5. 安装&amp;amp;配置 Kohana&lt;/h3&gt;

&lt;p&gt;Kohana 采用的 v3 版本，&lt;a href=&#34;http://v3.kohana.cn/guide/tutorials.git&#34;&gt;安装步骤&lt;/a&gt;（本文把 kohana 存放在 &lt;code&gt;/home/icyleaf/php/kohana&lt;/code&gt; 目录）&lt;/p&gt;

&lt;p&gt;添加 Nginx 虚拟主机配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 创建 /etc/nginx/conf.d/kohana.conf 文件
server {   
listen   kohana.local:8080;  
server_name  kohana.local;   
access_log  /var/log/nginx/kohana.access.log;

# define server root path    
set $root_path /home/icyleaf/php/kohana;  

location / {     
root   $root_path;       index  index.php index.html index.htm;
if (!-e $request_filename) {         
rewrite ^/(.*)$ /index.php?kohana_uri=/$1 last;      
}    
}

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000  
location ~ \.php$ {      
root   $root_path;       
fastcgi_pass   127.0.0.1:9000;       
fastcgi_index  index.php;        
fastcgi_param  SCRIPT_FILENAME  $root_path$fastcgi_script_name;      include fastcgi_params;  
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置中首先定义了一个变量 \$root_path 指定 Kohana 的源码的路径，对于
Kohana 的 URL rewrite url 重点是 location 段的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!-e $request_filename) {    
rewrite ^/(.*)$ /index.php?kohana_uri=/$1 last;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑完成后重载 Nginx 配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/nginx reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此教程结束，额外说明的是 Kohana 默认的 .htaccess 对 Nginx 无效可有可无
:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何获取 Element 的 XPath [PHP/Javascript]</title>
      <link>/localhost/2010/04/how-to-get-xpath-of-an-element-for-php-and-javascript</link>
      <pubDate>Fri, 02 Apr 2010 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2010/04/how-to-get-xpath-of-an-element-for-php-and-javascript</guid>
      <description>&lt;p&gt;这两天研究 HTML 的 DOM 需要寻找某个 Element 元素的完整 XPath 路径，由于使用的是 &lt;a href=&#34;http://simplehtmldom.sourceforge.net/manual.htm&#34;&gt;PHP Simple HTML DOM Parser&lt;/a&gt; 开源库，这个库类的使用方法几乎兼容 Javascript 的 DOM 语法并附带 DOM 选择器。虽然功能强大但是并不能直接获取 Element 的 XPath。这个怎么办呢，依稀记得 Firebug 有一个功能，选择某个元素在它的控制台可以显示 XPath。嗯，着手实践一下发现不仅可以显示而且还可以复制 XPath。&lt;/p&gt;

&lt;p&gt;于是想，如果可以找到 Javascript 版的相关代码就一定可以改成 PHP 版本的，结果在 Google 搜索找到了&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var elt = document.getElementById(&#39;table&#39;);
var xpath = getElementXPath(elt);alert(xpath);

// Get full XPath of an element
function getElementXPath(elt){  
	var path = &amp;quot;&amp;quot;;   
	for (; elt &amp;amp;&amp;amp; elt.nodeType == 1; elt = elt.parentNode)   
	{        
		idx = getElementIdx(elt);        
		xname = elt.tagName;     
		if (idx &amp;gt; 1) xname += &amp;quot;[&amp;quot; + idx + &amp;quot;]&amp;quot;;       
		path = &amp;quot;/&amp;quot; + xname + path;   
	}
	return path;    
}

// Get Idx of an element
function getElementIdx(elt){    
	var count = 1;    
	for (var sib = elt.previousSibling; sib ; sib = sib.previousSibling)    
	{        
		if(sib.nodeType == 1 &amp;amp;&amp;amp; sib.tagName == elt.tagName)  count++    
	}        
	return count;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP 改进版：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Use it before import PHP Simple HTML DOM Parser
$html = file_get_html(&#39;http://www.google.com/&#39;);

// find a sample element by id
$elt1 = $html-&amp;gt;find(&#39;#footer&#39;, 0);

// find a sample element by tag name
$elt2= $html-&amp;gt;find(&#39;div&#39;, 10);

// it will return if found it: [@id=&amp;quot;footer&amp;quot;]
$xpath = getElementXPath($elt1);

// it will return if found it: html/body/div[10]
$xpath = getElementXPath($elt2);

function getElementXPath($elt){    
	$path = &#39;&#39;;  
	$first = TRUE;   
	for(; ($elt AND $elt-&amp;gt;nodetype == 1); $elt = $elt-&amp;gt;parent())
	{        
		$xname = $elt-&amp;gt;tag;      
		$idx = getElementIdx($elt);           
		if ($first AND isset($elt-&amp;gt;attr[&#39;id&#39;]))      
		{            
			$path = &#39;//*[@id=&amp;quot;&#39; . $elt-&amp;gt;attr[&#39;id&#39;] . &#39;&amp;quot;]&#39;;           
			break;      
		}             

		if ($idx &amp;gt; 1)       
		{            
			%xname .= &#39;[&#39; . $idx . &#39;]&#39;;      
		}             

		$path = &#39;/&#39;.$xname.$path;             
		$first = FALSE;  
	}     

	return $path;
}

function getElementIdx($elt){    
	$count = 1;    
	for($sib = $elt-&amp;gt;prev_sibling(); $sib ; $sib = $sib-&amp;gt;prev_sibling())    
	{        
		if($sib-&amp;gt;nodetype == 1 &amp;amp;&amp;amp; $sib-&amp;gt;tag == $elt-&amp;gt;tag)        
		{         
			$count++;        
		}    
	}        
	return $count;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大家同样可以把上面的代码直接 crack 到 PHP Simple HTML DOM Parser 库中。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Douban API Package 发布！</title>
      <link>/localhost/2010/01/douban-api-package</link>
      <pubDate>Fri, 08 Jan 2010 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2010/01/douban-api-package</guid>
      <description>&lt;p&gt;Douban API Package 是一个使用 PHP 开发且基于 Kohana v3 开发的一个扩展（Module）。&lt;/p&gt;

&lt;p&gt;它对&lt;a href=&#34;http://www.douban.com/&#34;&gt;豆瓣&lt;/a&gt; &lt;a href=&#34;http://www.douban.com/service/apidoc/&#34;&gt;API&lt;/a&gt; 进行重新封包。它使用起来非常方便，可以快速开发一个 web 应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为什么要另外封包？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对，豆瓣官方提供了一种 PHP 的解决方案，可是需要庞大的支持库：GData（20M左右）以及可能无法修改的环境配置（租用的空间主机会遇到这样的问题）。虽说 Douban API Package 也是基于框架开发，不过 Kohana 是一个纯 PHP5 模式且体积小巧（仅有 478KB），优秀迅捷的框架。&lt;strong&gt;最重要的是&lt;/strong&gt;，Douban API Package 提供了目前官方所有功能的支持。并有线上网站：&lt;a href=&#34;http://modou.us/&#34;&gt;魔豆&lt;/a&gt; 和&lt;a href=&#34;http://modou.us/console&#34;&gt;豆瓣 API 控制台&lt;/a&gt;长期运营。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;虽然它是基于 Kohana 框架开发，但是并没有使用太多的依赖，稍微熟悉可以轻松分离出来！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装需求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP 5.2+ with curl module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/kohana/kohana&#34;&gt;Kohana v3&lt;/a&gt; - 一款纯 PHP 5 框架，它的特点就是&lt;strong&gt;高安全性&lt;/strong&gt;，&lt;strong&gt;轻量级代码&lt;/strong&gt;，&lt;strong&gt;容易使用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;安装步骤&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;步骤 0: 部署 Kohana v3&lt;/p&gt;

&lt;p&gt;下载并安装 Kohana v3 的过程，请大家参考此教程：&lt;a href=&#34;http://kohanaphp.cn/guide/tutorials.git&#34;&gt;使用 Git 部署 Kohana 系统&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;步骤 1: 下载本扩展!&lt;/p&gt;

&lt;p&gt;你可以在部署完毕的 Kohana 系统的根目录执行下面操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule add git://github.com/icyleaf/douban.git modules/douban
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成！&lt;/p&gt;

&lt;p&gt;或者你也可以从本&lt;a href=&#34;http://github.com/icyleaf/douban&#34;&gt;github 项目&lt;/a&gt; 下载压缩包放置在 modules 文件夹下面。&lt;/p&gt;

&lt;p&gt;步骤 2: 在 &lt;code&gt;bootstrap.php&lt;/code&gt; 文件中启用该模块(默认情况下，存储在 &lt;code&gt;application&lt;/code&gt; 文件夹)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** * Enable modules. Modules are referenced by a relative or absolute path. *
/Kohana::modules(array(     
	&#39;douban&#39;        =&amp;gt; MODPATH.&#39;douban&#39;,     // Douban API Module    //
	&#39;database&#39;   =&amp;gt; MODPATH.&#39;database&#39;,   // Database access    //
	&#39;image&#39;      =&amp;gt; MODPATH.&#39;image&#39;,      // Image manipulation    //
	&#39;orm&#39;        =&amp;gt; MODPATH.&#39;orm&#39;,        // Object Relationship Mapping (not complete)    //
	&#39;pagination&#39; =&amp;gt; MODPATH.&#39;pagination&#39;, // Paging of results    //
	&#39;paypal&#39;     =&amp;gt; MODPATH.&#39;paypal&#39;,     // PayPal integration (not complete)    //
	&#39;todoist&#39;    =&amp;gt; MODPATH.&#39;todoist&#39;,    // Todoist integration    //
	&#39;unittest&#39;   =&amp;gt; MODPATH.&#39;unittest&#39;,   // Unit testing    // &#39;codebench&#39;  =&amp;gt; MODPATH.
	&#39;codebench&#39;,  // Benchmarking tool    
));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;目录结构&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;douban
   +--- classes         
   			+--- controller               # 豆瓣样例         
   					+--- douban                   # Douban API Package               
   							+--- api               # Douban API                
   							+--- core.php          # Douban Core            
   							+--- oauth.php         # Douban OAuth                
   							+--- request.php       # Douban Requset                 
						   	+--- response.php      # Douban Response         
					+--- douban.php               # Douban API Class  
   +--- config         
   			+--- douban.php               # 豆瓣 API 配置文件         
   			+--- user_agents.php          # 奉送给大家一些手机 User agent 配置文件  
   +--- media         
   			+--- images                   # 奉送给大家豆瓣 API 用到的图像        
   +--- vendor         
   			+--- OAuth.php                # OAuth 官方推荐 PHP 库  
   			+--- LICENSE  
   +--- README.markdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;快速上手&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Douban API Package 提供一些演示用例，系统部署完毕后可以通过&lt;code&gt;http://host/demo_douban&lt;/code&gt; 访问。&lt;/p&gt;

&lt;p&gt;文件路径：&lt;code&gt;classes/controller/douban_demo.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;源码库：&lt;a href=&#34;http://github.com/icyleaf/douban&#34;&gt;http://github.com/icyleaf/douban&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;祝你开发顺利！&lt;/p&gt;

&lt;p&gt;如果任何疑问或者 Bugs 反馈，即可以在本项目中提交 Issue
或者给我发邮件：icyleaf.cn囧gmail.com （请替换 &amp;ldquo;囧&amp;rdquo; 为 @）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kohana 官方 2.3，2.4，3.0 的最终裁决！</title>
      <link>/localhost/2009/07/official-2-3-2-4-3-0-decisions</link>
      <pubDate>Fri, 24 Jul 2009 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2009/07/official-2-3-2-4-3-0-decisions</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;更新：Kohana 官方已经做出&lt;a href=&#34;http://forum.khnfans.cn/topic/view/167/1.html&#34;&gt;最终裁决&lt;/a&gt;！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;两天前我(Shadowhand)曾经&lt;a href=&#34;http://forum.kohanaphp.com/comments.php?DiscussionID=2835&amp;amp;page=6#Item_12&#34;&gt;说过&lt;/a&gt;关于 2.4 和 3.0 版本的问题和它们之间的关系已经做出的解答。之后的今天和其他开发者见面（with more of the devs），这似乎是错误的。所以长话短说，我们现在有两个选择：&lt;/p&gt;

&lt;p&gt;​1. 我们在一个月内分别发布 2.4 和 3.0。 2.4 将会经可能的兼容 2.3.x 版本但是其中 Database 和 i18n 是全新的不同于 2.3 的系统。 3.0 也将不同于 2.4 的 Database，但是 i18n 系统还是和 2.4 一致。&lt;/p&gt;

&lt;p&gt;​2. 完全抛弃 2.4 而专攻 3.0 版本，它将会有一个全新的类似 2.4 版本的 Database 特性，但是语法和更多的特性稍有些不同。 3.0 在发布的同时，新的网站和用户手册也会同步完成。&lt;/p&gt;

&lt;p&gt;2.4 和 3.0 版本大约将会在同一天发布（2009年的8月下旬或9月上旬）。两个版本都不会去兼容
2.3.4 版本。虽然升级至 2.4 版本将会少于升级至 3.0 的兼容工作。（请记住，我们从来没有建议和要求用户升级到哪个核心版本）&lt;/p&gt;

&lt;p&gt;我本可以行使 &lt;a href=&#34;http://lmgtfy.com/?q=bdfl&#34;&gt;BDFL&lt;/a&gt;（Benevolent Dictator For Life，代表少数开源软件开发者的领头人）权利做个强制决定，但是我觉得还是听一听社区的声音。你们认为哪个是 Kohana 在未来长期（至少 6 个月以上）开发基础的最好选择呢?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;： 选择第二项，将会抛弃 2.3.x 版本公开发布的版本修复&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&#34;http://forum.kohanaphp.com/comments.php?DiscussionID=3043&amp;amp;page=1&#34;&gt;Official 2.3, 2.4, 3.0 Decisions - We need your feedback!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;mdash;&amp;mdash;&amp;mdash;我是华丽的分割线&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/p&gt;

&lt;p&gt;KO3 RC1 目前已经发布，详情请看&lt;a href=&#34;http://forum.khnfans.cn/topic/view/168.html&#34;&gt;这里&lt;/a&gt;，希望大家喜欢 Kohana，关注
Kohana，使用 Kohana
的朋友留下你的看法，这对Kohana自身和社区用户都是有益的！&lt;/p&gt;

&lt;p&gt;&amp;mdash;&amp;mdash;&amp;ndash;关于 E-TextEditor  的分割线&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;p&gt;今天前去 Textmate clone 的软件 Intype论坛瞅了一眼，惊奇的发现同样是
Textmate clone 的 E-TextEditor 居然在今年3月份宣布开源，而5月份就在
Github 放出了源码！而且声称会开发 Linux 版本并且弘扬 Linux 的精神，Linux
版本统统免费！详情请看 &lt;a href=&#34;http://intype.info/forums/discussion/827/eeditor-going-open-source-open-company/#Item_0&#34;&gt;Intype 论坛&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而且已经有Linux用户编译运行了 E-TextEditor 详情请看：&lt;a href=&#34;http://fixnum.org/blog/2009/e_on_fedora&#34;&gt;Building the E text
editor on Fedora 10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不知道身为 Textmate clone 的 Intype
会做何打算，它们目前正在全力开发新的版本（貌似内核和界面全部重新），拭目以待！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>豆瓣API测试控制台</title>
      <link>/localhost/2009/07/douban-api-console</link>
      <pubDate>Mon, 06 Jul 2009 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2009/07/douban-api-console</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;项目已开源: &lt;a href=&#34;http://github.com/icyleaf/modou&#34;&gt;http://github.com/icyleaf/modou&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;豆瓣 API 测试控制台的创造灵感来源于 Facebook Developers Tools 中的&lt;a href=&#34;http://developers.facebook.com/tools.php&#34;&gt;Facebook API Console&lt;/a&gt;， 或许大家知道，魔豆是我的另外一个豆瓣 API 应用，由于是自己封装的 Douban
API（官方提供的库类要求太多，安装繁琐，这不属于我喜爱简洁，轻便的风格），每次想查看某个
API 接口返回的数据都要写一个 test 跑一下。麻烦不说，还容易出错，于是，使用自己封装的 Douban API，借鉴 Facebook API Console
的界面和类似的功能显示，终于小有所成，其中为了实现此控制台，封包的库类经过两次大改，虽然改的很辛苦，但从中学到了很多开发经验。&lt;/p&gt;

&lt;p&gt;测试用户必须先进行用户验证才能进行测试，这主要是为了：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;避免提交查询中出现错误，并让测试者使用到全部API方法&lt;/li&gt;
&lt;li&gt;防止恶意用户利用它做二次api调用，由于测试控制台的传输很简单，提交参数即可查询。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;查询方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;进行用户的登录验证&lt;/li&gt;
&lt;li&gt;选择返回的数据类型（支持官方提供的 XML 和 JSON格式）&lt;/li&gt;
&lt;li&gt;选择需要查询的API方法（这里我做了分类）&lt;/li&gt;
&lt;li&gt;如果查询的方法存在参数，会在方法下面显示。&lt;/li&gt;
&lt;li&gt;设置完毕参数后，点击“调用此方法”，稍等片刻即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;返回的数据结果会在右侧显示出来，其中，右上部分是调用相关 API 的 URL 地址；右下部分是返回的数据结果。&lt;/p&gt;

&lt;p&gt;如果，参数设置错误，或者其他问题，返回的结果会以 [CODE] Content
的格式返回，其中 &lt;strong&gt;CODE&lt;/strong&gt;代码返回的状态码，&lt;strong&gt;Content&lt;/strong&gt; 是返回的信息。&lt;/p&gt;

&lt;p&gt;通用参数解释：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id  - 查询方法涉及到的 id 值（人，书影音，日记，广播，豆邮，同城等）&lt;/li&gt;
&lt;li&gt;message - 广播发送的内容&lt;/li&gt;
&lt;li&gt;title - 日记，豆邮的标题&lt;/li&gt;
&lt;li&gt;content - 主题内容&lt;/li&gt;
&lt;li&gt;city - 同城活动的城市代号（根据我判断，应该是中文的拼音，详细请看&lt;a href=&#34;http://www.douban.com/location/world/&#34;&gt;官方同城列表&lt;/a&gt;中各个城市的url）&lt;/li&gt;
&lt;li&gt;query - 搜索的关键字&lt;/li&gt;
&lt;li&gt;index - 返回多个元素时，起始元素的下标（相当于豆瓣 api 文档中的start-index）&lt;/li&gt;
&lt;li&gt;max - 返回多个entry时，每页最多的结果数（相当于豆瓣 api 文档中的max-results）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中某些方法（涉及到自身的数据，比如我的信息，我的广播，我的同城）在进行查询的时候可以把
id 留空或者设置为 ‘me’ （不带引号），这样调用结果显示的是自己的信息。&lt;/p&gt;

&lt;p&gt;如果长时间(大于1分钟)处于“调用中”，可能是由于程序问题，请刷新后重试。&lt;/p&gt;

&lt;p&gt;已知存在的问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;界面和方法列表在 Chrome 浏览器有不兼容的问题出现&lt;/li&gt;
&lt;li&gt;返回数据结果头一行多出一个类似水平制表符的转义符似的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于目前为止豆瓣 API 还没有封装完成，现只提供用户，广播，书影音，豆邮和日记的不完全功能测试查询。
其余的 API 会尽快添加进去 :)&lt;/p&gt;

&lt;p&gt;测试地址：&lt;a href=&#34;http://ews.im/douban_console&#34;&gt;http://ews.im/douban_console&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>魔豆：豆瓣网非官方移动版本</title>
      <link>/localhost/2009/06/modou</link>
      <pubDate>Mon, 22 Jun 2009 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2009/06/modou</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;项目已开源: &lt;a href=&#34;http://github.com/icyleaf/modou&#34;&gt;http://github.com/icyleaf/modou&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://modou.us&#34; title=&#34;魔豆：豆瓣网非官方移动版本&#34;&gt;魔豆&lt;/a&gt;，一个&lt;a href=&#34;http://douban.com&#34;&gt;豆瓣网&lt;/a&gt;非官方移动版本，基于&lt;a href=&#34;http://www.douban.com/service/apidoc/&#34; title=&#34;豆瓣 API&#34;&gt;豆瓣
API&lt;/a&gt;开发的专门为移动终端（手持设备）定制的豆瓣移动版本。魔豆专注于豆瓣网的&lt;strong&gt;广播&lt;/strong&gt;及&lt;strong&gt;同城活动&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;魔豆的来历：豆瓣移动版 -&amp;gt; Douban mobile -&amp;gt; moDouban -&amp;gt; moDou -&amp;gt;魔豆&lt;/p&gt;

&lt;p&gt;目前魔豆发布的功能：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;友邻广播：支持显示广播，回复发起人和重播（重复发布其他发起者的广播）&lt;/li&gt;
&lt;li&gt;同城活动：查看自己参与（包含参加/感兴趣）的活动以及用户所在城市的同城活动（需提前在豆瓣设置）&lt;/li&gt;
&lt;li&gt;查看用户相册以及同城活动相册（仅限于从友邻广播）&lt;/li&gt;
&lt;li&gt;搜索用户/书影音/同城活动&lt;/li&gt;
&lt;li&gt;查看用户/书影音/同城活动信息&lt;/li&gt;
&lt;li&gt;显示和查阅豆邮&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我，是一个重度豆瓣使用者，也许这和身在北京这所繁华的帝都有很大的关系。虽然豆瓣网直到现在为其定位在书影音这三大模块，但不可否认的，豆瓣小组，豆瓣广播，豆瓣同城甚至豆邮都起着重要的标志性作用。&lt;/p&gt;

&lt;p&gt;或许和大家一样，一直期待着豆瓣网能够推出移动版本，可以用手机或其他移动设备查查书影音，看看友邻广播和未读豆邮，浏览下所在城市的同城活动，光想想都是这么的惬意，于是我们在等，一直在等，几乎使我望穿秋水的时候，还是杳无音讯。平时在有 WIFI 网络的情况下，使用 iTouch
访问一下豆瓣网还是可以，如果离开了它，以为这必须使用较昂贵的 GPRS 网络，经过漫长的 loading 才能看到自己感兴趣或自己想看的一点点信息&amp;hellip;&lt;/p&gt;

&lt;p&gt;于是，自己何不使用豆瓣API开发一个呢？紧接着通过查阅大量的文档和官方提供的演示代码，抛弃
Zend Framework 和 Gdata，使用自己维护中文化的 &lt;a href=&#34;http://khnfans.cn&#34; title=&#34;Kohana 中文爱好者&#34;&gt;Kohana&lt;/a&gt;框架，一点一点的搭建起了基础库，通过一个星期多的时间，开始一边做页面的展现，另一边继续完善基础库，直到目前为止，大体的框架已经完成，下面需要考虑如何对细节做修改和完善。&lt;/p&gt;

&lt;p&gt;另外，由于 PHP 没有低耦合的 HTTP requset class，自己使用 curl 函数一点点抠出来的一个 RESTFul requset class，在进行提交 POST，PUT，DELETE 方法还存在一些技术问题，所以魔豆目前还不支持对书影音，同城活动进行操作（包含，想读/听/看，感兴趣，我要参加等等），我会尽快完善。&lt;/p&gt;

&lt;p&gt;开发环境： &lt;strong&gt;Windows XP + XAMPP + E-texteditor&lt;/strong&gt; (Office work) AND
&lt;strong&gt;Ubuntu 9.04 + XAMPP + Aptana&lt;/strong&gt; (Laptop)&lt;/p&gt;

&lt;p&gt;调试设备：iPod Touch + Blackberry 8310 + Nokia N-GAGE QD&lt;/p&gt;

&lt;p&gt;由于设备有限，可能在其他设备上会出现设备误判或UI上的问题（大家可以在本日志下面留下误判设备型号），敬请谅解。后期会对不同设备进行专门的优化
:)&lt;/p&gt;

&lt;p&gt;网站：&lt;a href=&#34;http://modou.us&#34;&gt;http://modou.us&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;开发进度：&lt;a href=&#34;http://modou.us/timeline&#34;&gt;http://modou.us/timeline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;相关截图：&lt;a href=&#34;http://www.getdropbox.com/gallery/45081/1/modou?h=b26d7e&#34;&gt;http://www.getdropbox.com/gallery/45081/1/modou?h=b26d7e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;欢迎大家前来测试和使用，心情愉快。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;更新于 2009年06月22日：由于China Mobile的原因，黑莓手机默认浏览器无法判别，请黑莓用户使用 Opera Mini 或其他浏览器访问，原因请看&lt;a href=&#34;http://www.douban.com/group/topic/6946152/&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Modules Library 和 DBManager Module</title>
      <link>/localhost/2009/03/modules-helper-and-dbmanager-module</link>
      <pubDate>Thu, 05 Mar 2009 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2009/03/modules-helper-and-dbmanager-module</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hi, Don&amp;rsquo;t understand Chinese? ok, No problem. Here to view &lt;a href=&#34;http://forum.kohanaphp.com/comments.php?DiscussionID=2117&amp;amp;page=1&#34;&gt;Modules Library&lt;/a&gt; and &lt;a href=&#34;http://forum.kohanaphp.com/comments.php?DiscussionID=2156&amp;amp;page=1&#34;&gt;DBManager Module&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或许大家可能有了解到，本人目前一直在对 &lt;a href=&#34;http://kohanaphp.com&#34;&gt;Kohana&lt;/a&gt;这个纯 PHP5
框架进行文档翻译和维护，同时也建立一个站点：&lt;a href=&#34;http://khnfans.cn/&#34; title=&#34;Kohana爱好者&#34;&gt;Kohana爱好者&lt;/a&gt;。
站点提供中文化的文档，包含中文语言包的中文镜像下载支持以及中文化论坛。Kohana 
凭借着基于 CodeIgniter
框架+PHP5，赢得了一群使用者，我也希望无论是国外的还是国内的使用者都能共享自己的力量。&lt;/p&gt;

&lt;p&gt;恩&amp;hellip;以上算是给自己打个广告。Modules Library 和 DBManager Module 均是为
Kohana 框架编写的，以后会根据自己和大家的寻求做适当的更新。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modules Library&lt;/strong&gt;，中文译为 扩展管理库，是一个方便管理 Kohana
系统自身扩展配置的库类，通过它使用代码就可以轻松实现获取当前所有 Modules
信息，已激活的 Moduels， 未激活的 Modules，最重要的是还可以添加
Modules，激活和关闭 Module。&lt;/p&gt;

&lt;p&gt;范例代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Instance Module library
$module = Module::instance();

// list all modules of application in application/config/config.php
echo Kohana::debug($module-&amp;gt;list_all());

// list active modules of application in application/config/config.php
echo Kohana::debug($module-&amp;gt;list_active());

// list inactive modules of application in application/config/config.ph	p
echo Kohana::debug($module-&amp;gt;list_inactive());

// active &#39;auth&#39; module
$module-&amp;gt;active(&#39;auth&#39;);

// inactive &#39;auth&#39; module
$module-&amp;gt;inactive(&#39;auth&#39;);

// add &#39;sample_module&#39; module with description.
$module-&amp;gt;add(&#39;sample_module&#39;, &#39;Just a sample module&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;DBManager Module&lt;/strong&gt;灵感来自 WordPress 插件 WP_DBManager，就连名字都很类似，其实对于其功能也是按照它实现。哈哈～～&lt;/p&gt;

&lt;p&gt;目前对于此扩展实现的功能如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;获得当前 Mysql 版本以及 Kohana 连接数据库等信息&lt;/li&gt;
&lt;li&gt;获取当前所有表数据&lt;/li&gt;
&lt;li&gt;备份数据库（支持Gzip压缩和自动备份）&lt;/li&gt;
&lt;li&gt;优化数据库（支持自动优化）&lt;/li&gt;
&lt;li&gt;修复数据库&lt;/li&gt;
&lt;li&gt;获得，下载，删除数据库备份文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此扩展支持配置和 i18n，以及对目前来说一个简易的演示页面。&lt;/p&gt;

&lt;p&gt;目前还没有对实现自动备份后进行 Email 通知的功能，以及以后会对多种数据库支持。和限制最大化数据库备份文件。至于是否可以在进行数据库表数据的操作（比如查询，删除表，修改表等）是否还需要支持？&lt;/p&gt;

&lt;p&gt;以后对自己发布的 Kohana 相关的代码都会托管在 Google Code 上面，地址：&lt;a href=&#34;http://code.google.com/p/kohana-fans-cn/&#34;&gt;http://code.google.com/p/kohana-fans-cn/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>校内网，海内网，开心网用户隐私查看器</title>
      <link>/localhost/2008/10/the-school-network-network-happy-at-home-and-network-user-privacy-viewer</link>
      <pubDate>Fri, 10 Oct 2008 12:34:56 +0800</pubDate>
      
      <guid>/localhost/2008/10/the-school-network-network-happy-at-home-and-network-user-privacy-viewer</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;：目前校内网已经修补了此漏洞，所以大家可以放弃了，除非你想抓住那 1% 的机会&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你想查看他或她的私隐信息吗？如果你说的他或她是校内网，海内网，开心网的用户，那么请你尝试一下，校内网，海内网，开心网用户隐私查看器。通过这个工具，你可以轻松的获得用户的相册照片，日志文章以及状态（迷你博客）的内容。恩&amp;hellip;趁着目前都还没有打补丁之前。不要做坏事哦～&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://labs.icyleaf.com/tools/sns_user_informations.php&#34;&gt;校内网，海内网，开心网用户隐私查看器&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;此工具重点做的是校内网的功能模块，对于海内网和开心网的用户，只是显示了用户的相关链接。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用说明&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先！必须先登录网站系统之后才进行操作！
无论是校内网，海内网还是开心网的用户，首先都需要获得用户的ID，那么怎么获得呢，很简单，只要打开用户的个人界面，查看地址的末尾的数字。一般会以下列的方式出现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://xiaonei.com/profile.do?id=123456
http://www.hainei.com/user?r=123456
http://www.kaixin001.com/home/?uid=123456
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数字前面的就可以看出来是用户ID。获得用户ID之后，只要把用户ID填入到校内网，海内网，开心网用户隐私查看器的相应输入框，并选择是哪个网站的用户，点击”Get it!“，稍等片刻就会获得用户的相关链接。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于校内网和海内网均属于一个团队开发出来的，所以在系统但自身机制上的问题，可以通过地址绕过的方式查看用户的相册，日志，状态记录等等非用户资料信息。但是开心网可能考虑到用户的安全性，在默认选项上安全系数提高了一级。那么到底是哪里提供了呢，好的，我简单讲解一下，对于校内网和海内网，用户无论是创建相册还是添加日志和状态记录，默认的隐私属性（谁能浏览）为”全站用户可见”，这就导致了校内网，海内网，开心网用户隐私查看器的出现。而开心网除了日志之外，其相册，记录默认为“好友可见”。所以，可查看的资源只有日志，还有极少数的用户可能会把相册的隐私属性设置为”全站用户可见”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;补救方法&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;等待系统的修改，或者系统可能就是为了这样&amp;hellip;&lt;/li&gt;
&lt;li&gt;手动修改&amp;hellip;把隐私属性修改为“好友可见”或其他。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;特别声明&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本工具只为技术交流使用，请勿做非法事情，如有此事请自己承担法律责任！切记！切记！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>